   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,4
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "ff.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.mem_cpy,"ax",%progbits
  16              	 .align 1
  17              	 .syntax unified
  18              	 .thumb
  19              	 .thumb_func
  20              	 .fpu softvfp
  22              	mem_cpy:
  23              	.LFB0:
  24              	 .file 1 "fatfs/ff.c"
   1:fatfs/ff.c    **** /*----------------------------------------------------------------------------/
   2:fatfs/ff.c    **** /  FatFs - FAT file system module  R0.09a                 (C)ChaN, 2012
   3:fatfs/ff.c    **** /-----------------------------------------------------------------------------/
   4:fatfs/ff.c    **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:fatfs/ff.c    **** / This is a free software that opened for education, research and commercial
   6:fatfs/ff.c    **** / developments under license policy of following terms.
   7:fatfs/ff.c    **** /
   8:fatfs/ff.c    **** /  Copyright (C) 2012, ChaN, all right reserved.
   9:fatfs/ff.c    **** /
  10:fatfs/ff.c    **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:fatfs/ff.c    **** / * No restriction on use. You can use, modify and redistribute it for
  12:fatfs/ff.c    **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:fatfs/ff.c    **** / * Redistributions of source code must retain the above copyright notice.
  14:fatfs/ff.c    **** /
  15:fatfs/ff.c    **** /-----------------------------------------------------------------------------/
  16:fatfs/ff.c    **** / Feb 26,'06 R0.00  Prototype.
  17:fatfs/ff.c    **** /
  18:fatfs/ff.c    **** / Apr 29,'06 R0.01  First stable version.
  19:fatfs/ff.c    **** /
  20:fatfs/ff.c    **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:fatfs/ff.c    **** /                   Removed unbuffered mode.
  22:fatfs/ff.c    **** /                   Fixed a problem on small (<32M) partition.
  23:fatfs/ff.c    **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:fatfs/ff.c    **** /
  25:fatfs/ff.c    **** / Sep 22,'06 R0.03  Added f_rename().
  26:fatfs/ff.c    **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:fatfs/ff.c    **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:fatfs/ff.c    **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:fatfs/ff.c    **** /
  30:fatfs/ff.c    **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:fatfs/ff.c    **** /                   Changed some interfaces for multiple drive system.
  32:fatfs/ff.c    **** /                   Changed f_mountdrv() to f_mount().
  33:fatfs/ff.c    **** /                   Added f_mkfs().
  34:fatfs/ff.c    **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:fatfs/ff.c    **** /                   Added a capability of extending file size to f_lseek().
  36:fatfs/ff.c    **** /                   Added minimization level 3.
  37:fatfs/ff.c    **** /                   Fixed an endian sensitive code in f_mkfs().
  38:fatfs/ff.c    **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:fatfs/ff.c    **** /                   Added FSInfo support.
  40:fatfs/ff.c    **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:fatfs/ff.c    **** /                   Fixed short seek (<= csize) collapses the file object.
  42:fatfs/ff.c    **** /
  43:fatfs/ff.c    **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:fatfs/ff.c    **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:fatfs/ff.c    **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:fatfs/ff.c    **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:fatfs/ff.c    **** /                   Fixed off by one error at FAT sub-type determination.
  48:fatfs/ff.c    **** /                   Fixed btr in f_read() can be mistruncated.
  49:fatfs/ff.c    **** /                   Fixed cached sector is not flushed when create and close without write.
  50:fatfs/ff.c    **** /
  51:fatfs/ff.c    **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  52:fatfs/ff.c    **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  53:fatfs/ff.c    **** /
  54:fatfs/ff.c    **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
  55:fatfs/ff.c    **** /                   Added long file name feature.
  56:fatfs/ff.c    **** /                   Added multiple code page feature.
  57:fatfs/ff.c    **** /                   Added re-entrancy for multitask operation.
  58:fatfs/ff.c    **** /                   Added auto cluster size selection to f_mkfs().
  59:fatfs/ff.c    **** /                   Added rewind option to f_readdir().
  60:fatfs/ff.c    **** /                   Changed result code of critical errors.
  61:fatfs/ff.c    **** /                   Renamed string functions to avoid name collision.
  62:fatfs/ff.c    **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  63:fatfs/ff.c    **** /                   Added multiple sector size feature.
  64:fatfs/ff.c    **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  65:fatfs/ff.c    **** /                   Fixed wrong cache control in f_lseek().
  66:fatfs/ff.c    **** /                   Added relative path feature.
  67:fatfs/ff.c    **** /                   Added f_chdir() and f_chdrive().
  68:fatfs/ff.c    **** /                   Added proper case conversion to extended char.
  69:fatfs/ff.c    **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  70:fatfs/ff.c    **** /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
  71:fatfs/ff.c    **** /                   Fixed name matching error on the 13 char boundary.
  72:fatfs/ff.c    **** /                   Added a configuration option, _LFN_UNICODE.
  73:fatfs/ff.c    **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  74:fatfs/ff.c    **** /
  75:fatfs/ff.c    **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  76:fatfs/ff.c    **** /                   Added file lock feature. (_FS_SHARE)
  77:fatfs/ff.c    **** /                   Added fast seek feature. (_USE_FASTSEEK)
  78:fatfs/ff.c    **** /                   Changed some types on the API, XCHAR->TCHAR.
  79:fatfs/ff.c    **** /                   Changed fname member in the FILINFO structure on Unicode cfg.
  80:fatfs/ff.c    **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  81:fatfs/ff.c    **** / Aug 16,'10 R0.08a Added f_getcwd(). (_FS_RPATH = 2)
  82:fatfs/ff.c    **** /                   Added sector erase feature. (_USE_ERASE)
  83:fatfs/ff.c    **** /                   Moved file lock semaphore table from fs object to the bss.
  84:fatfs/ff.c    **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  85:fatfs/ff.c    **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  86:fatfs/ff.c    **** / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
  87:fatfs/ff.c    **** /                   f_lseek() reports required table size on creating CLMP.
  88:fatfs/ff.c    **** /                   Extended format syntax of f_printf function.
  89:fatfs/ff.c    **** /                   Ignores duplicated directory separators in given path name.
  90:fatfs/ff.c    **** /
  91:fatfs/ff.c    **** / Sep 06,'11 R0.09  f_mkfs() supports multiple partition to finish the multiple partition feature.
  92:fatfs/ff.c    **** /                   Added f_fdisk(). (_MULTI_PARTITION = 2)
  93:fatfs/ff.c    **** / Aug 27,'12 R0.09a Fixed assertion failure due to OS/2 EA on FAT12/16 volume.
  94:fatfs/ff.c    **** /                   Changed f_open() and f_opendir reject null object pointer to avoid crash.
  95:fatfs/ff.c    **** /                   Changed option name _FS_SHARE to _FS_LOCK.
  96:fatfs/ff.c    **** /---------------------------------------------------------------------------*/
  97:fatfs/ff.c    **** 
  98:fatfs/ff.c    **** #include "ff.h"			/* FatFs configurations and declarations */
  99:fatfs/ff.c    **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
 100:fatfs/ff.c    **** 
 101:fatfs/ff.c    **** 
 102:fatfs/ff.c    **** /*--------------------------------------------------------------------------
 103:fatfs/ff.c    **** 
 104:fatfs/ff.c    ****    Module Private Definitions
 105:fatfs/ff.c    **** 
 106:fatfs/ff.c    **** ---------------------------------------------------------------------------*/
 107:fatfs/ff.c    **** 
 108:fatfs/ff.c    **** #if _FATFS != 4004	/* Revision ID */
 109:fatfs/ff.c    **** #error Wrong include file (ff.h).
 110:fatfs/ff.c    **** #endif
 111:fatfs/ff.c    **** 
 112:fatfs/ff.c    **** 
 113:fatfs/ff.c    **** /* Definitions on sector size */
 114:fatfs/ff.c    **** #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 115:fatfs/ff.c    **** #error Wrong sector size.
 116:fatfs/ff.c    **** #endif
 117:fatfs/ff.c    **** #if _MAX_SS != 512
 118:fatfs/ff.c    **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
 119:fatfs/ff.c    **** #else
 120:fatfs/ff.c    **** #define	SS(fs)	512U			/* Fixed sector size */
 121:fatfs/ff.c    **** #endif
 122:fatfs/ff.c    **** 
 123:fatfs/ff.c    **** 
 124:fatfs/ff.c    **** /* Reentrancy related */
 125:fatfs/ff.c    **** #if _FS_REENTRANT
 126:fatfs/ff.c    **** #if _USE_LFN == 1
 127:fatfs/ff.c    **** #error Static LFN work area must not be used in re-entrant configuration.
 128:fatfs/ff.c    **** #endif
 129:fatfs/ff.c    **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 130:fatfs/ff.c    **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 131:fatfs/ff.c    **** #else
 132:fatfs/ff.c    **** #define	ENTER_FF(fs)
 133:fatfs/ff.c    **** #define LEAVE_FF(fs, res)	return res
 134:fatfs/ff.c    **** #endif
 135:fatfs/ff.c    **** 
 136:fatfs/ff.c    **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
 137:fatfs/ff.c    **** 
 138:fatfs/ff.c    **** 
 139:fatfs/ff.c    **** /* File access control feature */
 140:fatfs/ff.c    **** #if _FS_LOCK
 141:fatfs/ff.c    **** #if _FS_READONLY
 142:fatfs/ff.c    **** #error _FS_LOCK must be 0 on read-only cfg.
 143:fatfs/ff.c    **** #endif
 144:fatfs/ff.c    **** typedef struct {
 145:fatfs/ff.c    **** 	FATFS *fs;				/* File ID 1, volume (NULL:blank entry) */
 146:fatfs/ff.c    **** 	DWORD clu;				/* File ID 2, directory */
 147:fatfs/ff.c    **** 	WORD idx;				/* File ID 3, directory index */
 148:fatfs/ff.c    **** 	WORD ctr;				/* File open counter, 0:none, 0x01..0xFF:read open count, 0x100:write mode */
 149:fatfs/ff.c    **** } FILESEM;
 150:fatfs/ff.c    **** #endif
 151:fatfs/ff.c    **** 
 152:fatfs/ff.c    **** 
 153:fatfs/ff.c    **** 
 154:fatfs/ff.c    **** /* DBCS code ranges and SBCS extend char conversion table */
 155:fatfs/ff.c    **** 
 156:fatfs/ff.c    **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
 157:fatfs/ff.c    **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
 158:fatfs/ff.c    **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
 159:fatfs/ff.c    **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
 160:fatfs/ff.c    **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
 161:fatfs/ff.c    **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
 162:fatfs/ff.c    **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
 163:fatfs/ff.c    **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 164:fatfs/ff.c    **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 165:fatfs/ff.c    **** 
 166:fatfs/ff.c    **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 167:fatfs/ff.c    **** #define _DF1S	0x81
 168:fatfs/ff.c    **** #define _DF1E	0xFE
 169:fatfs/ff.c    **** #define _DS1S	0x40
 170:fatfs/ff.c    **** #define _DS1E	0x7E
 171:fatfs/ff.c    **** #define _DS2S	0x80
 172:fatfs/ff.c    **** #define _DS2E	0xFE
 173:fatfs/ff.c    **** 
 174:fatfs/ff.c    **** #elif _CODE_PAGE == 949	/* Korean */
 175:fatfs/ff.c    **** #define _DF1S	0x81
 176:fatfs/ff.c    **** #define _DF1E	0xFE
 177:fatfs/ff.c    **** #define _DS1S	0x41
 178:fatfs/ff.c    **** #define _DS1E	0x5A
 179:fatfs/ff.c    **** #define _DS2S	0x61
 180:fatfs/ff.c    **** #define _DS2E	0x7A
 181:fatfs/ff.c    **** #define _DS3S	0x81
 182:fatfs/ff.c    **** #define _DS3E	0xFE
 183:fatfs/ff.c    **** 
 184:fatfs/ff.c    **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 185:fatfs/ff.c    **** #define _DF1S	0x81
 186:fatfs/ff.c    **** #define _DF1E	0xFE
 187:fatfs/ff.c    **** #define _DS1S	0x40
 188:fatfs/ff.c    **** #define _DS1E	0x7E
 189:fatfs/ff.c    **** #define _DS2S	0xA1
 190:fatfs/ff.c    **** #define _DS2E	0xFE
 191:fatfs/ff.c    **** 
 192:fatfs/ff.c    **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
 193:fatfs/ff.c    **** #define _DF1S	0
 194:fatfs/ff.c    **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
 195:fatfs/ff.c    **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 196:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 197:fatfs/ff.c    **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 198:fatfs/ff.c    **** 
 199:fatfs/ff.c    **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
 200:fatfs/ff.c    **** #define _DF1S	0
 201:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
 202:fatfs/ff.c    **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 203:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 204:fatfs/ff.c    **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 205:fatfs/ff.c    **** 
 206:fatfs/ff.c    **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
 207:fatfs/ff.c    **** #define _DF1S	0
 208:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 209:fatfs/ff.c    **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 210:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 211:fatfs/ff.c    **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 212:fatfs/ff.c    **** 
 213:fatfs/ff.c    **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 214:fatfs/ff.c    **** #define _DF1S	0
 215:fatfs/ff.c    **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 216:fatfs/ff.c    **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 217:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 218:fatfs/ff.c    **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 219:fatfs/ff.c    **** 
 220:fatfs/ff.c    **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 221:fatfs/ff.c    **** #define _DF1S	0
 222:fatfs/ff.c    **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 223:fatfs/ff.c    **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 224:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 225:fatfs/ff.c    **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 226:fatfs/ff.c    **** 
 227:fatfs/ff.c    **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 228:fatfs/ff.c    **** #define _DF1S	0
 229:fatfs/ff.c    **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 230:fatfs/ff.c    **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 231:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 232:fatfs/ff.c    **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 233:fatfs/ff.c    **** 
 234:fatfs/ff.c    **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 235:fatfs/ff.c    **** #define _DF1S	0
 236:fatfs/ff.c    **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 237:fatfs/ff.c    **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 238:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 239:fatfs/ff.c    **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 240:fatfs/ff.c    **** 
 241:fatfs/ff.c    **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 242:fatfs/ff.c    **** #define _DF1S	0
 243:fatfs/ff.c    **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 244:fatfs/ff.c    **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 245:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 246:fatfs/ff.c    **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 247:fatfs/ff.c    **** 
 248:fatfs/ff.c    **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 249:fatfs/ff.c    **** #define _DF1S	0
 250:fatfs/ff.c    **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 251:fatfs/ff.c    **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 252:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 253:fatfs/ff.c    **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 254:fatfs/ff.c    **** 
 255:fatfs/ff.c    **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 256:fatfs/ff.c    **** #define _DF1S	0
 257:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 258:fatfs/ff.c    **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 259:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 260:fatfs/ff.c    **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 261:fatfs/ff.c    **** 
 262:fatfs/ff.c    **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 263:fatfs/ff.c    **** #define _DF1S	0
 264:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 265:fatfs/ff.c    **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 266:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 267:fatfs/ff.c    **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 268:fatfs/ff.c    **** 
 269:fatfs/ff.c    **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 270:fatfs/ff.c    **** #define _DF1S	0
 271:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 272:fatfs/ff.c    **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 273:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 274:fatfs/ff.c    **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 275:fatfs/ff.c    **** 
 276:fatfs/ff.c    **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 277:fatfs/ff.c    **** #define _DF1S	0
 278:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 279:fatfs/ff.c    **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 280:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 281:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 282:fatfs/ff.c    **** 
 283:fatfs/ff.c    **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 284:fatfs/ff.c    **** #define _DF1S	0
 285:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 286:fatfs/ff.c    **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 287:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 288:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 289:fatfs/ff.c    **** 
 290:fatfs/ff.c    **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 291:fatfs/ff.c    **** #define _DF1S	0
 292:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 293:fatfs/ff.c    **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 294:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 295:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 296:fatfs/ff.c    **** 
 297:fatfs/ff.c    **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 298:fatfs/ff.c    **** #define _DF1S	0
 299:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 300:fatfs/ff.c    **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 301:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 302:fatfs/ff.c    **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 303:fatfs/ff.c    **** 
 304:fatfs/ff.c    **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 305:fatfs/ff.c    **** #define _DF1S	0
 306:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 307:fatfs/ff.c    **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 308:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 309:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 310:fatfs/ff.c    **** 
 311:fatfs/ff.c    **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 312:fatfs/ff.c    **** #define _DF1S	0
 313:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 314:fatfs/ff.c    **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 315:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 316:fatfs/ff.c    **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 317:fatfs/ff.c    **** 
 318:fatfs/ff.c    **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 319:fatfs/ff.c    **** #define _DF1S	0
 320:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 321:fatfs/ff.c    **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 322:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 323:fatfs/ff.c    **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 324:fatfs/ff.c    **** 
 325:fatfs/ff.c    **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 326:fatfs/ff.c    **** #define _DF1S	0
 327:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 328:fatfs/ff.c    **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 329:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 330:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 331:fatfs/ff.c    **** 
 332:fatfs/ff.c    **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 333:fatfs/ff.c    **** #define _DF1S	0
 334:fatfs/ff.c    **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 335:fatfs/ff.c    **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 336:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 337:fatfs/ff.c    **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 338:fatfs/ff.c    **** 
 339:fatfs/ff.c    **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 340:fatfs/ff.c    **** #if _USE_LFN
 341:fatfs/ff.c    **** #error Cannot use LFN feature without valid code page.
 342:fatfs/ff.c    **** #endif
 343:fatfs/ff.c    **** #define _DF1S	0
 344:fatfs/ff.c    **** 
 345:fatfs/ff.c    **** #else
 346:fatfs/ff.c    **** #error Unknown code page
 347:fatfs/ff.c    **** 
 348:fatfs/ff.c    **** #endif
 349:fatfs/ff.c    **** 
 350:fatfs/ff.c    **** 
 351:fatfs/ff.c    **** /* Character code support macros */
 352:fatfs/ff.c    **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 353:fatfs/ff.c    **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 354:fatfs/ff.c    **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 355:fatfs/ff.c    **** 
 356:fatfs/ff.c    **** #if _DF1S		/* Code page is DBCS */
 357:fatfs/ff.c    **** 
 358:fatfs/ff.c    **** #ifdef _DF2S	/* Two 1st byte areas */
 359:fatfs/ff.c    **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 360:fatfs/ff.c    **** #else			/* One 1st byte area */
 361:fatfs/ff.c    **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 362:fatfs/ff.c    **** #endif
 363:fatfs/ff.c    **** 
 364:fatfs/ff.c    **** #ifdef _DS3S	/* Three 2nd byte areas */
 365:fatfs/ff.c    **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 366:fatfs/ff.c    **** #else			/* Two 2nd byte areas */
 367:fatfs/ff.c    **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 368:fatfs/ff.c    **** #endif
 369:fatfs/ff.c    **** 
 370:fatfs/ff.c    **** #else			/* Code page is SBCS */
 371:fatfs/ff.c    **** 
 372:fatfs/ff.c    **** #define IsDBCS1(c)	0
 373:fatfs/ff.c    **** #define IsDBCS2(c)	0
 374:fatfs/ff.c    **** 
 375:fatfs/ff.c    **** #endif /* _DF1S */
 376:fatfs/ff.c    **** 
 377:fatfs/ff.c    **** 
 378:fatfs/ff.c    **** /* Name status flags */
 379:fatfs/ff.c    **** #define NS			11		/* Index of name status byte in fn[] */
 380:fatfs/ff.c    **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 381:fatfs/ff.c    **** #define NS_LFN		0x02	/* Force to create LFN entry */
 382:fatfs/ff.c    **** #define NS_LAST		0x04	/* Last segment */
 383:fatfs/ff.c    **** #define NS_BODY		0x08	/* Lower case flag (body) */
 384:fatfs/ff.c    **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 385:fatfs/ff.c    **** #define NS_DOT		0x20	/* Dot entry */
 386:fatfs/ff.c    **** 
 387:fatfs/ff.c    **** 
 388:fatfs/ff.c    **** /* FAT sub-type boundaries */
 389:fatfs/ff.c    **** /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
 390:fatfs/ff.c    **** #define MIN_FAT16	4086	/* Minimum number of clusters for FAT16 */
 391:fatfs/ff.c    **** #define	MIN_FAT32	65526	/* Minimum number of clusters for FAT32 */
 392:fatfs/ff.c    **** 
 393:fatfs/ff.c    **** 
 394:fatfs/ff.c    **** /* FatFs refers the members in the FAT structures as byte array instead of
 395:fatfs/ff.c    **** / structure member because the structure is not binary compatible between
 396:fatfs/ff.c    **** / different platforms */
 397:fatfs/ff.c    **** 
 398:fatfs/ff.c    **** #define BS_jmpBoot			0	/* Jump instruction (3) */
 399:fatfs/ff.c    **** #define BS_OEMName			3	/* OEM name (8) */
 400:fatfs/ff.c    **** #define BPB_BytsPerSec		11	/* Sector size [byte] (2) */
 401:fatfs/ff.c    **** #define BPB_SecPerClus		13	/* Cluster size [sector] (1) */
 402:fatfs/ff.c    **** #define BPB_RsvdSecCnt		14	/* Size of reserved area [sector] (2) */
 403:fatfs/ff.c    **** #define BPB_NumFATs			16	/* Number of FAT copies (1) */
 404:fatfs/ff.c    **** #define BPB_RootEntCnt		17	/* Number of root dir entries for FAT12/16 (2) */
 405:fatfs/ff.c    **** #define BPB_TotSec16		19	/* Volume size [sector] (2) */
 406:fatfs/ff.c    **** #define BPB_Media			21	/* Media descriptor (1) */
 407:fatfs/ff.c    **** #define BPB_FATSz16			22	/* FAT size [sector] (2) */
 408:fatfs/ff.c    **** #define BPB_SecPerTrk		24	/* Track size [sector] (2) */
 409:fatfs/ff.c    **** #define BPB_NumHeads		26	/* Number of heads (2) */
 410:fatfs/ff.c    **** #define BPB_HiddSec			28	/* Number of special hidden sectors (4) */
 411:fatfs/ff.c    **** #define BPB_TotSec32		32	/* Volume size [sector] (4) */
 412:fatfs/ff.c    **** #define BS_DrvNum			36	/* Physical drive number (2) */
 413:fatfs/ff.c    **** #define BS_BootSig			38	/* Extended boot signature (1) */
 414:fatfs/ff.c    **** #define BS_VolID			39	/* Volume serial number (4) */
 415:fatfs/ff.c    **** #define BS_VolLab			43	/* Volume label (8) */
 416:fatfs/ff.c    **** #define BS_FilSysType		54	/* File system type (1) */
 417:fatfs/ff.c    **** #define BPB_FATSz32			36	/* FAT size [sector] (4) */
 418:fatfs/ff.c    **** #define BPB_ExtFlags		40	/* Extended flags (2) */
 419:fatfs/ff.c    **** #define BPB_FSVer			42	/* File system version (2) */
 420:fatfs/ff.c    **** #define BPB_RootClus		44	/* Root dir first cluster (4) */
 421:fatfs/ff.c    **** #define BPB_FSInfo			48	/* Offset of FSInfo sector (2) */
 422:fatfs/ff.c    **** #define BPB_BkBootSec		50	/* Offset of backup boot sector (2) */
 423:fatfs/ff.c    **** #define BS_DrvNum32			64	/* Physical drive number (2) */
 424:fatfs/ff.c    **** #define BS_BootSig32		66	/* Extended boot signature (1) */
 425:fatfs/ff.c    **** #define BS_VolID32			67	/* Volume serial number (4) */
 426:fatfs/ff.c    **** #define BS_VolLab32			71	/* Volume label (8) */
 427:fatfs/ff.c    **** #define BS_FilSysType32		82	/* File system type (1) */
 428:fatfs/ff.c    **** #define	FSI_LeadSig			0	/* FSI: Leading signature (4) */
 429:fatfs/ff.c    **** #define	FSI_StrucSig		484	/* FSI: Structure signature (4) */
 430:fatfs/ff.c    **** #define	FSI_Free_Count		488	/* FSI: Number of free clusters (4) */
 431:fatfs/ff.c    **** #define	FSI_Nxt_Free		492	/* FSI: Last allocated cluster (4) */
 432:fatfs/ff.c    **** #define MBR_Table			446	/* MBR: Partition table offset (2) */
 433:fatfs/ff.c    **** #define	SZ_PTE				16	/* MBR: Size of a partition table entry */
 434:fatfs/ff.c    **** #define BS_55AA				510	/* Boot sector signature (2) */
 435:fatfs/ff.c    **** 
 436:fatfs/ff.c    **** #define	DIR_Name			0	/* Short file name (11) */
 437:fatfs/ff.c    **** #define	DIR_Attr			11	/* Attribute (1) */
 438:fatfs/ff.c    **** #define	DIR_NTres			12	/* NT flag (1) */
 439:fatfs/ff.c    **** #define DIR_CrtTimeTenth	13	/* Created time sub-second (1) */
 440:fatfs/ff.c    **** #define	DIR_CrtTime			14	/* Created time (2) */
 441:fatfs/ff.c    **** #define	DIR_CrtDate			16	/* Created date (2) */
 442:fatfs/ff.c    **** #define DIR_LstAccDate		18	/* Last accessed date (2) */
 443:fatfs/ff.c    **** #define	DIR_FstClusHI		20	/* Higher 16-bit of first cluster (2) */
 444:fatfs/ff.c    **** #define	DIR_WrtTime			22	/* Modified time (2) */
 445:fatfs/ff.c    **** #define	DIR_WrtDate			24	/* Modified date (2) */
 446:fatfs/ff.c    **** #define	DIR_FstClusLO		26	/* Lower 16-bit of first cluster (2) */
 447:fatfs/ff.c    **** #define	DIR_FileSize		28	/* File size (4) */
 448:fatfs/ff.c    **** #define	LDIR_Ord			0	/* LFN entry order and LLE flag (1) */
 449:fatfs/ff.c    **** #define	LDIR_Attr			11	/* LFN attribute (1) */
 450:fatfs/ff.c    **** #define	LDIR_Type			12	/* LFN type (1) */
 451:fatfs/ff.c    **** #define	LDIR_Chksum			13	/* Sum of corresponding SFN entry */
 452:fatfs/ff.c    **** #define	LDIR_FstClusLO		26	/* Filled by zero (0) */
 453:fatfs/ff.c    **** #define	SZ_DIR				32		/* Size of a directory entry */
 454:fatfs/ff.c    **** #define	LLE					0x40	/* Last long entry flag in LDIR_Ord */
 455:fatfs/ff.c    **** #define	DDE					0xE5	/* Deleted directory entry mark in DIR_Name[0] */
 456:fatfs/ff.c    **** #define	NDDE				0x05	/* Replacement of the character collides with DDE */
 457:fatfs/ff.c    **** 
 458:fatfs/ff.c    **** 
 459:fatfs/ff.c    **** /*------------------------------------------------------------*/
 460:fatfs/ff.c    **** /* Module private work area                                   */
 461:fatfs/ff.c    **** /*------------------------------------------------------------*/
 462:fatfs/ff.c    **** /* Note that uninitialized variables with static duration are
 463:fatfs/ff.c    **** /  zeroed/nulled at start-up. If not, the compiler or start-up
 464:fatfs/ff.c    **** /  routine is out of ANSI-C standard.
 465:fatfs/ff.c    **** */
 466:fatfs/ff.c    **** 
 467:fatfs/ff.c    **** #if _VOLUMES
 468:fatfs/ff.c    **** static
 469:fatfs/ff.c    **** FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 470:fatfs/ff.c    **** #else
 471:fatfs/ff.c    **** #error Number of volumes must not be 0.
 472:fatfs/ff.c    **** #endif
 473:fatfs/ff.c    **** 
 474:fatfs/ff.c    **** static
 475:fatfs/ff.c    **** WORD Fsid;				/* File system mount ID */
 476:fatfs/ff.c    **** 
 477:fatfs/ff.c    **** #if _FS_RPATH
 478:fatfs/ff.c    **** static
 479:fatfs/ff.c    **** BYTE CurrVol;			/* Current drive */
 480:fatfs/ff.c    **** #endif
 481:fatfs/ff.c    **** 
 482:fatfs/ff.c    **** #if _FS_LOCK
 483:fatfs/ff.c    **** static
 484:fatfs/ff.c    **** FILESEM	Files[_FS_LOCK];	/* File lock semaphores */
 485:fatfs/ff.c    **** #endif
 486:fatfs/ff.c    **** 
 487:fatfs/ff.c    **** #if _USE_LFN == 0			/* No LFN feature */
 488:fatfs/ff.c    **** #define	DEF_NAMEBUF			BYTE sfn[12]
 489:fatfs/ff.c    **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 490:fatfs/ff.c    **** #define	FREE_BUF()
 491:fatfs/ff.c    **** 
 492:fatfs/ff.c    **** #elif _USE_LFN == 1			/* LFN feature with static working buffer */
 493:fatfs/ff.c    **** static WCHAR LfnBuf[_MAX_LFN+1];
 494:fatfs/ff.c    **** #define	DEF_NAMEBUF			BYTE sfn[12]
 495:fatfs/ff.c    **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 496:fatfs/ff.c    **** #define	FREE_BUF()
 497:fatfs/ff.c    **** 
 498:fatfs/ff.c    **** #elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
 499:fatfs/ff.c    **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
 500:fatfs/ff.c    **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 501:fatfs/ff.c    **** #define	FREE_BUF()
 502:fatfs/ff.c    **** 
 503:fatfs/ff.c    **** #elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
 504:fatfs/ff.c    **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
 505:fatfs/ff.c    **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
 506:fatfs/ff.c    **** 							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
 507:fatfs/ff.c    **** 							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
 508:fatfs/ff.c    **** #define	FREE_BUF()			ff_memfree(lfn)
 509:fatfs/ff.c    **** 
 510:fatfs/ff.c    **** #else
 511:fatfs/ff.c    **** #error Wrong LFN configuration.
 512:fatfs/ff.c    **** #endif
 513:fatfs/ff.c    **** 
 514:fatfs/ff.c    **** 
 515:fatfs/ff.c    **** 
 516:fatfs/ff.c    **** 
 517:fatfs/ff.c    **** /*--------------------------------------------------------------------------
 518:fatfs/ff.c    **** 
 519:fatfs/ff.c    ****    Module Private Functions
 520:fatfs/ff.c    **** 
 521:fatfs/ff.c    **** ---------------------------------------------------------------------------*/
 522:fatfs/ff.c    **** 
 523:fatfs/ff.c    **** 
 524:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 525:fatfs/ff.c    **** /* String functions                                                      */
 526:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 527:fatfs/ff.c    **** 
 528:fatfs/ff.c    **** /* Copy memory to memory */
 529:fatfs/ff.c    **** static
 530:fatfs/ff.c    **** void mem_cpy (void* dst, const void* src, UINT cnt) {
  25              	 .loc 1 530 0
  26              	 .cfi_startproc
  27              	 
  28              	 
  29              	 
  30              	.LVL0:
  31 0000 0138     	 subs r0,r0,#1
  32              	.LVL1:
  33 0002 0A44     	 add r2,r2,r1
  34              	.LVL2:
  35              	.L2:
 531:fatfs/ff.c    **** 	BYTE *d = (BYTE*)dst;
 532:fatfs/ff.c    **** 	const BYTE *s = (const BYTE*)src;
 533:fatfs/ff.c    **** 
 534:fatfs/ff.c    **** #if _WORD_ACCESS == 1
 535:fatfs/ff.c    **** 	while (cnt >= sizeof (int)) {
 536:fatfs/ff.c    **** 		*(int*)d = *(int*)s;
 537:fatfs/ff.c    **** 		d += sizeof (int); s += sizeof (int);
 538:fatfs/ff.c    **** 		cnt -= sizeof (int);
 539:fatfs/ff.c    **** 	}
 540:fatfs/ff.c    **** #endif
 541:fatfs/ff.c    **** 	while (cnt--)
  36              	 .loc 1 541 0
  37 0004 9142     	 cmp r1,r2
  38 0006 00D1     	 bne .L3
 542:fatfs/ff.c    **** 		*d++ = *s++;
 543:fatfs/ff.c    **** }
  39              	 .loc 1 543 0
  40 0008 7047     	 bx lr
  41              	.L3:
  42              	.LVL3:
 542:fatfs/ff.c    **** 		*d++ = *s++;
  43              	 .loc 1 542 0
  44 000a 11F8013B 	 ldrb r3,[r1],#1
  45              	.LVL4:
  46 000e 00F8013F 	 strb r3,[r0,#1]!
  47 0012 F7E7     	 b .L2
  48              	 .cfi_endproc
  49              	.LFE0:
  51              	 .section .text.get_fileinfo,"ax",%progbits
  52              	 .align 1
  53              	 .syntax unified
  54              	 .thumb
  55              	 .thumb_func
  56              	 .fpu softvfp
  58              	get_fileinfo:
  59              	.LFB20:
 544:fatfs/ff.c    **** 
 545:fatfs/ff.c    **** /* Fill memory */
 546:fatfs/ff.c    **** static
 547:fatfs/ff.c    **** void mem_set (void* dst, int val, UINT cnt) {
 548:fatfs/ff.c    **** 	BYTE *d = (BYTE*)dst;
 549:fatfs/ff.c    **** 
 550:fatfs/ff.c    **** 	while (cnt--)
 551:fatfs/ff.c    **** 		*d++ = (BYTE)val;
 552:fatfs/ff.c    **** }
 553:fatfs/ff.c    **** 
 554:fatfs/ff.c    **** /* Compare memory to memory */
 555:fatfs/ff.c    **** static
 556:fatfs/ff.c    **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 557:fatfs/ff.c    **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 558:fatfs/ff.c    **** 	int r = 0;
 559:fatfs/ff.c    **** 
 560:fatfs/ff.c    **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 561:fatfs/ff.c    **** 	return r;
 562:fatfs/ff.c    **** }
 563:fatfs/ff.c    **** 
 564:fatfs/ff.c    **** /* Check if chr is contained in the string */
 565:fatfs/ff.c    **** static
 566:fatfs/ff.c    **** int chk_chr (const char* str, int chr) {
 567:fatfs/ff.c    **** 	while (*str && *str != chr) str++;
 568:fatfs/ff.c    **** 	return *str;
 569:fatfs/ff.c    **** }
 570:fatfs/ff.c    **** 
 571:fatfs/ff.c    **** 
 572:fatfs/ff.c    **** 
 573:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 574:fatfs/ff.c    **** /* Request/Release grant to access the volume                            */
 575:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 576:fatfs/ff.c    **** #if _FS_REENTRANT
 577:fatfs/ff.c    **** 
 578:fatfs/ff.c    **** static
 579:fatfs/ff.c    **** int lock_fs (
 580:fatfs/ff.c    **** 	FATFS *fs		/* File system object */
 581:fatfs/ff.c    **** )
 582:fatfs/ff.c    **** {
 583:fatfs/ff.c    **** 	return ff_req_grant(fs->sobj);
 584:fatfs/ff.c    **** }
 585:fatfs/ff.c    **** 
 586:fatfs/ff.c    **** 
 587:fatfs/ff.c    **** static
 588:fatfs/ff.c    **** void unlock_fs (
 589:fatfs/ff.c    **** 	FATFS *fs,		/* File system object */
 590:fatfs/ff.c    **** 	FRESULT res		/* Result code to be returned */
 591:fatfs/ff.c    **** )
 592:fatfs/ff.c    **** {
 593:fatfs/ff.c    **** 	if (fs &&
 594:fatfs/ff.c    **** 		res != FR_NOT_ENABLED &&
 595:fatfs/ff.c    **** 		res != FR_INVALID_DRIVE &&
 596:fatfs/ff.c    **** 		res != FR_INVALID_OBJECT &&
 597:fatfs/ff.c    **** 		res != FR_TIMEOUT) {
 598:fatfs/ff.c    **** 		ff_rel_grant(fs->sobj);
 599:fatfs/ff.c    **** 	}
 600:fatfs/ff.c    **** }
 601:fatfs/ff.c    **** #endif
 602:fatfs/ff.c    **** 
 603:fatfs/ff.c    **** 
 604:fatfs/ff.c    **** 
 605:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 606:fatfs/ff.c    **** /* File lock control functions                                           */
 607:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 608:fatfs/ff.c    **** #if _FS_LOCK
 609:fatfs/ff.c    **** 
 610:fatfs/ff.c    **** static
 611:fatfs/ff.c    **** FRESULT chk_lock (	/* Check if the file can be accessed */
 612:fatfs/ff.c    **** 	DIR* dj,		/* Directory object pointing the file to be checked */
 613:fatfs/ff.c    **** 	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 614:fatfs/ff.c    **** )
 615:fatfs/ff.c    **** {
 616:fatfs/ff.c    **** 	UINT i, be;
 617:fatfs/ff.c    **** 
 618:fatfs/ff.c    **** 	/* Search file semaphore table */
 619:fatfs/ff.c    **** 	for (i = be = 0; i < _FS_LOCK; i++) {
 620:fatfs/ff.c    **** 		if (Files[i].fs) {	/* Existing entry */
 621:fatfs/ff.c    **** 			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
 622:fatfs/ff.c    **** 				Files[i].clu == dj->sclust &&
 623:fatfs/ff.c    **** 				Files[i].idx == dj->index) break;
 624:fatfs/ff.c    **** 		} else {			/* Blank entry */
 625:fatfs/ff.c    **** 			be++;
 626:fatfs/ff.c    **** 		}
 627:fatfs/ff.c    **** 	}
 628:fatfs/ff.c    **** 	if (i == _FS_LOCK)	/* The file is not opened */
 629:fatfs/ff.c    **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file?
 630:fatfs/ff.c    **** 
 631:fatfs/ff.c    **** 	/* The file has been opened. Reject any open against writing file and all write mode open */
 632:fatfs/ff.c    **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 633:fatfs/ff.c    **** }
 634:fatfs/ff.c    **** 
 635:fatfs/ff.c    **** 
 636:fatfs/ff.c    **** static
 637:fatfs/ff.c    **** int enq_lock (void)	/* Check if an entry is available for a new file */
 638:fatfs/ff.c    **** {
 639:fatfs/ff.c    **** 	UINT i;
 640:fatfs/ff.c    **** 
 641:fatfs/ff.c    **** 	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 642:fatfs/ff.c    **** 	return (i == _FS_LOCK) ? 0 : 1;
 643:fatfs/ff.c    **** }
 644:fatfs/ff.c    **** 
 645:fatfs/ff.c    **** 
 646:fatfs/ff.c    **** static
 647:fatfs/ff.c    **** UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
 648:fatfs/ff.c    **** 	DIR* dj,	/* Directory object pointing the file to register or increment */
 649:fatfs/ff.c    **** 	int acc		/* Desired access mode (0:Read, !0:Write) */
 650:fatfs/ff.c    **** )
 651:fatfs/ff.c    **** {
 652:fatfs/ff.c    **** 	UINT i;
 653:fatfs/ff.c    **** 
 654:fatfs/ff.c    **** 
 655:fatfs/ff.c    **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the file */
 656:fatfs/ff.c    **** 		if (Files[i].fs == dj->fs &&
 657:fatfs/ff.c    **** 			Files[i].clu == dj->sclust &&
 658:fatfs/ff.c    **** 			Files[i].idx == dj->index) break;
 659:fatfs/ff.c    **** 	}
 660:fatfs/ff.c    **** 
 661:fatfs/ff.c    **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 662:fatfs/ff.c    **** 		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 663:fatfs/ff.c    **** 		if (i == _FS_LOCK) return 0;	/* No space to register (int err) */
 664:fatfs/ff.c    **** 		Files[i].fs = dj->fs;
 665:fatfs/ff.c    **** 		Files[i].clu = dj->sclust;
 666:fatfs/ff.c    **** 		Files[i].idx = dj->index;
 667:fatfs/ff.c    **** 		Files[i].ctr = 0;
 668:fatfs/ff.c    **** 	}
 669:fatfs/ff.c    **** 
 670:fatfs/ff.c    **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 671:fatfs/ff.c    **** 
 672:fatfs/ff.c    **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 673:fatfs/ff.c    **** 
 674:fatfs/ff.c    **** 	return i + 1;
 675:fatfs/ff.c    **** }
 676:fatfs/ff.c    **** 
 677:fatfs/ff.c    **** 
 678:fatfs/ff.c    **** static
 679:fatfs/ff.c    **** FRESULT dec_lock (	/* Decrement file open counter */
 680:fatfs/ff.c    **** 	UINT i			/* Semaphore index */
 681:fatfs/ff.c    **** )
 682:fatfs/ff.c    **** {
 683:fatfs/ff.c    **** 	WORD n;
 684:fatfs/ff.c    **** 	FRESULT res;
 685:fatfs/ff.c    **** 
 686:fatfs/ff.c    **** 
 687:fatfs/ff.c    **** 	if (--i < _FS_LOCK) {
 688:fatfs/ff.c    **** 		n = Files[i].ctr;
 689:fatfs/ff.c    **** 		if (n == 0x100) n = 0;
 690:fatfs/ff.c    **** 		if (n) n--;
 691:fatfs/ff.c    **** 		Files[i].ctr = n;
 692:fatfs/ff.c    **** 		if (!n) Files[i].fs = 0;
 693:fatfs/ff.c    **** 		res = FR_OK;
 694:fatfs/ff.c    **** 	} else {
 695:fatfs/ff.c    **** 		res = FR_INT_ERR;
 696:fatfs/ff.c    **** 	}
 697:fatfs/ff.c    **** 	return res;
 698:fatfs/ff.c    **** }
 699:fatfs/ff.c    **** 
 700:fatfs/ff.c    **** 
 701:fatfs/ff.c    **** static
 702:fatfs/ff.c    **** void clear_lock (	/* Clear lock entries of the volume */
 703:fatfs/ff.c    **** 	FATFS *fs
 704:fatfs/ff.c    **** )
 705:fatfs/ff.c    **** {
 706:fatfs/ff.c    **** 	UINT i;
 707:fatfs/ff.c    **** 
 708:fatfs/ff.c    **** 	for (i = 0; i < _FS_LOCK; i++) {
 709:fatfs/ff.c    **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 710:fatfs/ff.c    **** 	}
 711:fatfs/ff.c    **** }
 712:fatfs/ff.c    **** #endif
 713:fatfs/ff.c    **** 
 714:fatfs/ff.c    **** 
 715:fatfs/ff.c    **** 
 716:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 717:fatfs/ff.c    **** /* Change window offset                                                  */
 718:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 719:fatfs/ff.c    **** 
 720:fatfs/ff.c    **** static
 721:fatfs/ff.c    **** FRESULT move_window (
 722:fatfs/ff.c    **** 	FATFS *fs,		/* File system object */
 723:fatfs/ff.c    **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 724:fatfs/ff.c    **** )					/* Move to zero only writes back dirty window */
 725:fatfs/ff.c    **** {
 726:fatfs/ff.c    **** 	DWORD wsect;
 727:fatfs/ff.c    **** 
 728:fatfs/ff.c    **** 
 729:fatfs/ff.c    **** 	wsect = fs->winsect;
 730:fatfs/ff.c    **** 	if (wsect != sector) {	/* Changed current window */
 731:fatfs/ff.c    **** #if !_FS_READONLY
 732:fatfs/ff.c    **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 733:fatfs/ff.c    **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 734:fatfs/ff.c    **** 				return FR_DISK_ERR;
 735:fatfs/ff.c    **** 			fs->wflag = 0;
 736:fatfs/ff.c    **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 737:fatfs/ff.c    **** 				BYTE nf;
 738:fatfs/ff.c    **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 739:fatfs/ff.c    **** 					wsect += fs->fsize;
 740:fatfs/ff.c    **** 					disk_write(fs->drv, fs->win, wsect, 1);
 741:fatfs/ff.c    **** 				}
 742:fatfs/ff.c    **** 			}
 743:fatfs/ff.c    **** 		}
 744:fatfs/ff.c    **** #endif
 745:fatfs/ff.c    **** 		if (sector) {
 746:fatfs/ff.c    **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 747:fatfs/ff.c    **** 				return FR_DISK_ERR;
 748:fatfs/ff.c    **** 			fs->winsect = sector;
 749:fatfs/ff.c    **** 		}
 750:fatfs/ff.c    **** 	}
 751:fatfs/ff.c    **** 
 752:fatfs/ff.c    **** 	return FR_OK;
 753:fatfs/ff.c    **** }
 754:fatfs/ff.c    **** 
 755:fatfs/ff.c    **** 
 756:fatfs/ff.c    **** 
 757:fatfs/ff.c    **** 
 758:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 759:fatfs/ff.c    **** /* Clean-up cached data                                                  */
 760:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 761:fatfs/ff.c    **** #if !_FS_READONLY
 762:fatfs/ff.c    **** static
 763:fatfs/ff.c    **** FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 764:fatfs/ff.c    **** 	FATFS *fs	/* File system object */
 765:fatfs/ff.c    **** )
 766:fatfs/ff.c    **** {
 767:fatfs/ff.c    **** 	FRESULT res;
 768:fatfs/ff.c    **** 
 769:fatfs/ff.c    **** 
 770:fatfs/ff.c    **** 	res = move_window(fs, 0);
 771:fatfs/ff.c    **** 	if (res == FR_OK) {
 772:fatfs/ff.c    **** 		/* Update FSInfo sector if needed */
 773:fatfs/ff.c    **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 774:fatfs/ff.c    **** 			fs->winsect = 0;
 775:fatfs/ff.c    **** 			/* Create FSInfo structure */
 776:fatfs/ff.c    **** 			mem_set(fs->win, 0, 512);
 777:fatfs/ff.c    **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 778:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 779:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 780:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 781:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 782:fatfs/ff.c    **** 			/* Write it into the FSInfo sector */
 783:fatfs/ff.c    **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 784:fatfs/ff.c    **** 			fs->fsi_flag = 0;
 785:fatfs/ff.c    **** 		}
 786:fatfs/ff.c    **** 		/* Make sure that no pending write process in the physical drive */
 787:fatfs/ff.c    **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 788:fatfs/ff.c    **** 			res = FR_DISK_ERR;
 789:fatfs/ff.c    **** 	}
 790:fatfs/ff.c    **** 
 791:fatfs/ff.c    **** 	return res;
 792:fatfs/ff.c    **** }
 793:fatfs/ff.c    **** #endif
 794:fatfs/ff.c    **** 
 795:fatfs/ff.c    **** 
 796:fatfs/ff.c    **** 
 797:fatfs/ff.c    **** 
 798:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 799:fatfs/ff.c    **** /* Get sector# from cluster#                                             */
 800:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 801:fatfs/ff.c    **** 
 802:fatfs/ff.c    **** 
 803:fatfs/ff.c    **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 804:fatfs/ff.c    **** 	FATFS *fs,		/* File system object */
 805:fatfs/ff.c    **** 	DWORD clst		/* Cluster# to be converted */
 806:fatfs/ff.c    **** )
 807:fatfs/ff.c    **** {
 808:fatfs/ff.c    **** 	clst -= 2;
 809:fatfs/ff.c    **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 810:fatfs/ff.c    **** 	return clst * fs->csize + fs->database;
 811:fatfs/ff.c    **** }
 812:fatfs/ff.c    **** 
 813:fatfs/ff.c    **** 
 814:fatfs/ff.c    **** 
 815:fatfs/ff.c    **** 
 816:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 817:fatfs/ff.c    **** /* FAT access - Read value of a FAT entry                                */
 818:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 819:fatfs/ff.c    **** 
 820:fatfs/ff.c    **** 
 821:fatfs/ff.c    **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 822:fatfs/ff.c    **** 	FATFS *fs,	/* File system object */
 823:fatfs/ff.c    **** 	DWORD clst	/* Cluster# to get the link information */
 824:fatfs/ff.c    **** )
 825:fatfs/ff.c    **** {
 826:fatfs/ff.c    **** 	UINT wc, bc;
 827:fatfs/ff.c    **** 	BYTE *p;
 828:fatfs/ff.c    **** 
 829:fatfs/ff.c    **** 
 830:fatfs/ff.c    **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 831:fatfs/ff.c    **** 		return 1;
 832:fatfs/ff.c    **** 
 833:fatfs/ff.c    **** 	switch (fs->fs_type) {
 834:fatfs/ff.c    **** 	case FS_FAT12 :
 835:fatfs/ff.c    **** 		bc = (UINT)clst; bc += bc / 2;
 836:fatfs/ff.c    **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 837:fatfs/ff.c    **** 		wc = fs->win[bc % SS(fs)]; bc++;
 838:fatfs/ff.c    **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 839:fatfs/ff.c    **** 		wc |= fs->win[bc % SS(fs)] << 8;
 840:fatfs/ff.c    **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 841:fatfs/ff.c    **** 
 842:fatfs/ff.c    **** 	case FS_FAT16 :
 843:fatfs/ff.c    **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 844:fatfs/ff.c    **** 		p = &fs->win[clst * 2 % SS(fs)];
 845:fatfs/ff.c    **** 		return LD_WORD(p);
 846:fatfs/ff.c    **** 
 847:fatfs/ff.c    **** 	case FS_FAT32 :
 848:fatfs/ff.c    **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 849:fatfs/ff.c    **** 		p = &fs->win[clst * 4 % SS(fs)];
 850:fatfs/ff.c    **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 851:fatfs/ff.c    **** 	}
 852:fatfs/ff.c    **** 
 853:fatfs/ff.c    **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 854:fatfs/ff.c    **** }
 855:fatfs/ff.c    **** 
 856:fatfs/ff.c    **** 
 857:fatfs/ff.c    **** 
 858:fatfs/ff.c    **** 
 859:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 860:fatfs/ff.c    **** /* FAT access - Change value of a FAT entry                              */
 861:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 862:fatfs/ff.c    **** #if !_FS_READONLY
 863:fatfs/ff.c    **** 
 864:fatfs/ff.c    **** FRESULT put_fat (
 865:fatfs/ff.c    **** 	FATFS *fs,	/* File system object */
 866:fatfs/ff.c    **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
 867:fatfs/ff.c    **** 	DWORD val	/* New value to mark the cluster */
 868:fatfs/ff.c    **** )
 869:fatfs/ff.c    **** {
 870:fatfs/ff.c    **** 	UINT bc;
 871:fatfs/ff.c    **** 	BYTE *p;
 872:fatfs/ff.c    **** 	FRESULT res;
 873:fatfs/ff.c    **** 
 874:fatfs/ff.c    **** 
 875:fatfs/ff.c    **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 876:fatfs/ff.c    **** 		res = FR_INT_ERR;
 877:fatfs/ff.c    **** 
 878:fatfs/ff.c    **** 	} else {
 879:fatfs/ff.c    **** 		switch (fs->fs_type) {
 880:fatfs/ff.c    **** 		case FS_FAT12 :
 881:fatfs/ff.c    **** 			bc = (UINT)clst; bc += bc / 2;
 882:fatfs/ff.c    **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 883:fatfs/ff.c    **** 			if (res != FR_OK) break;
 884:fatfs/ff.c    **** 			p = &fs->win[bc % SS(fs)];
 885:fatfs/ff.c    **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 886:fatfs/ff.c    **** 			bc++;
 887:fatfs/ff.c    **** 			fs->wflag = 1;
 888:fatfs/ff.c    **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 889:fatfs/ff.c    **** 			if (res != FR_OK) break;
 890:fatfs/ff.c    **** 			p = &fs->win[bc % SS(fs)];
 891:fatfs/ff.c    **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 892:fatfs/ff.c    **** 			break;
 893:fatfs/ff.c    **** 
 894:fatfs/ff.c    **** 		case FS_FAT16 :
 895:fatfs/ff.c    **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 896:fatfs/ff.c    **** 			if (res != FR_OK) break;
 897:fatfs/ff.c    **** 			p = &fs->win[clst * 2 % SS(fs)];
 898:fatfs/ff.c    **** 			ST_WORD(p, (WORD)val);
 899:fatfs/ff.c    **** 			break;
 900:fatfs/ff.c    **** 
 901:fatfs/ff.c    **** 		case FS_FAT32 :
 902:fatfs/ff.c    **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 903:fatfs/ff.c    **** 			if (res != FR_OK) break;
 904:fatfs/ff.c    **** 			p = &fs->win[clst * 4 % SS(fs)];
 905:fatfs/ff.c    **** 			val |= LD_DWORD(p) & 0xF0000000;
 906:fatfs/ff.c    **** 			ST_DWORD(p, val);
 907:fatfs/ff.c    **** 			break;
 908:fatfs/ff.c    **** 
 909:fatfs/ff.c    **** 		default :
 910:fatfs/ff.c    **** 			res = FR_INT_ERR;
 911:fatfs/ff.c    **** 		}
 912:fatfs/ff.c    **** 		fs->wflag = 1;
 913:fatfs/ff.c    **** 	}
 914:fatfs/ff.c    **** 
 915:fatfs/ff.c    **** 	return res;
 916:fatfs/ff.c    **** }
 917:fatfs/ff.c    **** #endif /* !_FS_READONLY */
 918:fatfs/ff.c    **** 
 919:fatfs/ff.c    **** 
 920:fatfs/ff.c    **** 
 921:fatfs/ff.c    **** 
 922:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 923:fatfs/ff.c    **** /* FAT handling - Remove a cluster chain                                 */
 924:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 925:fatfs/ff.c    **** #if !_FS_READONLY
 926:fatfs/ff.c    **** static
 927:fatfs/ff.c    **** FRESULT remove_chain (
 928:fatfs/ff.c    **** 	FATFS *fs,			/* File system object */
 929:fatfs/ff.c    **** 	DWORD clst			/* Cluster# to remove a chain from */
 930:fatfs/ff.c    **** )
 931:fatfs/ff.c    **** {
 932:fatfs/ff.c    **** 	FRESULT res;
 933:fatfs/ff.c    **** 	DWORD nxt;
 934:fatfs/ff.c    **** #if _USE_ERASE
 935:fatfs/ff.c    **** 	DWORD scl = clst, ecl = clst, rt[2];
 936:fatfs/ff.c    **** #endif
 937:fatfs/ff.c    **** 
 938:fatfs/ff.c    **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 939:fatfs/ff.c    **** 		res = FR_INT_ERR;
 940:fatfs/ff.c    **** 
 941:fatfs/ff.c    **** 	} else {
 942:fatfs/ff.c    **** 		res = FR_OK;
 943:fatfs/ff.c    **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 944:fatfs/ff.c    **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 945:fatfs/ff.c    **** 			if (nxt == 0) break;				/* Empty cluster? */
 946:fatfs/ff.c    **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 947:fatfs/ff.c    **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 948:fatfs/ff.c    **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 949:fatfs/ff.c    **** 			if (res != FR_OK) break;
 950:fatfs/ff.c    **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 951:fatfs/ff.c    **** 				fs->free_clust++;
 952:fatfs/ff.c    **** 				fs->fsi_flag = 1;
 953:fatfs/ff.c    **** 			}
 954:fatfs/ff.c    **** #if _USE_ERASE
 955:fatfs/ff.c    **** 			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 956:fatfs/ff.c    **** 				ecl = nxt;
 957:fatfs/ff.c    **** 			} else {				/* End of contiguous clusters */
 958:fatfs/ff.c    **** 				rt[0] = clust2sect(fs, scl);					/* Start sector */
 959:fatfs/ff.c    **** 				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
 960:fatfs/ff.c    **** 				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
 961:fatfs/ff.c    **** 				scl = ecl = nxt;
 962:fatfs/ff.c    **** 			}
 963:fatfs/ff.c    **** #endif
 964:fatfs/ff.c    **** 			clst = nxt;	/* Next cluster */
 965:fatfs/ff.c    **** 		}
 966:fatfs/ff.c    **** 	}
 967:fatfs/ff.c    **** 
 968:fatfs/ff.c    **** 	return res;
 969:fatfs/ff.c    **** }
 970:fatfs/ff.c    **** #endif
 971:fatfs/ff.c    **** 
 972:fatfs/ff.c    **** 
 973:fatfs/ff.c    **** 
 974:fatfs/ff.c    **** 
 975:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 976:fatfs/ff.c    **** /* FAT handling - Stretch or Create a cluster chain                      */
 977:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
 978:fatfs/ff.c    **** #if !_FS_READONLY
 979:fatfs/ff.c    **** static
 980:fatfs/ff.c    **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
 981:fatfs/ff.c    **** 	FATFS *fs,			/* File system object */
 982:fatfs/ff.c    **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
 983:fatfs/ff.c    **** )
 984:fatfs/ff.c    **** {
 985:fatfs/ff.c    **** 	DWORD cs, ncl, scl;
 986:fatfs/ff.c    **** 	FRESULT res;
 987:fatfs/ff.c    **** 
 988:fatfs/ff.c    **** 
 989:fatfs/ff.c    **** 	if (clst == 0) {		/* Create a new chain */
 990:fatfs/ff.c    **** 		scl = fs->last_clust;			/* Get suggested start point */
 991:fatfs/ff.c    **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 992:fatfs/ff.c    **** 	}
 993:fatfs/ff.c    **** 	else {					/* Stretch the current chain */
 994:fatfs/ff.c    **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 995:fatfs/ff.c    **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 996:fatfs/ff.c    **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 997:fatfs/ff.c    **** 		scl = clst;
 998:fatfs/ff.c    **** 	}
 999:fatfs/ff.c    **** 
1000:fatfs/ff.c    **** 	ncl = scl;				/* Start cluster */
1001:fatfs/ff.c    **** 	for (;;) {
1002:fatfs/ff.c    **** 		ncl++;							/* Next cluster */
1003:fatfs/ff.c    **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
1004:fatfs/ff.c    **** 			ncl = 2;
1005:fatfs/ff.c    **** 			if (ncl > scl) return 0;	/* No free cluster */
1006:fatfs/ff.c    **** 		}
1007:fatfs/ff.c    **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
1008:fatfs/ff.c    **** 		if (cs == 0) break;				/* Found a free cluster */
1009:fatfs/ff.c    **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
1010:fatfs/ff.c    **** 			return cs;
1011:fatfs/ff.c    **** 		if (ncl == scl) return 0;		/* No free cluster */
1012:fatfs/ff.c    **** 	}
1013:fatfs/ff.c    **** 
1014:fatfs/ff.c    **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
1015:fatfs/ff.c    **** 	if (res == FR_OK && clst != 0) {
1016:fatfs/ff.c    **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
1017:fatfs/ff.c    **** 	}
1018:fatfs/ff.c    **** 	if (res == FR_OK) {
1019:fatfs/ff.c    **** 		fs->last_clust = ncl;			/* Update FSINFO */
1020:fatfs/ff.c    **** 		if (fs->free_clust != 0xFFFFFFFF) {
1021:fatfs/ff.c    **** 			fs->free_clust--;
1022:fatfs/ff.c    **** 			fs->fsi_flag = 1;
1023:fatfs/ff.c    **** 		}
1024:fatfs/ff.c    **** 	} else {
1025:fatfs/ff.c    **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1026:fatfs/ff.c    **** 	}
1027:fatfs/ff.c    **** 
1028:fatfs/ff.c    **** 	return ncl;		/* Return new cluster number or error code */
1029:fatfs/ff.c    **** }
1030:fatfs/ff.c    **** #endif /* !_FS_READONLY */
1031:fatfs/ff.c    **** 
1032:fatfs/ff.c    **** 
1033:fatfs/ff.c    **** 
1034:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1035:fatfs/ff.c    **** /* FAT handling - Convert offset into cluster with link map table        */
1036:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1037:fatfs/ff.c    **** 
1038:fatfs/ff.c    **** #if _USE_FASTSEEK
1039:fatfs/ff.c    **** static
1040:fatfs/ff.c    **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1041:fatfs/ff.c    **** 	FIL* fp,		/* Pointer to the file object */
1042:fatfs/ff.c    **** 	DWORD ofs		/* File offset to be converted to cluster# */
1043:fatfs/ff.c    **** )
1044:fatfs/ff.c    **** {
1045:fatfs/ff.c    **** 	DWORD cl, ncl, *tbl;
1046:fatfs/ff.c    **** 
1047:fatfs/ff.c    **** 
1048:fatfs/ff.c    **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1049:fatfs/ff.c    **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
1050:fatfs/ff.c    **** 	for (;;) {
1051:fatfs/ff.c    **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1052:fatfs/ff.c    **** 		if (!ncl) return 0;		/* End of table? (error) */
1053:fatfs/ff.c    **** 		if (cl < ncl) break;	/* In this fragment? */
1054:fatfs/ff.c    **** 		cl -= ncl; tbl++;		/* Next fragment */
1055:fatfs/ff.c    **** 	}
1056:fatfs/ff.c    **** 	return cl + *tbl;	/* Return the cluster number */
1057:fatfs/ff.c    **** }
1058:fatfs/ff.c    **** #endif	/* _USE_FASTSEEK */
1059:fatfs/ff.c    **** 
1060:fatfs/ff.c    **** 
1061:fatfs/ff.c    **** 
1062:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1063:fatfs/ff.c    **** /* Directory handling - Set directory index                              */
1064:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1065:fatfs/ff.c    **** 
1066:fatfs/ff.c    **** static
1067:fatfs/ff.c    **** FRESULT dir_sdi (
1068:fatfs/ff.c    **** 	DIR *dj,		/* Pointer to directory object */
1069:fatfs/ff.c    **** 	WORD idx		/* Index of directory table */
1070:fatfs/ff.c    **** )
1071:fatfs/ff.c    **** {
1072:fatfs/ff.c    **** 	DWORD clst;
1073:fatfs/ff.c    **** 	WORD ic;
1074:fatfs/ff.c    **** 
1075:fatfs/ff.c    **** 
1076:fatfs/ff.c    **** 	dj->index = idx;
1077:fatfs/ff.c    **** 	clst = dj->sclust;
1078:fatfs/ff.c    **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
1079:fatfs/ff.c    **** 		return FR_INT_ERR;
1080:fatfs/ff.c    **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
1081:fatfs/ff.c    **** 		clst = dj->fs->dirbase;
1082:fatfs/ff.c    **** 
1083:fatfs/ff.c    **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
1084:fatfs/ff.c    **** 		dj->clust = clst;
1085:fatfs/ff.c    **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
1086:fatfs/ff.c    **** 			return FR_INT_ERR;
1087:fatfs/ff.c    **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1088:fatfs/ff.c    **** 	}
1089:fatfs/ff.c    **** 	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
1090:fatfs/ff.c    **** 		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
1091:fatfs/ff.c    **** 		while (idx >= ic) {	/* Follow cluster chain */
1092:fatfs/ff.c    **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
1093:fatfs/ff.c    **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1094:fatfs/ff.c    **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
1095:fatfs/ff.c    **** 				return FR_INT_ERR;
1096:fatfs/ff.c    **** 			idx -= ic;
1097:fatfs/ff.c    **** 		}
1098:fatfs/ff.c    **** 		dj->clust = clst;
1099:fatfs/ff.c    **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1100:fatfs/ff.c    **** 	}
1101:fatfs/ff.c    **** 
1102:fatfs/ff.c    **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector 
1103:fatfs/ff.c    **** 
1104:fatfs/ff.c    **** 	return FR_OK;	/* Seek succeeded */
1105:fatfs/ff.c    **** }
1106:fatfs/ff.c    **** 
1107:fatfs/ff.c    **** 
1108:fatfs/ff.c    **** 
1109:fatfs/ff.c    **** 
1110:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1111:fatfs/ff.c    **** /* Directory handling - Move directory table index next                  */
1112:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1113:fatfs/ff.c    **** 
1114:fatfs/ff.c    **** static
1115:fatfs/ff.c    **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch
1116:fatfs/ff.c    **** 	DIR *dj,		/* Pointer to directory object */
1117:fatfs/ff.c    **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1118:fatfs/ff.c    **** )
1119:fatfs/ff.c    **** {
1120:fatfs/ff.c    **** 	DWORD clst;
1121:fatfs/ff.c    **** 	WORD i;
1122:fatfs/ff.c    **** 
1123:fatfs/ff.c    **** 
1124:fatfs/ff.c    **** 	stretch = stretch;		/* To suppress warning on read-only cfg. */
1125:fatfs/ff.c    **** 	i = dj->index + 1;
1126:fatfs/ff.c    **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
1127:fatfs/ff.c    **** 		return FR_NO_FILE;
1128:fatfs/ff.c    **** 
1129:fatfs/ff.c    **** 	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
1130:fatfs/ff.c    **** 		dj->sect++;					/* Next sector */
1131:fatfs/ff.c    **** 
1132:fatfs/ff.c    **** 		if (dj->clust == 0) {	/* Static table */
1133:fatfs/ff.c    **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
1134:fatfs/ff.c    **** 				return FR_NO_FILE;
1135:fatfs/ff.c    **** 		}
1136:fatfs/ff.c    **** 		else {					/* Dynamic table */
1137:fatfs/ff.c    **** 			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
1138:fatfs/ff.c    **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
1139:fatfs/ff.c    **** 				if (clst <= 1) return FR_INT_ERR;
1140:fatfs/ff.c    **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1141:fatfs/ff.c    **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
1142:fatfs/ff.c    **** #if !_FS_READONLY
1143:fatfs/ff.c    **** 					BYTE c;
1144:fatfs/ff.c    **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
1145:fatfs/ff.c    **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
1146:fatfs/ff.c    **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1147:fatfs/ff.c    **** 					if (clst == 1) return FR_INT_ERR;
1148:fatfs/ff.c    **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1149:fatfs/ff.c    **** 					/* Clean-up stretched table */
1150:fatfs/ff.c    **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
1151:fatfs/ff.c    **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
1152:fatfs/ff.c    **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
1153:fatfs/ff.c    **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
1154:fatfs/ff.c    **** 						dj->fs->wflag = 1;
1155:fatfs/ff.c    **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
1156:fatfs/ff.c    **** 						dj->fs->winsect++;
1157:fatfs/ff.c    **** 					}
1158:fatfs/ff.c    **** 					dj->fs->winsect -= c;						/* Rewind window address */
1159:fatfs/ff.c    **** #else
1160:fatfs/ff.c    **** 					return FR_NO_FILE;			/* Report EOT */
1161:fatfs/ff.c    **** #endif
1162:fatfs/ff.c    **** 				}
1163:fatfs/ff.c    **** 				dj->clust = clst;				/* Initialize data for new cluster */
1164:fatfs/ff.c    **** 				dj->sect = clust2sect(dj->fs, clst);
1165:fatfs/ff.c    **** 			}
1166:fatfs/ff.c    **** 		}
1167:fatfs/ff.c    **** 	}
1168:fatfs/ff.c    **** 
1169:fatfs/ff.c    **** 	dj->index = i;
1170:fatfs/ff.c    **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
1171:fatfs/ff.c    **** 
1172:fatfs/ff.c    **** 	return FR_OK;
1173:fatfs/ff.c    **** }
1174:fatfs/ff.c    **** 
1175:fatfs/ff.c    **** 
1176:fatfs/ff.c    **** 
1177:fatfs/ff.c    **** 
1178:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1179:fatfs/ff.c    **** /* Directory handling - Load/Store start cluster number                  */
1180:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1181:fatfs/ff.c    **** 
1182:fatfs/ff.c    **** static
1183:fatfs/ff.c    **** DWORD ld_clust (
1184:fatfs/ff.c    **** 	FATFS *fs,	/* Pointer to the fs object */
1185:fatfs/ff.c    **** 	BYTE *dir	/* Pointer to the directory entry */
1186:fatfs/ff.c    **** )
1187:fatfs/ff.c    **** {
1188:fatfs/ff.c    **** 	DWORD cl;
1189:fatfs/ff.c    **** 
1190:fatfs/ff.c    **** 	cl = LD_WORD(dir+DIR_FstClusLO);
1191:fatfs/ff.c    **** 	if (fs->fs_type == FS_FAT32)
1192:fatfs/ff.c    **** 		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
1193:fatfs/ff.c    **** 
1194:fatfs/ff.c    **** 	return cl;
1195:fatfs/ff.c    **** }
1196:fatfs/ff.c    **** 
1197:fatfs/ff.c    **** 
1198:fatfs/ff.c    **** #if !_FS_READONLY
1199:fatfs/ff.c    **** static
1200:fatfs/ff.c    **** void st_clust (
1201:fatfs/ff.c    **** 	BYTE *dir,	/* Pointer to the directory entry */
1202:fatfs/ff.c    **** 	DWORD cl	/* Value to be set */
1203:fatfs/ff.c    **** )
1204:fatfs/ff.c    **** {
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusLO, cl);
1206:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
1207:fatfs/ff.c    **** }
1208:fatfs/ff.c    **** #endif
1209:fatfs/ff.c    **** 
1210:fatfs/ff.c    **** 
1211:fatfs/ff.c    **** 
1212:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1213:fatfs/ff.c    **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
1214:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1215:fatfs/ff.c    **** #if _USE_LFN
1216:fatfs/ff.c    **** static
1217:fatfs/ff.c    **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
1218:fatfs/ff.c    **** 
1219:fatfs/ff.c    **** 
1220:fatfs/ff.c    **** static
1221:fatfs/ff.c    **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
1222:fatfs/ff.c    **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
1223:fatfs/ff.c    **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
1224:fatfs/ff.c    **** )
1225:fatfs/ff.c    **** {
1226:fatfs/ff.c    **** 	UINT i, s;
1227:fatfs/ff.c    **** 	WCHAR wc, uc;
1228:fatfs/ff.c    **** 
1229:fatfs/ff.c    **** 
1230:fatfs/ff.c    **** 	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
1231:fatfs/ff.c    **** 	s = 0; wc = 1;
1232:fatfs/ff.c    **** 	do {
1233:fatfs/ff.c    **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
1234:fatfs/ff.c    **** 		if (wc) {	/* Last char has not been processed */
1235:fatfs/ff.c    **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
1236:fatfs/ff.c    **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
1237:fatfs/ff.c    **** 				return 0;				/* Not matched */
1238:fatfs/ff.c    **** 		} else {
1239:fatfs/ff.c    **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
1240:fatfs/ff.c    **** 		}
1241:fatfs/ff.c    **** 	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
1242:fatfs/ff.c    **** 
1243:fatfs/ff.c    **** 	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
1244:fatfs/ff.c    **** 		return 0;
1245:fatfs/ff.c    **** 
1246:fatfs/ff.c    **** 	return 1;						/* The part of LFN matched */
1247:fatfs/ff.c    **** }
1248:fatfs/ff.c    **** 
1249:fatfs/ff.c    **** 
1250:fatfs/ff.c    **** 
1251:fatfs/ff.c    **** static
1252:fatfs/ff.c    **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
1253:fatfs/ff.c    **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
1254:fatfs/ff.c    **** 	BYTE *dir			/* Pointer to the directory entry */
1255:fatfs/ff.c    **** )
1256:fatfs/ff.c    **** {
1257:fatfs/ff.c    **** 	UINT i, s;
1258:fatfs/ff.c    **** 	WCHAR wc, uc;
1259:fatfs/ff.c    **** 
1260:fatfs/ff.c    **** 
1261:fatfs/ff.c    **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1262:fatfs/ff.c    **** 
1263:fatfs/ff.c    **** 	s = 0; wc = 1;
1264:fatfs/ff.c    **** 	do {
1265:fatfs/ff.c    **** 		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
1266:fatfs/ff.c    **** 		if (wc) {	/* Last char has not been processed */
1267:fatfs/ff.c    **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1268:fatfs/ff.c    **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1269:fatfs/ff.c    **** 		} else {
1270:fatfs/ff.c    **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1271:fatfs/ff.c    **** 		}
1272:fatfs/ff.c    **** 	} while (++s < 13);						/* Read all character in the entry */
1273:fatfs/ff.c    **** 
1274:fatfs/ff.c    **** 	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
1275:fatfs/ff.c    **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1276:fatfs/ff.c    **** 		lfnbuf[i] = 0;
1277:fatfs/ff.c    **** 	}
1278:fatfs/ff.c    **** 
1279:fatfs/ff.c    **** 	return 1;
1280:fatfs/ff.c    **** }
1281:fatfs/ff.c    **** 
1282:fatfs/ff.c    **** 
1283:fatfs/ff.c    **** #if !_FS_READONLY
1284:fatfs/ff.c    **** static
1285:fatfs/ff.c    **** void fit_lfn (
1286:fatfs/ff.c    **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
1287:fatfs/ff.c    **** 	BYTE *dir,				/* Pointer to the directory entry */
1288:fatfs/ff.c    **** 	BYTE ord,				/* LFN order (1-20) */
1289:fatfs/ff.c    **** 	BYTE sum				/* SFN sum */
1290:fatfs/ff.c    **** )
1291:fatfs/ff.c    **** {
1292:fatfs/ff.c    **** 	UINT i, s;
1293:fatfs/ff.c    **** 	WCHAR wc;
1294:fatfs/ff.c    **** 
1295:fatfs/ff.c    **** 
1296:fatfs/ff.c    **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
1297:fatfs/ff.c    **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1298:fatfs/ff.c    **** 	dir[LDIR_Type] = 0;
1299:fatfs/ff.c    **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
1300:fatfs/ff.c    **** 
1301:fatfs/ff.c    **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
1302:fatfs/ff.c    **** 	s = wc = 0;
1303:fatfs/ff.c    **** 	do {
1304:fatfs/ff.c    **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
1305:fatfs/ff.c    **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
1306:fatfs/ff.c    **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
1307:fatfs/ff.c    **** 	} while (++s < 13);
1308:fatfs/ff.c    **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
1309:fatfs/ff.c    **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1310:fatfs/ff.c    **** }
1311:fatfs/ff.c    **** 
1312:fatfs/ff.c    **** #endif
1313:fatfs/ff.c    **** #endif
1314:fatfs/ff.c    **** 
1315:fatfs/ff.c    **** 
1316:fatfs/ff.c    **** 
1317:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1318:fatfs/ff.c    **** /* Create numbered name                                                  */
1319:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1320:fatfs/ff.c    **** #if _USE_LFN
1321:fatfs/ff.c    **** void gen_numname (
1322:fatfs/ff.c    **** 	BYTE *dst,			/* Pointer to generated SFN */
1323:fatfs/ff.c    **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
1324:fatfs/ff.c    **** 	const WCHAR *lfn,	/* Pointer to LFN */
1325:fatfs/ff.c    **** 	WORD seq			/* Sequence number */
1326:fatfs/ff.c    **** )
1327:fatfs/ff.c    **** {
1328:fatfs/ff.c    **** 	BYTE ns[8], c;
1329:fatfs/ff.c    **** 	UINT i, j;
1330:fatfs/ff.c    **** 
1331:fatfs/ff.c    **** 
1332:fatfs/ff.c    **** 	mem_cpy(dst, src, 11);
1333:fatfs/ff.c    **** 
1334:fatfs/ff.c    **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
1335:fatfs/ff.c    **** 		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
1336:fatfs/ff.c    **** 	}
1337:fatfs/ff.c    **** 
1338:fatfs/ff.c    **** 	/* itoa (hexdecimal) */
1339:fatfs/ff.c    **** 	i = 7;
1340:fatfs/ff.c    **** 	do {
1341:fatfs/ff.c    **** 		c = (seq % 16) + '0';
1342:fatfs/ff.c    **** 		if (c > '9') c += 7;
1343:fatfs/ff.c    **** 		ns[i--] = c;
1344:fatfs/ff.c    **** 		seq /= 16;
1345:fatfs/ff.c    **** 	} while (seq);
1346:fatfs/ff.c    **** 	ns[i] = '~';
1347:fatfs/ff.c    **** 
1348:fatfs/ff.c    **** 	/* Append the number */
1349:fatfs/ff.c    **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1350:fatfs/ff.c    **** 		if (IsDBCS1(dst[j])) {
1351:fatfs/ff.c    **** 			if (j == i - 1) break;
1352:fatfs/ff.c    **** 			j++;
1353:fatfs/ff.c    **** 		}
1354:fatfs/ff.c    **** 	}
1355:fatfs/ff.c    **** 	do {
1356:fatfs/ff.c    **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1357:fatfs/ff.c    **** 	} while (j < 8);
1358:fatfs/ff.c    **** }
1359:fatfs/ff.c    **** #endif
1360:fatfs/ff.c    **** 
1361:fatfs/ff.c    **** 
1362:fatfs/ff.c    **** 
1363:fatfs/ff.c    **** 
1364:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1365:fatfs/ff.c    **** /* Calculate sum of an SFN                                               */
1366:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1367:fatfs/ff.c    **** #if _USE_LFN
1368:fatfs/ff.c    **** static
1369:fatfs/ff.c    **** BYTE sum_sfn (
1370:fatfs/ff.c    **** 	const BYTE *dir		/* Ptr to directory entry */
1371:fatfs/ff.c    **** )
1372:fatfs/ff.c    **** {
1373:fatfs/ff.c    **** 	BYTE sum = 0;
1374:fatfs/ff.c    **** 	UINT n = 11;
1375:fatfs/ff.c    **** 
1376:fatfs/ff.c    **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
1377:fatfs/ff.c    **** 	return sum;
1378:fatfs/ff.c    **** }
1379:fatfs/ff.c    **** #endif
1380:fatfs/ff.c    **** 
1381:fatfs/ff.c    **** 
1382:fatfs/ff.c    **** 
1383:fatfs/ff.c    **** 
1384:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1385:fatfs/ff.c    **** /* Directory handling - Find an object in the directory                  */
1386:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1387:fatfs/ff.c    **** 
1388:fatfs/ff.c    **** static
1389:fatfs/ff.c    **** FRESULT dir_find (
1390:fatfs/ff.c    **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
1391:fatfs/ff.c    **** )
1392:fatfs/ff.c    **** {
1393:fatfs/ff.c    **** 	FRESULT res;
1394:fatfs/ff.c    **** 	BYTE c, *dir;
1395:fatfs/ff.c    **** #if _USE_LFN
1396:fatfs/ff.c    **** 	BYTE a, ord, sum;
1397:fatfs/ff.c    **** #endif
1398:fatfs/ff.c    **** 
1399:fatfs/ff.c    **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
1400:fatfs/ff.c    **** 	if (res != FR_OK) return res;
1401:fatfs/ff.c    **** 
1402:fatfs/ff.c    **** #if _USE_LFN
1403:fatfs/ff.c    **** 	ord = sum = 0xFF;
1404:fatfs/ff.c    **** #endif
1405:fatfs/ff.c    **** 	do {
1406:fatfs/ff.c    **** 		res = move_window(dj->fs, dj->sect);
1407:fatfs/ff.c    **** 		if (res != FR_OK) break;
1408:fatfs/ff.c    **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1409:fatfs/ff.c    **** 		c = dir[DIR_Name];
1410:fatfs/ff.c    **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1411:fatfs/ff.c    **** #if _USE_LFN	/* LFN configuration */
1412:fatfs/ff.c    **** 		a = dir[DIR_Attr] & AM_MASK;
1413:fatfs/ff.c    **** 		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1414:fatfs/ff.c    **** 			ord = 0xFF;
1415:fatfs/ff.c    **** 		} else {
1416:fatfs/ff.c    **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1417:fatfs/ff.c    **** 				if (dj->lfn) {
1418:fatfs/ff.c    **** 					if (c & LLE) {		/* Is it start of LFN sequence? */
1419:fatfs/ff.c    **** 						sum = dir[LDIR_Chksum];
1420:fatfs/ff.c    **** 						c &= ~LLE; ord = c;	/* LFN start order */
1421:fatfs/ff.c    **** 						dj->lfn_idx = dj->index;
1422:fatfs/ff.c    **** 					}
1423:fatfs/ff.c    **** 					/* Check validity of the LFN entry and compare it with given name */
1424:fatfs/ff.c    **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1425:fatfs/ff.c    **** 				}
1426:fatfs/ff.c    **** 			} else {					/* An SFN entry is found */
1427:fatfs/ff.c    **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1428:fatfs/ff.c    **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1429:fatfs/ff.c    **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
1430:fatfs/ff.c    **** 			}
1431:fatfs/ff.c    **** 		}
1432:fatfs/ff.c    **** #else		/* Non LFN configuration */
1433:fatfs/ff.c    **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
1434:fatfs/ff.c    **** 			break;
1435:fatfs/ff.c    **** #endif
1436:fatfs/ff.c    **** 		res = dir_next(dj, 0);		/* Next entry */
1437:fatfs/ff.c    **** 	} while (res == FR_OK);
1438:fatfs/ff.c    **** 
1439:fatfs/ff.c    **** 	return res;
1440:fatfs/ff.c    **** }
1441:fatfs/ff.c    **** 
1442:fatfs/ff.c    **** 
1443:fatfs/ff.c    **** 
1444:fatfs/ff.c    **** 
1445:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1446:fatfs/ff.c    **** /* Read an object from the directory                                     */
1447:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1448:fatfs/ff.c    **** #if _FS_MINIMIZE <= 1
1449:fatfs/ff.c    **** static
1450:fatfs/ff.c    **** FRESULT dir_read (
1451:fatfs/ff.c    **** 	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
1452:fatfs/ff.c    **** )
1453:fatfs/ff.c    **** {
1454:fatfs/ff.c    **** 	FRESULT res;
1455:fatfs/ff.c    **** 	BYTE c, *dir;
1456:fatfs/ff.c    **** #if _USE_LFN
1457:fatfs/ff.c    **** 	BYTE a, ord = 0xFF, sum = 0xFF;
1458:fatfs/ff.c    **** #endif
1459:fatfs/ff.c    **** 
1460:fatfs/ff.c    **** 	res = FR_NO_FILE;
1461:fatfs/ff.c    **** 	while (dj->sect) {
1462:fatfs/ff.c    **** 		res = move_window(dj->fs, dj->sect);
1463:fatfs/ff.c    **** 		if (res != FR_OK) break;
1464:fatfs/ff.c    **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1465:fatfs/ff.c    **** 		c = dir[DIR_Name];
1466:fatfs/ff.c    **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1467:fatfs/ff.c    **** #if _USE_LFN	/* LFN configuration */
1468:fatfs/ff.c    **** 		a = dir[DIR_Attr] & AM_MASK;
1469:fatfs/ff.c    **** 		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without 
1470:fatfs/ff.c    **** 			ord = 0xFF;
1471:fatfs/ff.c    **** 		} else {
1472:fatfs/ff.c    **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1473:fatfs/ff.c    **** 				if (c & LLE) {			/* Is it start of LFN sequence? */
1474:fatfs/ff.c    **** 					sum = dir[LDIR_Chksum];
1475:fatfs/ff.c    **** 					c &= ~LLE; ord = c;
1476:fatfs/ff.c    **** 					dj->lfn_idx = dj->index;
1477:fatfs/ff.c    **** 				}
1478:fatfs/ff.c    **** 				/* Check LFN validity and capture it */
1479:fatfs/ff.c    **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1480:fatfs/ff.c    **** 			} else {					/* An SFN entry is found */
1481:fatfs/ff.c    **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1482:fatfs/ff.c    **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
1483:fatfs/ff.c    **** 				break;
1484:fatfs/ff.c    **** 			}
1485:fatfs/ff.c    **** 		}
1486:fatfs/ff.c    **** #else		/* Non LFN configuration */
1487:fatfs/ff.c    **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
1488:fatfs/ff.c    **** 			break;
1489:fatfs/ff.c    **** #endif
1490:fatfs/ff.c    **** 		res = dir_next(dj, 0);				/* Next entry */
1491:fatfs/ff.c    **** 		if (res != FR_OK) break;
1492:fatfs/ff.c    **** 	}
1493:fatfs/ff.c    **** 
1494:fatfs/ff.c    **** 	if (res != FR_OK) dj->sect = 0;
1495:fatfs/ff.c    **** 
1496:fatfs/ff.c    **** 	return res;
1497:fatfs/ff.c    **** }
1498:fatfs/ff.c    **** #endif
1499:fatfs/ff.c    **** 
1500:fatfs/ff.c    **** 
1501:fatfs/ff.c    **** 
1502:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1503:fatfs/ff.c    **** /* Register an object to the directory                                   */
1504:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1505:fatfs/ff.c    **** #if !_FS_READONLY
1506:fatfs/ff.c    **** static
1507:fatfs/ff.c    **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1508:fatfs/ff.c    **** 	DIR *dj				/* Target directory with object name to be created */
1509:fatfs/ff.c    **** )
1510:fatfs/ff.c    **** {
1511:fatfs/ff.c    **** 	FRESULT res;
1512:fatfs/ff.c    **** 	BYTE c, *dir;
1513:fatfs/ff.c    **** #if _USE_LFN	/* LFN configuration */
1514:fatfs/ff.c    **** 	WORD n, ne, is;
1515:fatfs/ff.c    **** 	BYTE sn[12], *fn, sum;
1516:fatfs/ff.c    **** 	WCHAR *lfn;
1517:fatfs/ff.c    **** 
1518:fatfs/ff.c    **** 
1519:fatfs/ff.c    **** 	fn = dj->fn; lfn = dj->lfn;
1520:fatfs/ff.c    **** 	mem_cpy(sn, fn, 12);
1521:fatfs/ff.c    **** 
1522:fatfs/ff.c    **** 	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
1523:fatfs/ff.c    **** 		return FR_INVALID_NAME;
1524:fatfs/ff.c    **** 
1525:fatfs/ff.c    **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1526:fatfs/ff.c    **** 		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
1527:fatfs/ff.c    **** 		for (n = 1; n < 100; n++) {
1528:fatfs/ff.c    **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1529:fatfs/ff.c    **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
1530:fatfs/ff.c    **** 			if (res != FR_OK) break;
1531:fatfs/ff.c    **** 		}
1532:fatfs/ff.c    **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1533:fatfs/ff.c    **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1534:fatfs/ff.c    **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
1535:fatfs/ff.c    **** 	}
1536:fatfs/ff.c    **** 
1537:fatfs/ff.c    **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
1538:fatfs/ff.c    **** 		for (ne = 0; lfn[ne]; ne++) ;
1539:fatfs/ff.c    **** 		ne = (ne + 25) / 13;
1540:fatfs/ff.c    **** 	} else {						/* Otherwise reserve only an SFN entry. */
1541:fatfs/ff.c    **** 		ne = 1;
1542:fatfs/ff.c    **** 	}
1543:fatfs/ff.c    **** 
1544:fatfs/ff.c    **** 	/* Reserve contiguous entries */
1545:fatfs/ff.c    **** 	res = dir_sdi(dj, 0);
1546:fatfs/ff.c    **** 	if (res != FR_OK) return res;
1547:fatfs/ff.c    **** 	n = is = 0;
1548:fatfs/ff.c    **** 	do {
1549:fatfs/ff.c    **** 		res = move_window(dj->fs, dj->sect);
1550:fatfs/ff.c    **** 		if (res != FR_OK) break;
1551:fatfs/ff.c    **** 		c = *dj->dir;				/* Check the entry status */
1552:fatfs/ff.c    **** 		if (c == DDE || c == 0) {	/* Is it a blank entry? */
1553:fatfs/ff.c    **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
1554:fatfs/ff.c    **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
1555:fatfs/ff.c    **** 		} else {
1556:fatfs/ff.c    **** 			n = 0;					/* Not a blank entry. Restart to search */
1557:fatfs/ff.c    **** 		}
1558:fatfs/ff.c    **** 		res = dir_next(dj, 1);		/* Next entry with table stretch */
1559:fatfs/ff.c    **** 	} while (res == FR_OK);
1560:fatfs/ff.c    **** 
1561:fatfs/ff.c    **** 	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
1562:fatfs/ff.c    **** 		res = dir_sdi(dj, is);
1563:fatfs/ff.c    **** 		if (res == FR_OK) {
1564:fatfs/ff.c    **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
1565:fatfs/ff.c    **** 			ne--;
1566:fatfs/ff.c    **** 			do {					/* Store LFN entries in bottom first */
1567:fatfs/ff.c    **** 				res = move_window(dj->fs, dj->sect);
1568:fatfs/ff.c    **** 				if (res != FR_OK) break;
1569:fatfs/ff.c    **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
1570:fatfs/ff.c    **** 				dj->fs->wflag = 1;
1571:fatfs/ff.c    **** 				res = dir_next(dj, 0);	/* Next entry */
1572:fatfs/ff.c    **** 			} while (res == FR_OK && --ne);
1573:fatfs/ff.c    **** 		}
1574:fatfs/ff.c    **** 	}
1575:fatfs/ff.c    **** 
1576:fatfs/ff.c    **** #else	/* Non LFN configuration */
1577:fatfs/ff.c    **** 	res = dir_sdi(dj, 0);
1578:fatfs/ff.c    **** 	if (res == FR_OK) {
1579:fatfs/ff.c    **** 		do {	/* Find a blank entry for the SFN */
1580:fatfs/ff.c    **** 			res = move_window(dj->fs, dj->sect);
1581:fatfs/ff.c    **** 			if (res != FR_OK) break;
1582:fatfs/ff.c    **** 			c = *dj->dir;
1583:fatfs/ff.c    **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
1584:fatfs/ff.c    **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
1585:fatfs/ff.c    **** 		} while (res == FR_OK);
1586:fatfs/ff.c    **** 	}
1587:fatfs/ff.c    **** #endif
1588:fatfs/ff.c    **** 
1589:fatfs/ff.c    **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
1590:fatfs/ff.c    **** 		res = move_window(dj->fs, dj->sect);
1591:fatfs/ff.c    **** 		if (res == FR_OK) {
1592:fatfs/ff.c    **** 			dir = dj->dir;
1593:fatfs/ff.c    **** 			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
1594:fatfs/ff.c    **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
1595:fatfs/ff.c    **** #if _USE_LFN
1596:fatfs/ff.c    **** 			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
1597:fatfs/ff.c    **** #endif
1598:fatfs/ff.c    **** 			dj->fs->wflag = 1;
1599:fatfs/ff.c    **** 		}
1600:fatfs/ff.c    **** 	}
1601:fatfs/ff.c    **** 
1602:fatfs/ff.c    **** 	return res;
1603:fatfs/ff.c    **** }
1604:fatfs/ff.c    **** #endif /* !_FS_READONLY */
1605:fatfs/ff.c    **** 
1606:fatfs/ff.c    **** 
1607:fatfs/ff.c    **** 
1608:fatfs/ff.c    **** 
1609:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1610:fatfs/ff.c    **** /* Remove an object from the directory                                   */
1611:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1612:fatfs/ff.c    **** #if !_FS_READONLY && !_FS_MINIMIZE
1613:fatfs/ff.c    **** static
1614:fatfs/ff.c    **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1615:fatfs/ff.c    **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1616:fatfs/ff.c    **** )
1617:fatfs/ff.c    **** {
1618:fatfs/ff.c    **** 	FRESULT res;
1619:fatfs/ff.c    **** #if _USE_LFN	/* LFN configuration */
1620:fatfs/ff.c    **** 	WORD i;
1621:fatfs/ff.c    **** 
1622:fatfs/ff.c    **** 	i = dj->index;	/* SFN index */
1623:fatfs/ff.c    **** 	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of th
1624:fatfs/ff.c    **** 	if (res == FR_OK) {
1625:fatfs/ff.c    **** 		do {
1626:fatfs/ff.c    **** 			res = move_window(dj->fs, dj->sect);
1627:fatfs/ff.c    **** 			if (res != FR_OK) break;
1628:fatfs/ff.c    **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1629:fatfs/ff.c    **** 			dj->fs->wflag = 1;
1630:fatfs/ff.c    **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1631:fatfs/ff.c    **** 			res = dir_next(dj, 0);		/* Next entry */
1632:fatfs/ff.c    **** 		} while (res == FR_OK);
1633:fatfs/ff.c    **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1634:fatfs/ff.c    **** 	}
1635:fatfs/ff.c    **** 
1636:fatfs/ff.c    **** #else			/* Non LFN configuration */
1637:fatfs/ff.c    **** 	res = dir_sdi(dj, dj->index);
1638:fatfs/ff.c    **** 	if (res == FR_OK) {
1639:fatfs/ff.c    **** 		res = move_window(dj->fs, dj->sect);
1640:fatfs/ff.c    **** 		if (res == FR_OK) {
1641:fatfs/ff.c    **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1642:fatfs/ff.c    **** 			dj->fs->wflag = 1;
1643:fatfs/ff.c    **** 		}
1644:fatfs/ff.c    **** 	}
1645:fatfs/ff.c    **** #endif
1646:fatfs/ff.c    **** 
1647:fatfs/ff.c    **** 	return res;
1648:fatfs/ff.c    **** }
1649:fatfs/ff.c    **** #endif /* !_FS_READONLY */
1650:fatfs/ff.c    **** 
1651:fatfs/ff.c    **** 
1652:fatfs/ff.c    **** 
1653:fatfs/ff.c    **** 
1654:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1655:fatfs/ff.c    **** /* Pick a segment and create the object name in directory form           */
1656:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1657:fatfs/ff.c    **** 
1658:fatfs/ff.c    **** static
1659:fatfs/ff.c    **** FRESULT create_name (
1660:fatfs/ff.c    **** 	DIR *dj,			/* Pointer to the directory object */
1661:fatfs/ff.c    **** 	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
1662:fatfs/ff.c    **** )
1663:fatfs/ff.c    **** {
1664:fatfs/ff.c    **** #ifdef _EXCVT
1665:fatfs/ff.c    **** 	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
1666:fatfs/ff.c    **** #endif
1667:fatfs/ff.c    **** 
1668:fatfs/ff.c    **** #if _USE_LFN	/* LFN configuration */
1669:fatfs/ff.c    **** 	BYTE b, cf;
1670:fatfs/ff.c    **** 	WCHAR w, *lfn;
1671:fatfs/ff.c    **** 	UINT i, ni, si, di;
1672:fatfs/ff.c    **** 	const TCHAR *p;
1673:fatfs/ff.c    **** 
1674:fatfs/ff.c    **** 	/* Create LFN in Unicode */
1675:fatfs/ff.c    **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1676:fatfs/ff.c    **** 	lfn = dj->lfn;
1677:fatfs/ff.c    **** 	si = di = 0;
1678:fatfs/ff.c    **** 	for (;;) {
1679:fatfs/ff.c    **** 		w = p[si++];					/* Get a character */
1680:fatfs/ff.c    **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1681:fatfs/ff.c    **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1682:fatfs/ff.c    **** 			return FR_INVALID_NAME;
1683:fatfs/ff.c    **** #if !_LFN_UNICODE
1684:fatfs/ff.c    **** 		w &= 0xFF;
1685:fatfs/ff.c    **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1686:fatfs/ff.c    **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
1687:fatfs/ff.c    **** 			if (!IsDBCS2(b))
1688:fatfs/ff.c    **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1689:fatfs/ff.c    **** 			w = (w << 8) + b;			/* Create a DBC */
1690:fatfs/ff.c    **** 		}
1691:fatfs/ff.c    **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
1692:fatfs/ff.c    **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1693:fatfs/ff.c    **** #endif
1694:fatfs/ff.c    **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
1695:fatfs/ff.c    **** 			return FR_INVALID_NAME;
1696:fatfs/ff.c    **** 		lfn[di++] = w;					/* Store the Unicode char */
1697:fatfs/ff.c    **** 	}
1698:fatfs/ff.c    **** 	*path = &p[si];						/* Return pointer to the next segment */
1699:fatfs/ff.c    **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1700:fatfs/ff.c    **** #if _FS_RPATH
1701:fatfs/ff.c    **** 	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
1702:fatfs/ff.c    **** 		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
1703:fatfs/ff.c    **** 		lfn[di] = 0;
1704:fatfs/ff.c    **** 		for (i = 0; i < 11; i++)
1705:fatfs/ff.c    **** 			dj->fn[i] = (i < di) ? '.' : ' ';
1706:fatfs/ff.c    **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1707:fatfs/ff.c    **** 		return FR_OK;
1708:fatfs/ff.c    **** 	}
1709:fatfs/ff.c    **** #endif
1710:fatfs/ff.c    **** 	while (di) {						/* Strip trailing spaces and dots */
1711:fatfs/ff.c    **** 		w = lfn[di-1];
1712:fatfs/ff.c    **** 		if (w != ' ' && w != '.') break;
1713:fatfs/ff.c    **** 		di--;
1714:fatfs/ff.c    **** 	}
1715:fatfs/ff.c    **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1716:fatfs/ff.c    **** 
1717:fatfs/ff.c    **** 	lfn[di] = 0;						/* LFN is created */
1718:fatfs/ff.c    **** 
1719:fatfs/ff.c    **** 	/* Create SFN in directory form */
1720:fatfs/ff.c    **** 	mem_set(dj->fn, ' ', 11);
1721:fatfs/ff.c    **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1722:fatfs/ff.c    **** 	if (si) cf |= NS_LOSS | NS_LFN;
1723:fatfs/ff.c    **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1724:fatfs/ff.c    **** 
1725:fatfs/ff.c    **** 	b = i = 0; ni = 8;
1726:fatfs/ff.c    **** 	for (;;) {
1727:fatfs/ff.c    **** 		w = lfn[si++];					/* Get an LFN char */
1728:fatfs/ff.c    **** 		if (!w) break;					/* Break on end of the LFN */
1729:fatfs/ff.c    **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1730:fatfs/ff.c    **** 			cf |= NS_LOSS | NS_LFN; continue;
1731:fatfs/ff.c    **** 		}
1732:fatfs/ff.c    **** 
1733:fatfs/ff.c    **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1734:fatfs/ff.c    **** 			if (ni == 11) {				/* Long extension */
1735:fatfs/ff.c    **** 				cf |= NS_LOSS | NS_LFN; break;
1736:fatfs/ff.c    **** 			}
1737:fatfs/ff.c    **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1738:fatfs/ff.c    **** 			if (si > di) break;			/* No extension */
1739:fatfs/ff.c    **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1740:fatfs/ff.c    **** 			b <<= 2; continue;
1741:fatfs/ff.c    **** 		}
1742:fatfs/ff.c    **** 
1743:fatfs/ff.c    **** 		if (w >= 0x80) {				/* Non ASCII char */
1744:fatfs/ff.c    **** #ifdef _EXCVT
1745:fatfs/ff.c    **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1746:fatfs/ff.c    **** 			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
1747:fatfs/ff.c    **** #else
1748:fatfs/ff.c    **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1749:fatfs/ff.c    **** #endif
1750:fatfs/ff.c    **** 			cf |= NS_LFN;				/* Force create LFN entry */
1751:fatfs/ff.c    **** 		}
1752:fatfs/ff.c    **** 
1753:fatfs/ff.c    **** 		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
1754:fatfs/ff.c    **** 			if (i >= ni - 1) {
1755:fatfs/ff.c    **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1756:fatfs/ff.c    **** 			}
1757:fatfs/ff.c    **** 			dj->fn[i++] = (BYTE)(w >> 8);
1758:fatfs/ff.c    **** 		} else {						/* Single byte char */
1759:fatfs/ff.c    **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
1760:fatfs/ff.c    **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1761:fatfs/ff.c    **** 			} else {
1762:fatfs/ff.c    **** 				if (IsUpper(w)) {		/* ASCII large capital */
1763:fatfs/ff.c    **** 					b |= 2;
1764:fatfs/ff.c    **** 				} else {
1765:fatfs/ff.c    **** 					if (IsLower(w)) {	/* ASCII small capital */
1766:fatfs/ff.c    **** 						b |= 1; w -= 0x20;
1767:fatfs/ff.c    **** 					}
1768:fatfs/ff.c    **** 				}
1769:fatfs/ff.c    **** 			}
1770:fatfs/ff.c    **** 		}
1771:fatfs/ff.c    **** 		dj->fn[i++] = (BYTE)w;
1772:fatfs/ff.c    **** 	}
1773:fatfs/ff.c    **** 
1774:fatfs/ff.c    **** 	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace i
1775:fatfs/ff.c    **** 
1776:fatfs/ff.c    **** 	if (ni == 8) b <<= 2;
1777:fatfs/ff.c    **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1778:fatfs/ff.c    **** 		cf |= NS_LFN;
1779:fatfs/ff.c    **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
1780:fatfs/ff.c    **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1781:fatfs/ff.c    **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1782:fatfs/ff.c    **** 	}
1783:fatfs/ff.c    **** 
1784:fatfs/ff.c    **** 	dj->fn[NS] = cf;	/* SFN is created */
1785:fatfs/ff.c    **** 
1786:fatfs/ff.c    **** 	return FR_OK;
1787:fatfs/ff.c    **** 
1788:fatfs/ff.c    **** 
1789:fatfs/ff.c    **** #else	/* Non-LFN configuration */
1790:fatfs/ff.c    **** 	BYTE b, c, d, *sfn;
1791:fatfs/ff.c    **** 	UINT ni, si, i;
1792:fatfs/ff.c    **** 	const char *p;
1793:fatfs/ff.c    **** 
1794:fatfs/ff.c    **** 	/* Create file name in directory form */
1795:fatfs/ff.c    **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1796:fatfs/ff.c    **** 	sfn = dj->fn;
1797:fatfs/ff.c    **** 	mem_set(sfn, ' ', 11);
1798:fatfs/ff.c    **** 	si = i = b = 0; ni = 8;
1799:fatfs/ff.c    **** #if _FS_RPATH
1800:fatfs/ff.c    **** 	if (p[si] == '.') { /* Is this a dot entry? */
1801:fatfs/ff.c    **** 		for (;;) {
1802:fatfs/ff.c    **** 			c = (BYTE)p[si++];
1803:fatfs/ff.c    **** 			if (c != '.' || si >= 3) break;
1804:fatfs/ff.c    **** 			sfn[i++] = c;
1805:fatfs/ff.c    **** 		}
1806:fatfs/ff.c    **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1807:fatfs/ff.c    **** 		*path = &p[si];									/* Return pointer to the next segment */
1808:fatfs/ff.c    **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1809:fatfs/ff.c    **** 		return FR_OK;
1810:fatfs/ff.c    **** 	}
1811:fatfs/ff.c    **** #endif
1812:fatfs/ff.c    **** 	for (;;) {
1813:fatfs/ff.c    **** 		c = (BYTE)p[si++];
1814:fatfs/ff.c    **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
1815:fatfs/ff.c    **** 		if (c == '.' || i >= ni) {
1816:fatfs/ff.c    **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
1817:fatfs/ff.c    **** 			i = 8; ni = 11;
1818:fatfs/ff.c    **** 			b <<= 2; continue;
1819:fatfs/ff.c    **** 		}
1820:fatfs/ff.c    **** 		if (c >= 0x80) {				/* Extended char? */
1821:fatfs/ff.c    **** 			b |= 3;						/* Eliminate NT flag */
1822:fatfs/ff.c    **** #ifdef _EXCVT
1823:fatfs/ff.c    **** 			c = excvt[c - 0x80];		/* Upper conversion (SBCS) */
1824:fatfs/ff.c    **** #else
1825:fatfs/ff.c    **** #if !_DF1S	/* ASCII only cfg */
1826:fatfs/ff.c    **** 			return FR_INVALID_NAME;
1827:fatfs/ff.c    **** #endif
1828:fatfs/ff.c    **** #endif
1829:fatfs/ff.c    **** 		}
1830:fatfs/ff.c    **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1831:fatfs/ff.c    **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
1832:fatfs/ff.c    **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1833:fatfs/ff.c    **** 				return FR_INVALID_NAME;
1834:fatfs/ff.c    **** 			sfn[i++] = c;
1835:fatfs/ff.c    **** 			sfn[i++] = d;
1836:fatfs/ff.c    **** 		} else {						/* Single byte code */
1837:fatfs/ff.c    **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
1838:fatfs/ff.c    **** 				return FR_INVALID_NAME;
1839:fatfs/ff.c    **** 			if (IsUpper(c)) {			/* ASCII large capital? */
1840:fatfs/ff.c    **** 				b |= 2;
1841:fatfs/ff.c    **** 			} else {
1842:fatfs/ff.c    **** 				if (IsLower(c)) {		/* ASCII small capital? */
1843:fatfs/ff.c    **** 					b |= 1; c -= 0x20;
1844:fatfs/ff.c    **** 				}
1845:fatfs/ff.c    **** 			}
1846:fatfs/ff.c    **** 			sfn[i++] = c;
1847:fatfs/ff.c    **** 		}
1848:fatfs/ff.c    **** 	}
1849:fatfs/ff.c    **** 	*path = &p[si];						/* Return pointer to the next segment */
1850:fatfs/ff.c    **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1851:fatfs/ff.c    **** 
1852:fatfs/ff.c    **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
1853:fatfs/ff.c    **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
1854:fatfs/ff.c    **** 
1855:fatfs/ff.c    **** 	if (ni == 8) b <<= 2;
1856:fatfs/ff.c    **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
1857:fatfs/ff.c    **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
1858:fatfs/ff.c    **** 
1859:fatfs/ff.c    **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
1860:fatfs/ff.c    **** 
1861:fatfs/ff.c    **** 	return FR_OK;
1862:fatfs/ff.c    **** #endif
1863:fatfs/ff.c    **** }
1864:fatfs/ff.c    **** 
1865:fatfs/ff.c    **** 
1866:fatfs/ff.c    **** 
1867:fatfs/ff.c    **** 
1868:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1869:fatfs/ff.c    **** /* Get file information from directory entry                             */
1870:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1871:fatfs/ff.c    **** #if _FS_MINIMIZE <= 1
1872:fatfs/ff.c    **** static
1873:fatfs/ff.c    **** void get_fileinfo (		/* No return code */
1874:fatfs/ff.c    **** 	DIR *dj,			/* Pointer to the directory object */
1875:fatfs/ff.c    **** 	FILINFO *fno	 	/* Pointer to the file information to be filled */
1876:fatfs/ff.c    **** )
1877:fatfs/ff.c    **** {
  60              	 .loc 1 1877 0
  61              	 .cfi_startproc
  62              	 
  63              	 
  64              	.LVL5:
  65 0000 30B5     	 push {r4,r5,lr}
  66              	 .cfi_def_cfa_offset 12
  67              	 .cfi_offset 4,-12
  68              	 .cfi_offset 5,-8
  69              	 .cfi_offset 14,-4
1878:fatfs/ff.c    **** 	UINT i;
1879:fatfs/ff.c    **** 	BYTE nt, *dir;
1880:fatfs/ff.c    **** 	TCHAR *p, c;
1881:fatfs/ff.c    **** 
1882:fatfs/ff.c    **** 
1883:fatfs/ff.c    **** 	p = fno->fname;
1884:fatfs/ff.c    **** 	if (dj->sect) {
  70              	 .loc 1 1884 0
  71 0002 0269     	 ldr r2,[r0,#16]
1883:fatfs/ff.c    **** 	if (dj->sect) {
  72              	 .loc 1 1883 0
  73 0004 01F10903 	 add r3,r1,#9
  74              	.LVL6:
  75              	 .loc 1 1884 0
  76 0008 6AB3     	 cbz r2,.L5
1885:fatfs/ff.c    **** 		dir = dj->dir;
  77              	 .loc 1 1885 0
  78 000a 4269     	 ldr r2,[r0,#20]
  79              	.LVL7:
  80 000c 01F11105 	 add r5,r1,#17
  81 0010 541E     	 subs r4,r2,#1
  82              	.LVL8:
  83              	.L8:
1886:fatfs/ff.c    **** 		nt = dir[DIR_NTres];		/* NT flag */
1887:fatfs/ff.c    **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
1888:fatfs/ff.c    **** 			c = dir[i];
  84              	 .loc 1 1888 0
  85 0012 14F8010F 	 ldrb r0,[r4,#1]!
  86              	.LVL9:
1889:fatfs/ff.c    **** 			if (c == ' ') break;
  87              	 .loc 1 1889 0
  88 0016 2028     	 cmp r0,#32
  89 0018 06D0     	 beq .L6
1890:fatfs/ff.c    **** 			if (c == NDDE) c = (TCHAR)DDE;
  90              	 .loc 1 1890 0
  91 001a 0528     	 cmp r0,#5
  92 001c 08BF     	 it eq
  93 001e E520     	 moveq r0,#229
  94              	.LVL10:
1891:fatfs/ff.c    **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
1892:fatfs/ff.c    **** #if _LFN_UNICODE
1893:fatfs/ff.c    **** 			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
1894:fatfs/ff.c    **** 				c = (c << 8) | dir[++i];
1895:fatfs/ff.c    **** 			c = ff_convert(c, 1);
1896:fatfs/ff.c    **** 			if (!c) c = '?';
1897:fatfs/ff.c    **** #endif
1898:fatfs/ff.c    **** 			*p++ = c;
  95              	 .loc 1 1898 0
  96 0020 03F8010B 	 strb r0,[r3],#1
  97              	.LVL11:
1887:fatfs/ff.c    **** 			c = dir[i];
  98              	 .loc 1 1887 0
  99 0024 AB42     	 cmp r3,r5
 100 0026 F4D1     	 bne .L8
 101              	.LVL12:
 102              	.L6:
1899:fatfs/ff.c    **** 		}
1900:fatfs/ff.c    **** 		if (dir[8] != ' ') {		/* Copy name extension */
 103              	 .loc 1 1900 0
 104 0028 107A     	 ldrb r0,[r2,#8]
 105              	.LVL13:
 106 002a 2028     	 cmp r0,#32
 107 002c 0DD0     	 beq .L9
 108              	.LVL14:
1901:fatfs/ff.c    **** 			*p++ = '.';
 109              	 .loc 1 1901 0
 110 002e 1846     	 mov r0,r3
 111 0030 2E24     	 movs r4,#46
 112 0032 D51D     	 adds r5,r2,#7
 113 0034 00F8044B 	 strb r4,[r0],#4
 114              	.LVL15:
 115 0038 0133     	 adds r3,r3,#1
 116              	.LVL16:
 117              	.L10:
1902:fatfs/ff.c    **** 			for (i = 8; i < 11; i++) {
1903:fatfs/ff.c    **** 				c = dir[i];
 118              	 .loc 1 1903 0
 119 003a 15F8014F 	 ldrb r4,[r5,#1]!
 120              	.LVL17:
1904:fatfs/ff.c    **** 				if (c == ' ') break;
 121              	 .loc 1 1904 0
 122 003e 202C     	 cmp r4,#32
 123 0040 03D0     	 beq .L9
1905:fatfs/ff.c    **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
1906:fatfs/ff.c    **** #if _LFN_UNICODE
1907:fatfs/ff.c    **** 				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
1908:fatfs/ff.c    **** 					c = (c << 8) | dir[++i];
1909:fatfs/ff.c    **** 				c = ff_convert(c, 1);
1910:fatfs/ff.c    **** 				if (!c) c = '?';
1911:fatfs/ff.c    **** #endif
1912:fatfs/ff.c    **** 				*p++ = c;
 124              	 .loc 1 1912 0 discriminator 2
 125 0042 03F8014B 	 strb r4,[r3],#1
 126              	.LVL18:
1902:fatfs/ff.c    **** 				c = dir[i];
 127              	 .loc 1 1902 0 discriminator 2
 128 0046 8342     	 cmp r3,r0
 129 0048 F7D1     	 bne .L10
 130              	.LVL19:
 131              	.L9:
1913:fatfs/ff.c    **** 			}
1914:fatfs/ff.c    **** 		}
1915:fatfs/ff.c    **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 132              	 .loc 1 1915 0
 133 004a D07A     	 ldrb r0,[r2,#11]
 134 004c 0872     	 strb r0,[r1,#8]
1916:fatfs/ff.c    **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 135              	 .loc 1 1916 0
 136 004e D069     	 ldr r0,[r2,#28]
 137 0050 0860     	 str r0,[r1]
1917:fatfs/ff.c    **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 138              	 .loc 1 1917 0
 139 0052 547E     	 ldrb r4,[r2,#25]
 140 0054 107E     	 ldrb r0,[r2,#24]
 141 0056 40EA0420 	 orr r0,r0,r4,lsl#8
 142 005a 8880     	 strh r0,[r1,#4]
1918:fatfs/ff.c    **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 143              	 .loc 1 1918 0
 144 005c D07D     	 ldrb r0,[r2,#23]
 145 005e 927D     	 ldrb r2,[r2,#22]
 146              	.LVL20:
 147 0060 42EA0022 	 orr r2,r2,r0,lsl#8
 148 0064 CA80     	 strh r2,[r1,#6]
 149              	.L5:
1919:fatfs/ff.c    **** 	}
1920:fatfs/ff.c    **** 	*p = 0;		/* Terminate SFN str by a \0 */
 150              	 .loc 1 1920 0
 151 0066 0022     	 movs r2,#0
 152 0068 1A70     	 strb r2,[r3]
 153 006a 30BD     	 pop {r4,r5,pc}
 154              	 .cfi_endproc
 155              	.LFE20:
 157              	 .section .text.move_window,"ax",%progbits
 158              	 .align 1
 159              	 .syntax unified
 160              	 .thumb
 161              	 .thumb_func
 162              	 .fpu softvfp
 164              	move_window:
 165              	.LFB4:
 725:fatfs/ff.c    **** 	DWORD wsect;
 166              	 .loc 1 725 0
 167              	 .cfi_startproc
 168              	 
 169              	 
 170              	.LVL21:
 171 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 172              	 .cfi_def_cfa_offset 32
 173              	 .cfi_offset 3,-32
 174              	 .cfi_offset 4,-28
 175              	 .cfi_offset 5,-24
 176              	 .cfi_offset 6,-20
 177              	 .cfi_offset 7,-16
 178              	 .cfi_offset 8,-12
 179              	 .cfi_offset 9,-8
 180              	 .cfi_offset 14,-4
 729:fatfs/ff.c    **** 	if (wsect != sector) {	/* Changed current window */
 181              	 .loc 1 729 0
 182 0004 D0F82A50 	 ldr r5,[r0,#42]
 183              	.LVL22:
 725:fatfs/ff.c    **** 	DWORD wsect;
 184              	 .loc 1 725 0
 185 0008 0446     	 mov r4,r0
 730:fatfs/ff.c    **** #if !_FS_READONLY
 186              	 .loc 1 730 0
 187 000a 8D42     	 cmp r5,r1
 725:fatfs/ff.c    **** 	DWORD wsect;
 188              	 .loc 1 725 0
 189 000c 0F46     	 mov r7,r1
 730:fatfs/ff.c    **** #if !_FS_READONLY
 190              	 .loc 1 730 0
 191 000e 02D1     	 bne .L26
 192              	.LVL23:
 193              	.L30:
 752:fatfs/ff.c    **** }
 194              	 .loc 1 752 0
 195 0010 0020     	 movs r0,#0
 196 0012 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 197              	.LVL24:
 198              	.L26:
 732:fatfs/ff.c    **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 199              	 .loc 1 732 0
 200 0016 0379     	 ldrb r3,[r0,#4]
 201 0018 6BB9     	 cbnz r3,.L28
 202              	.LVL25:
 203              	.L32:
 745:fatfs/ff.c    **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 204              	 .loc 1 745 0
 205 001a 002F     	 cmp r7,#0
 206 001c F8D0     	 beq .L30
 746:fatfs/ff.c    **** 				return FR_DISK_ERR;
 207              	 .loc 1 746 0
 208 001e 0123     	 movs r3,#1
 209 0020 3A46     	 mov r2,r7
 210 0022 04F12E01 	 add r1,r4,#46
 211 0026 6078     	 ldrb r0,[r4,#1]
 212 0028 144D     	 ldr r5,.L36
 213              	.LVL26:
 214 002a A847     	 blx r5
 215              	.LVL27:
 216 002c 68B9     	 cbnz r0,.L35
 748:fatfs/ff.c    **** 		}
 217              	 .loc 1 748 0
 218 002e C4F82A70 	 str r7,[r4,#42]
 753:fatfs/ff.c    **** 
 219              	 .loc 1 753 0
 220 0032 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 221              	.LVL28:
 222              	.L28:
 733:fatfs/ff.c    **** 				return FR_DISK_ERR;
 223              	 .loc 1 733 0
 224 0036 00F12E09 	 add r9,r0,#46
 225 003a 114E     	 ldr r6,.L36+4
 226 003c 0123     	 movs r3,#1
 227 003e 2A46     	 mov r2,r5
 228 0040 4946     	 mov r1,r9
 229              	.LVL29:
 230 0042 4078     	 ldrb r0,[r0,#1]
 231              	.LVL30:
 232 0044 B047     	 blx r6
 233              	.LVL31:
 234 0046 B046     	 mov r8,r6
 235 0048 10B1     	 cbz r0,.L31
 236              	.LVL32:
 237              	.L35:
 734:fatfs/ff.c    **** 			fs->wflag = 0;
 238              	 .loc 1 734 0
 239 004a 0120     	 movs r0,#1
 240 004c BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 241              	.LVL33:
 242              	.L31:
 736:fatfs/ff.c    **** 				BYTE nf;
 243              	 .loc 1 736 0
 244 0050 D4F81E30 	 ldr r3,[r4,#30]
 245 0054 D4F81A20 	 ldr r2,[r4,#26]
 735:fatfs/ff.c    **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 246              	 .loc 1 735 0
 247 0058 2071     	 strb r0,[r4,#4]
 736:fatfs/ff.c    **** 				BYTE nf;
 248              	 .loc 1 736 0
 249 005a 1344     	 add r3,r3,r2
 250 005c 9D42     	 cmp r5,r3
 251 005e DCD2     	 bcs .L32
 252              	.LBB5:
 738:fatfs/ff.c    **** 					wsect += fs->fsize;
 253              	 .loc 1 738 0
 254 0060 E678     	 ldrb r6,[r4,#3]
 255              	.LVL34:
 256              	.L33:
 738:fatfs/ff.c    **** 					wsect += fs->fsize;
 257              	 .loc 1 738 0 is_stmt 0 discriminator 1
 258 0062 012E     	 cmp r6,#1
 259 0064 D9D9     	 bls .L32
 739:fatfs/ff.c    **** 					disk_write(fs->drv, fs->win, wsect, 1);
 260              	 .loc 1 739 0 is_stmt 1 discriminator 3
 261 0066 D4F81A30 	 ldr r3,[r4,#26]
 740:fatfs/ff.c    **** 				}
 262              	 .loc 1 740 0 discriminator 3
 263 006a 4946     	 mov r1,r9
 739:fatfs/ff.c    **** 					disk_write(fs->drv, fs->win, wsect, 1);
 264              	 .loc 1 739 0 discriminator 3
 265 006c 1D44     	 add r5,r5,r3
 266              	.LVL35:
 740:fatfs/ff.c    **** 				}
 267              	 .loc 1 740 0 discriminator 3
 268 006e 2A46     	 mov r2,r5
 269 0070 0123     	 movs r3,#1
 270 0072 6078     	 ldrb r0,[r4,#1]
 738:fatfs/ff.c    **** 					wsect += fs->fsize;
 271              	 .loc 1 738 0 discriminator 3
 272 0074 013E     	 subs r6,r6,#1
 273              	.LVL36:
 740:fatfs/ff.c    **** 				}
 274              	 .loc 1 740 0 discriminator 3
 275 0076 C047     	 blx r8
 276              	.LVL37:
 738:fatfs/ff.c    **** 					wsect += fs->fsize;
 277              	 .loc 1 738 0 discriminator 3
 278 0078 F6B2     	 uxtb r6,r6
 279              	.LVL38:
 280 007a F2E7     	 b .L33
 281              	.L37:
 282              	 .align 2
 283              	.L36:
 284 007c 00000000 	 .word disk_read
 285 0080 00000000 	 .word disk_write
 286              	.LBE5:
 287              	 .cfi_endproc
 288              	.LFE4:
 290              	 .section .text.validate,"ax",%progbits
 291              	 .align 1
 292              	 .syntax unified
 293              	 .thumb
 294              	 .thumb_func
 295              	 .fpu softvfp
 297              	validate:
 298              	.LFB24:
1921:fatfs/ff.c    **** 
1922:fatfs/ff.c    **** #if _USE_LFN
1923:fatfs/ff.c    **** 	if (fno->lfname && fno->lfsize) {
1924:fatfs/ff.c    **** 		TCHAR *tp = fno->lfname;
1925:fatfs/ff.c    **** 		WCHAR w, *lfn;
1926:fatfs/ff.c    **** 
1927:fatfs/ff.c    **** 		i = 0;
1928:fatfs/ff.c    **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
1929:fatfs/ff.c    **** 			lfn = dj->lfn;
1930:fatfs/ff.c    **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
1931:fatfs/ff.c    **** #if !_LFN_UNICODE
1932:fatfs/ff.c    **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
1933:fatfs/ff.c    **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
1934:fatfs/ff.c    **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1935:fatfs/ff.c    **** 					tp[i++] = (TCHAR)(w >> 8);
1936:fatfs/ff.c    **** #endif
1937:fatfs/ff.c    **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
1938:fatfs/ff.c    **** 				tp[i++] = (TCHAR)w;
1939:fatfs/ff.c    **** 			}
1940:fatfs/ff.c    **** 		}
1941:fatfs/ff.c    **** 		tp[i] = 0;	/* Terminate the LFN str by a \0 */
1942:fatfs/ff.c    **** 	}
1943:fatfs/ff.c    **** #endif
1944:fatfs/ff.c    **** }
1945:fatfs/ff.c    **** #endif /* _FS_MINIMIZE <= 1 */
1946:fatfs/ff.c    **** 
1947:fatfs/ff.c    **** 
1948:fatfs/ff.c    **** 
1949:fatfs/ff.c    **** 
1950:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1951:fatfs/ff.c    **** /* Follow a file path                                                    */
1952:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
1953:fatfs/ff.c    **** 
1954:fatfs/ff.c    **** static
1955:fatfs/ff.c    **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1956:fatfs/ff.c    **** 	DIR *dj,			/* Directory object to return last directory and found object */
1957:fatfs/ff.c    **** 	const TCHAR *path	/* Full-path string to find a file or directory */
1958:fatfs/ff.c    **** )
1959:fatfs/ff.c    **** {
1960:fatfs/ff.c    **** 	FRESULT res;
1961:fatfs/ff.c    **** 	BYTE *dir, ns;
1962:fatfs/ff.c    **** 
1963:fatfs/ff.c    **** 
1964:fatfs/ff.c    **** #if _FS_RPATH
1965:fatfs/ff.c    **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
1966:fatfs/ff.c    **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
1967:fatfs/ff.c    **** 	} else {							/* No heading separator */
1968:fatfs/ff.c    **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
1969:fatfs/ff.c    **** 	}
1970:fatfs/ff.c    **** #else
1971:fatfs/ff.c    **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
1972:fatfs/ff.c    **** 		path++;
1973:fatfs/ff.c    **** 	dj->sclust = 0;						/* Start from the root dir */
1974:fatfs/ff.c    **** #endif
1975:fatfs/ff.c    **** 
1976:fatfs/ff.c    **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
1977:fatfs/ff.c    **** 		res = dir_sdi(dj, 0);
1978:fatfs/ff.c    **** 		dj->dir = 0;
1979:fatfs/ff.c    **** 	} else {							/* Follow path */
1980:fatfs/ff.c    **** 		for (;;) {
1981:fatfs/ff.c    **** 			res = create_name(dj, &path);	/* Get a segment */
1982:fatfs/ff.c    **** 			if (res != FR_OK) break;
1983:fatfs/ff.c    **** 			res = dir_find(dj);				/* Find it */
1984:fatfs/ff.c    **** 			ns = *(dj->fn+NS);
1985:fatfs/ff.c    **** 			if (res != FR_OK) {				/* Failed to find the object */
1986:fatfs/ff.c    **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
1987:fatfs/ff.c    **** 				/* Object not found */
1988:fatfs/ff.c    **** 				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
1989:fatfs/ff.c    **** 					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
1990:fatfs/ff.c    **** 					res = FR_OK;
1991:fatfs/ff.c    **** 					if (!(ns & NS_LAST)) continue;
1992:fatfs/ff.c    **** 				} else {							/* Could not find the object */
1993:fatfs/ff.c    **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
1994:fatfs/ff.c    **** 				}
1995:fatfs/ff.c    **** 				break;
1996:fatfs/ff.c    **** 			}
1997:fatfs/ff.c    **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
1998:fatfs/ff.c    **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
1999:fatfs/ff.c    **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
2000:fatfs/ff.c    **** 				res = FR_NO_PATH; break;
2001:fatfs/ff.c    **** 			}
2002:fatfs/ff.c    **** 			dj->sclust = ld_clust(dj->fs, dir);
2003:fatfs/ff.c    **** 		}
2004:fatfs/ff.c    **** 	}
2005:fatfs/ff.c    **** 
2006:fatfs/ff.c    **** 	return res;
2007:fatfs/ff.c    **** }
2008:fatfs/ff.c    **** 
2009:fatfs/ff.c    **** 
2010:fatfs/ff.c    **** 
2011:fatfs/ff.c    **** 
2012:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2013:fatfs/ff.c    **** /* Load a sector and check if it is an FAT Volume Boot Record            */
2014:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2015:fatfs/ff.c    **** 
2016:fatfs/ff.c    **** static
2017:fatfs/ff.c    **** BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
2018:fatfs/ff.c    **** 	FATFS *fs,	/* File system object */
2019:fatfs/ff.c    **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
2020:fatfs/ff.c    **** )
2021:fatfs/ff.c    **** {
2022:fatfs/ff.c    **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
2023:fatfs/ff.c    **** 		return 3;
2024:fatfs/ff.c    **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
2025:fatfs/ff.c    **** 		return 2;
2026:fatfs/ff.c    **** 
2027:fatfs/ff.c    **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
2028:fatfs/ff.c    **** 		return 0;
2029:fatfs/ff.c    **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
2030:fatfs/ff.c    **** 		return 0;
2031:fatfs/ff.c    **** 
2032:fatfs/ff.c    **** 	return 1;
2033:fatfs/ff.c    **** }
2034:fatfs/ff.c    **** 
2035:fatfs/ff.c    **** 
2036:fatfs/ff.c    **** 
2037:fatfs/ff.c    **** 
2038:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2039:fatfs/ff.c    **** /* Check if the file system object is valid or not                       */
2040:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2041:fatfs/ff.c    **** 
2042:fatfs/ff.c    **** static
2043:fatfs/ff.c    **** FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
2044:fatfs/ff.c    **** 	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
2045:fatfs/ff.c    **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
2046:fatfs/ff.c    **** 	BYTE wmode			/* !=0: Check write protection for write access */
2047:fatfs/ff.c    **** )
2048:fatfs/ff.c    **** {
2049:fatfs/ff.c    **** 	BYTE fmt, b, pi, *tbl;
2050:fatfs/ff.c    **** 	UINT vol;
2051:fatfs/ff.c    **** 	DSTATUS stat;
2052:fatfs/ff.c    **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
2053:fatfs/ff.c    **** 	WORD nrsv;
2054:fatfs/ff.c    **** 	const TCHAR *p = *path;
2055:fatfs/ff.c    **** 	FATFS *fs;
2056:fatfs/ff.c    **** 
2057:fatfs/ff.c    **** 
2058:fatfs/ff.c    **** 	/* Get logical drive number from the path name */
2059:fatfs/ff.c    **** 	vol = p[0] - '0';					/* Is there a drive number? */
2060:fatfs/ff.c    **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
2061:fatfs/ff.c    **** 		p += 2; *path = p;				/* Return pointer to the path name */
2062:fatfs/ff.c    **** 	} else {							/* No drive number is given */
2063:fatfs/ff.c    **** #if _FS_RPATH
2064:fatfs/ff.c    **** 		vol = CurrVol;					/* Use current drive */
2065:fatfs/ff.c    **** #else
2066:fatfs/ff.c    **** 		vol = 0;						/* Use drive 0 */
2067:fatfs/ff.c    **** #endif
2068:fatfs/ff.c    **** 	}
2069:fatfs/ff.c    **** 
2070:fatfs/ff.c    **** 	/* Check if the file system object is valid or not */
2071:fatfs/ff.c    **** 	*rfs = 0;
2072:fatfs/ff.c    **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
2073:fatfs/ff.c    **** 		return FR_INVALID_DRIVE;
2074:fatfs/ff.c    **** 	fs = FatFs[vol];					/* Get corresponding file system object */
2075:fatfs/ff.c    **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2076:fatfs/ff.c    **** 
2077:fatfs/ff.c    **** 	ENTER_FF(fs);						/* Lock file system */
2078:fatfs/ff.c    **** 
2079:fatfs/ff.c    **** 	*rfs = fs;							/* Return pointer to the corresponding file system object */
2080:fatfs/ff.c    **** 	if (fs->fs_type) {					/* If the volume has been mounted */
2081:fatfs/ff.c    **** 		stat = disk_status(fs->drv);
2082:fatfs/ff.c    **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
2083:fatfs/ff.c    **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
2084:fatfs/ff.c    **** 				return FR_WRITE_PROTECTED;
2085:fatfs/ff.c    **** 			return FR_OK;				/* The file system object is valid */
2086:fatfs/ff.c    **** 		}
2087:fatfs/ff.c    **** 	}
2088:fatfs/ff.c    **** 
2089:fatfs/ff.c    **** 	/* The file system object is not valid. */
2090:fatfs/ff.c    **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
2091:fatfs/ff.c    **** 
2092:fatfs/ff.c    **** 	fs->fs_type = 0;					/* Clear the file system object */
2093:fatfs/ff.c    **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
2094:fatfs/ff.c    **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2095:fatfs/ff.c    **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
2096:fatfs/ff.c    **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2097:fatfs/ff.c    **** 	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
2098:fatfs/ff.c    **** 		return FR_WRITE_PROTECTED;
2099:fatfs/ff.c    **** #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
2100:fatfs/ff.c    **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
2101:fatfs/ff.c    **** 		return FR_DISK_ERR;
2102:fatfs/ff.c    **** #endif
2103:fatfs/ff.c    **** 	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
2104:fatfs/ff.c    **** 	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
2105:fatfs/ff.c    **** 	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
2106:fatfs/ff.c    **** 	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
2107:fatfs/ff.c    **** 		/* Check the partition listed in the partition table */
2108:fatfs/ff.c    **** 		pi = LD2PT(vol);
2109:fatfs/ff.c    **** 		if (pi) pi--;
2110:fatfs/ff.c    **** // 		printf("FF:pi is %d\n", pi);
2111:fatfs/ff.c    **** 		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
2112:fatfs/ff.c    **** 		if (tbl[4]) {						/* Is the partition existing? */
2113:fatfs/ff.c    **** 			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
2114:fatfs/ff.c    **** 			fmt = check_fs(fs, bsect);		/* Check the partition */
2115:fatfs/ff.c    **** 		}
2116:fatfs/ff.c    **** 	}
2117:fatfs/ff.c    **** 	if (fmt == 3) return FR_DISK_ERR;
2118:fatfs/ff.c    **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
2119:fatfs/ff.c    **** 
2120:fatfs/ff.c    **** 	/* An FAT volume is found. Following code initializes the file system object */
2121:fatfs/ff.c    **** 
2122:fatfs/ff.c    **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
2123:fatfs/ff.c    **** 		return FR_NO_FILESYSTEM;
2124:fatfs/ff.c    **** 
2125:fatfs/ff.c    **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
2126:fatfs/ff.c    **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
2127:fatfs/ff.c    **** 	fs->fsize = fasize;
2128:fatfs/ff.c    **** 
2129:fatfs/ff.c    **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
2130:fatfs/ff.c    **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
2131:fatfs/ff.c    **** 	fasize *= b;										/* Number of sectors for FAT area */
2132:fatfs/ff.c    **** 
2133:fatfs/ff.c    **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
2134:fatfs/ff.c    **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2135:fatfs/ff.c    **** 
2136:fatfs/ff.c    **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
2137:fatfs/ff.c    **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
2138:fatfs/ff.c    **** 
2139:fatfs/ff.c    **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
2140:fatfs/ff.c    **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
2141:fatfs/ff.c    **** 
2142:fatfs/ff.c    **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
2143:fatfs/ff.c    **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
2144:fatfs/ff.c    **** 
2145:fatfs/ff.c    **** 	/* Determine the FAT sub type */
2146:fatfs/ff.c    **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
2147:fatfs/ff.c    **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2148:fatfs/ff.c    **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
2149:fatfs/ff.c    **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
2150:fatfs/ff.c    **** 	fmt = FS_FAT12;
2151:fatfs/ff.c    **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
2152:fatfs/ff.c    **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
2153:fatfs/ff.c    **** 
2154:fatfs/ff.c    **** 	/* Boundaries and Limits */
2155:fatfs/ff.c    **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
2156:fatfs/ff.c    **** 	fs->database = bsect + sysect;						/* Data start sector */
2157:fatfs/ff.c    **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
2158:fatfs/ff.c    **** 	if (fmt == FS_FAT32) {
2159:fatfs/ff.c    **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
2160:fatfs/ff.c    **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
2161:fatfs/ff.c    **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
2162:fatfs/ff.c    **** 	} else {
2163:fatfs/ff.c    **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
2164:fatfs/ff.c    **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
2165:fatfs/ff.c    **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
2166:fatfs/ff.c    **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2167:fatfs/ff.c    **** 	}
2168:fatfs/ff.c    **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
2169:fatfs/ff.c    **** 		return FR_NO_FILESYSTEM;
2170:fatfs/ff.c    **** 
2171:fatfs/ff.c    **** #if !_FS_READONLY
2172:fatfs/ff.c    **** 	/* Initialize cluster allocation information */
2173:fatfs/ff.c    **** 	fs->free_clust = 0xFFFFFFFF;
2174:fatfs/ff.c    **** 	fs->last_clust = 0;
2175:fatfs/ff.c    **** 
2176:fatfs/ff.c    **** 	/* Get fsinfo if available */
2177:fatfs/ff.c    **** 	if (fmt == FS_FAT32) {
2178:fatfs/ff.c    **** 	 	fs->fsi_flag = 0;
2179:fatfs/ff.c    **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
2180:fatfs/ff.c    **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
2181:fatfs/ff.c    **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
2182:fatfs/ff.c    **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
2183:fatfs/ff.c    **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
2184:fatfs/ff.c    **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
2185:fatfs/ff.c    **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
2186:fatfs/ff.c    **** 		}
2187:fatfs/ff.c    **** 	}
2188:fatfs/ff.c    **** #endif
2189:fatfs/ff.c    **** 	fs->fs_type = fmt;		/* FAT sub-type */
2190:fatfs/ff.c    **** 	fs->id = ++Fsid;		/* File system mount ID */
2191:fatfs/ff.c    **** 	fs->winsect = 0;		/* Invalidate sector cache */
2192:fatfs/ff.c    **** 	fs->wflag = 0;
2193:fatfs/ff.c    **** #if _FS_RPATH
2194:fatfs/ff.c    **** 	fs->cdir = 0;			/* Current directory (root dir) */
2195:fatfs/ff.c    **** #endif
2196:fatfs/ff.c    **** #if _FS_LOCK				/* Clear file lock semaphores */
2197:fatfs/ff.c    **** 	clear_lock(fs);
2198:fatfs/ff.c    **** #endif
2199:fatfs/ff.c    **** 
2200:fatfs/ff.c    **** 	return FR_OK;
2201:fatfs/ff.c    **** }
2202:fatfs/ff.c    **** 
2203:fatfs/ff.c    **** 
2204:fatfs/ff.c    **** 
2205:fatfs/ff.c    **** 
2206:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2207:fatfs/ff.c    **** /* Check if the file/dir object is valid or not                          */
2208:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2209:fatfs/ff.c    **** 
2210:fatfs/ff.c    **** static
2211:fatfs/ff.c    **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
2212:fatfs/ff.c    **** 	void* obj		/* Pointer to the object FIL/DIR to check validity */
2213:fatfs/ff.c    **** )
2214:fatfs/ff.c    **** {
 299              	 .loc 1 2214 0
 300              	 .cfi_startproc
 301              	 
 302              	 
 303              	.LVL39:
 304 0000 08B5     	 push {r3,lr}
 305              	 .cfi_def_cfa_offset 8
 306              	 .cfi_offset 3,-8
 307              	 .cfi_offset 14,-4
2215:fatfs/ff.c    **** 	FIL *fil;
2216:fatfs/ff.c    **** 
2217:fatfs/ff.c    **** 
2218:fatfs/ff.c    **** 	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
2219:fatfs/ff.c    **** 	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 308              	 .loc 1 2219 0
 309 0002 0368     	 ldr r3,[r0]
 310 0004 73B1     	 cbz r3,.L42
 311              	 .loc 1 2219 0 is_stmt 0 discriminator 1
 312 0006 1A78     	 ldrb r2,[r3]
 313 0008 62B1     	 cbz r2,.L42
 314              	 .loc 1 2219 0 discriminator 2
 315 000a D988     	 ldrh r1,[r3,#6]
 316 000c 8288     	 ldrh r2,[r0,#4]
 317 000e 9142     	 cmp r1,r2
 318 0010 08D1     	 bne .L42
2220:fatfs/ff.c    **** 		return FR_INVALID_OBJECT;
2221:fatfs/ff.c    **** 
2222:fatfs/ff.c    **** 	ENTER_FF(fil->fs);		/* Lock file system */
2223:fatfs/ff.c    **** 
2224:fatfs/ff.c    **** 	if (disk_status(fil->fs->drv) & STA_NOINIT)
 319              	 .loc 1 2224 0 is_stmt 1
 320 0012 5878     	 ldrb r0,[r3,#1]
 321              	.LVL40:
 322 0014 044B     	 ldr r3,.L44
 323 0016 9847     	 blx r3
 324              	.LVL41:
 325 0018 10F0010F 	 tst r0,#1
2225:fatfs/ff.c    **** 		return FR_NOT_READY;
2226:fatfs/ff.c    **** 
2227:fatfs/ff.c    **** 	return FR_OK;
 326              	 .loc 1 2227 0
 327 001c 14BF     	 ite ne
 328 001e 0320     	 movne r0,#3
 329 0020 0020     	 moveq r0,#0
 330 0022 08BD     	 pop {r3,pc}
 331              	.LVL42:
 332              	.L42:
2220:fatfs/ff.c    **** 		return FR_INVALID_OBJECT;
 333              	 .loc 1 2220 0
 334 0024 0920     	 movs r0,#9
 335              	.LVL43:
2228:fatfs/ff.c    **** }
 336              	 .loc 1 2228 0
 337 0026 08BD     	 pop {r3,pc}
 338              	.L45:
 339              	 .align 2
 340              	.L44:
 341 0028 00000000 	 .word disk_status
 342              	 .cfi_endproc
 343              	.LFE24:
 345              	 .section .text.ld_clust.isra.0,"ax",%progbits
 346              	 .align 1
 347              	 .syntax unified
 348              	 .thumb
 349              	 .thumb_func
 350              	 .fpu softvfp
 352              	ld_clust.isra.0:
 353              	.LFB42:
1183:fatfs/ff.c    **** 	FATFS *fs,	/* Pointer to the fs object */
 354              	 .loc 1 1183 0
 355              	 .cfi_startproc
 356              	 
 357              	 
 358              	 
 359              	.LVL44:
1190:fatfs/ff.c    **** 	if (fs->fs_type == FS_FAT32)
 360              	 .loc 1 1190 0
 361 0000 CA7E     	 ldrb r2,[r1,#27]
 362 0002 8B7E     	 ldrb r3,[r1,#26]
1191:fatfs/ff.c    **** 		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 363              	 .loc 1 1191 0
 364 0004 0328     	 cmp r0,#3
1190:fatfs/ff.c    **** 	if (fs->fs_type == FS_FAT32)
 365              	 .loc 1 1190 0
 366 0006 43EA0223 	 orr r3,r3,r2,lsl#8
 367              	.LVL45:
1192:fatfs/ff.c    **** 
 368              	 .loc 1 1192 0
 369 000a 01BF     	 itttt eq
 370 000c 487D     	 ldrbeq r0,[r1,#21]
 371 000e 0A7D     	 ldrbeq r2,[r1,#20]
 372 0010 42EA0022 	 orreq r2,r2,r0,lsl#8
 373 0014 43EA0243 	 orreq r3,r3,r2,lsl#16
 374              	.LVL46:
1195:fatfs/ff.c    **** 
 375              	 .loc 1 1195 0
 376 0018 1846     	 mov r0,r3
 377 001a 7047     	 bx lr
 378              	 .cfi_endproc
 379              	.LFE42:
 381              	 .section .text.check_fs,"ax",%progbits
 382              	 .align 1
 383              	 .syntax unified
 384              	 .thumb
 385              	 .thumb_func
 386              	 .fpu softvfp
 388              	check_fs:
 389              	.LFB22:
2021:fatfs/ff.c    **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 390              	 .loc 1 2021 0
 391              	 .cfi_startproc
 392              	 
 393              	 
 394              	.LVL47:
 395 0000 38B5     	 push {r3,r4,r5,lr}
 396              	 .cfi_def_cfa_offset 16
 397              	 .cfi_offset 3,-16
 398              	 .cfi_offset 4,-12
 399              	 .cfi_offset 5,-8
 400              	 .cfi_offset 14,-4
2022:fatfs/ff.c    **** 		return 3;
 401              	 .loc 1 2022 0
 402 0002 0A46     	 mov r2,r1
2021:fatfs/ff.c    **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 403              	 .loc 1 2021 0
 404 0004 0446     	 mov r4,r0
2022:fatfs/ff.c    **** 		return 3;
 405              	 .loc 1 2022 0
 406 0006 00F12E01 	 add r1,r0,#46
 407              	.LVL48:
 408 000a 0123     	 movs r3,#1
 409 000c 4078     	 ldrb r0,[r0,#1]
 410              	.LVL49:
 411 000e 0F4D     	 ldr r5,.L53
 412 0010 A847     	 blx r5
 413              	.LVL50:
 414 0012 B8B9     	 cbnz r0,.L50
2024:fatfs/ff.c    **** 		return 2;
 415              	 .loc 1 2024 0
 416 0014 94F82D22 	 ldrb r2,[r4,#557]
 417 0018 94F82C32 	 ldrb r3,[r4,#556]
 418 001c 43EA0223 	 orr r3,r3,r2,lsl#8
 419 0020 4AF65522 	 movw r2,#43605
 420 0024 9342     	 cmp r3,r2
 421 0026 0FD1     	 bne .L51
2027:fatfs/ff.c    **** 		return 0;
 422              	 .loc 1 2027 0
 423 0028 636E     	 ldr r3,[r4,#100]
 424 002a 094A     	 ldr r2,.L53+4
 425 002c 23F07F43 	 bic r3,r3,#-16777216
 426 0030 9342     	 cmp r3,r2
 427 0032 0AD0     	 beq .L49
 428              	.LVL51:
 429              	.LBB8:
 430              	.LBB9:
2029:fatfs/ff.c    **** 		return 0;
 431              	 .loc 1 2029 0
 432 0034 D4F88000 	 ldr r0,[r4,#128]
 433 0038 20F07F40 	 bic r0,r0,#-16777216
 434              	.LBE9:
 435              	.LBE8:
2023:fatfs/ff.c    **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 436              	 .loc 1 2023 0
 437 003c 801A     	 subs r0,r0,r2
 438 003e 18BF     	 it ne
 439 0040 0120     	 movne r0,#1
 440 0042 38BD     	 pop {r3,r4,r5,pc}
 441              	.LVL52:
 442              	.L50:
 443 0044 0320     	 movs r0,#3
 444 0046 38BD     	 pop {r3,r4,r5,pc}
 445              	.LVL53:
 446              	.L51:
2025:fatfs/ff.c    **** 
 447              	 .loc 1 2025 0
 448 0048 0220     	 movs r0,#2
 449              	.L49:
2033:fatfs/ff.c    **** 
 450              	 .loc 1 2033 0
 451 004a 38BD     	 pop {r3,r4,r5,pc}
 452              	.LVL54:
 453              	.L54:
 454              	 .align 2
 455              	.L53:
 456 004c 00000000 	 .word disk_read
 457 0050 46415400 	 .word 5521734
 458              	 .cfi_endproc
 459              	.LFE22:
 461              	 .section .text.chk_mounted,"ax",%progbits
 462              	 .align 1
 463              	 .syntax unified
 464              	 .thumb
 465              	 .thumb_func
 466              	 .fpu softvfp
 468              	chk_mounted:
 469              	.LFB23:
2048:fatfs/ff.c    **** 	BYTE fmt, b, pi, *tbl;
 470              	 .loc 1 2048 0
 471              	 .cfi_startproc
 472              	 
 473              	 
 474              	.LVL55:
 475 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 476              	 .cfi_def_cfa_offset 24
 477              	 .cfi_offset 3,-24
 478              	 .cfi_offset 4,-20
 479              	 .cfi_offset 5,-16
 480              	 .cfi_offset 6,-12
 481              	 .cfi_offset 7,-8
 482              	 .cfi_offset 14,-4
2054:fatfs/ff.c    **** 	FATFS *fs;
 483              	 .loc 1 2054 0
 484 0002 0368     	 ldr r3,[r0]
 485              	.LVL56:
2048:fatfs/ff.c    **** 	BYTE fmt, b, pi, *tbl;
 486              	 .loc 1 2048 0
 487 0004 1646     	 mov r6,r2
2059:fatfs/ff.c    **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 488              	 .loc 1 2059 0
 489 0006 1D78     	 ldrb r5,[r3]
 490 0008 303D     	 subs r5,r5,#48
 491              	.LVL57:
2060:fatfs/ff.c    **** 		p += 2; *path = p;				/* Return pointer to the path name */
 492              	 .loc 1 2060 0
 493 000a 092D     	 cmp r5,#9
 494 000c 1ED8     	 bhi .L75
2060:fatfs/ff.c    **** 		p += 2; *path = p;				/* Return pointer to the path name */
 495              	 .loc 1 2060 0 is_stmt 0 discriminator 1
 496 000e 5A78     	 ldrb r2,[r3,#1]
 497              	.LVL58:
 498 0010 3A2A     	 cmp r2,#58
 499 0012 1BD1     	 bne .L75
 500              	.LVL59:
2061:fatfs/ff.c    **** 	} else {							/* No drive number is given */
 501              	 .loc 1 2061 0 is_stmt 1
 502 0014 0233     	 adds r3,r3,#2
 503              	.LVL60:
 504 0016 0360     	 str r3,[r0]
 505              	.LVL61:
 506              	.L56:
2071:fatfs/ff.c    **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 507              	 .loc 1 2071 0
 508 0018 0023     	 movs r3,#0
 509              	.LVL62:
 510 001a 0B60     	 str r3,[r1]
2072:fatfs/ff.c    **** 		return FR_INVALID_DRIVE;
 511              	 .loc 1 2072 0
 512 001c 002D     	 cmp r5,#0
 513 001e 40F00981 	 bne .L76
 514              	.LVL63:
2074:fatfs/ff.c    **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 515              	 .loc 1 2074 0
 516 0022 8A4B     	 ldr r3,.L103
 517 0024 1C68     	 ldr r4,[r3]
 518              	.LVL64:
2075:fatfs/ff.c    **** 
 519              	 .loc 1 2075 0
 520 0026 002C     	 cmp r4,#0
 521 0028 00F00681 	 beq .L77
2079:fatfs/ff.c    **** 	if (fs->fs_type) {					/* If the volume has been mounted */
 522              	 .loc 1 2079 0
 523 002c 0C60     	 str r4,[r1]
2080:fatfs/ff.c    **** 		stat = disk_status(fs->drv);
 524              	 .loc 1 2080 0
 525 002e 2378     	 ldrb r3,[r4]
 526 0030 73B1     	 cbz r3,.L58
2081:fatfs/ff.c    **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
 527              	 .loc 1 2081 0
 528 0032 6078     	 ldrb r0,[r4,#1]
 529              	.LVL65:
 530 0034 864B     	 ldr r3,.L103+4
 531 0036 9847     	 blx r3
 532              	.LVL66:
2082:fatfs/ff.c    **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 533              	 .loc 1 2082 0
 534 0038 C707     	 lsls r7,r0,#31
 535 003a 09D4     	 bmi .L58
2083:fatfs/ff.c    **** 				return FR_WRITE_PROTECTED;
 536              	 .loc 1 2083 0
 537 003c 002E     	 cmp r6,#0
 538 003e 00F0FD80 	 beq .L78
2083:fatfs/ff.c    **** 				return FR_WRITE_PROTECTED;
 539              	 .loc 1 2083 0 is_stmt 0 discriminator 1
 540 0042 4107     	 lsls r1,r0,#29
 541 0044 40F1FC80 	 bpl .L79
 542              	.L60:
2084:fatfs/ff.c    **** 			return FR_OK;				/* The file system object is valid */
 543              	 .loc 1 2084 0 is_stmt 1
 544 0048 0A20     	 movs r0,#10
 545              	.LVL67:
 546 004a F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 547              	.LVL68:
 548              	.L75:
2066:fatfs/ff.c    **** #endif
 549              	 .loc 1 2066 0
 550 004c 0025     	 movs r5,#0
 551              	.LVL69:
 552 004e E3E7     	 b .L56
 553              	.LVL70:
 554              	.L58:
2092:fatfs/ff.c    **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 555              	 .loc 1 2092 0
 556 0050 0020     	 movs r0,#0
2094:fatfs/ff.c    **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 557              	 .loc 1 2094 0
 558 0052 804B     	 ldr r3,.L103+8
2092:fatfs/ff.c    **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 559              	 .loc 1 2092 0
 560 0054 2070     	 strb r0,[r4]
2093:fatfs/ff.c    **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 561              	 .loc 1 2093 0
 562 0056 6070     	 strb r0,[r4,#1]
2094:fatfs/ff.c    **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 563              	 .loc 1 2094 0
 564 0058 9847     	 blx r3
 565              	.LVL71:
2095:fatfs/ff.c    **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 566              	 .loc 1 2095 0
 567 005a C207     	 lsls r2,r0,#31
 568 005c 00F1F280 	 bmi .L80
2097:fatfs/ff.c    **** 		return FR_WRITE_PROTECTED;
 569              	 .loc 1 2097 0
 570 0060 0EB1     	 cbz r6,.L59
2097:fatfs/ff.c    **** 		return FR_WRITE_PROTECTED;
 571              	 .loc 1 2097 0 is_stmt 0 discriminator 1
 572 0062 4307     	 lsls r3,r0,#29
 573 0064 F0D4     	 bmi .L60
 574              	.L59:
 575              	.LVL72:
2104:fatfs/ff.c    **** 	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
 576              	 .loc 1 2104 0 is_stmt 1
 577 0066 0021     	 movs r1,#0
 578 0068 2046     	 mov r0,r4
 579              	.LVL73:
 580 006a 7B4E     	 ldr r6,.L103+12
 581 006c B047     	 blx r6
 582              	.LVL74:
2106:fatfs/ff.c    **** 		/* Check the partition listed in the partition table */
 583              	 .loc 1 2106 0
 584 006e 0128     	 cmp r0,#1
 585 0070 40F0CA80 	 bne .L81
 586              	.LVL75:
2112:fatfs/ff.c    **** 			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 587              	 .loc 1 2112 0
 588 0074 94F8F031 	 ldrb r3,[r4,#496]
 589 0078 0BB9     	 cbnz r3,.L62
 590              	.LVL76:
 591              	.L63:
2118:fatfs/ff.c    **** 
 592              	 .loc 1 2118 0
 593 007a 0D20     	 movs r0,#13
 594 007c F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 595              	.LVL77:
 596              	.L62:
2113:fatfs/ff.c    **** 			fmt = check_fs(fs, bsect);		/* Check the partition */
 597              	 .loc 1 2113 0
 598 007e D4F8F451 	 ldr r5,[r4,#500]
 599              	.LVL78:
2114:fatfs/ff.c    **** 		}
 600              	 .loc 1 2114 0
 601 0082 2046     	 mov r0,r4
 602              	.LVL79:
 603 0084 2946     	 mov r1,r5
 604 0086 B047     	 blx r6
 605              	.LVL80:
 606              	.L61:
2117:fatfs/ff.c    **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 607              	 .loc 1 2117 0
 608 0088 0328     	 cmp r0,#3
 609 008a 00F0DD80 	 beq .L82
2118:fatfs/ff.c    **** 
 610              	 .loc 1 2118 0
 611 008e 0028     	 cmp r0,#0
 612 0090 F3D1     	 bne .L63
2122:fatfs/ff.c    **** 		return FR_NO_FILESYSTEM;
 613              	 .loc 1 2122 0
 614 0092 94F83A20 	 ldrb r2,[r4,#58]
 615 0096 94F83930 	 ldrb r3,[r4,#57]
 616 009a 43EA0223 	 orr r3,r3,r2,lsl#8
 617 009e B3F5007F 	 cmp r3,#512
 618 00a2 EAD1     	 bne .L63
2125:fatfs/ff.c    **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 619              	 .loc 1 2125 0
 620 00a4 94F84530 	 ldrb r3,[r4,#69]
 621 00a8 94F84420 	 ldrb r2,[r4,#68]
 622              	.LVL81:
2129:fatfs/ff.c    **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 623              	 .loc 1 2129 0
 624 00ac 94F83E10 	 ldrb r1,[r4,#62]
2126:fatfs/ff.c    **** 	fs->fsize = fasize;
 625              	 .loc 1 2126 0
 626 00b0 52EA0322 	 orrs r2,r2,r3,lsl#8
 627              	.LVL82:
 628 00b4 08BF     	 it eq
 629 00b6 D4F85220 	 ldreq r2,[r4,#82]
 630              	.LVL83:
2130:fatfs/ff.c    **** 	fasize *= b;										/* Number of sectors for FAT area */
 631              	 .loc 1 2130 0
 632 00ba 4B1E     	 subs r3,r1,#1
 633 00bc 012B     	 cmp r3,#1
2127:fatfs/ff.c    **** 
 634              	 .loc 1 2127 0
 635 00be C4F81A20 	 str r2,[r4,#26]
2129:fatfs/ff.c    **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 636              	 .loc 1 2129 0
 637 00c2 E170     	 strb r1,[r4,#3]
2130:fatfs/ff.c    **** 	fasize *= b;										/* Number of sectors for FAT area */
 638              	 .loc 1 2130 0
 639 00c4 D9D8     	 bhi .L63
 640              	.LVL84:
2133:fatfs/ff.c    **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 641              	 .loc 1 2133 0
 642 00c6 94F83B60 	 ldrb r6,[r4,#59]
 643              	.LVL85:
 644 00ca A670     	 strb r6,[r4,#2]
2134:fatfs/ff.c    **** 
 645              	 .loc 1 2134 0
 646 00cc 002E     	 cmp r6,#0
 647 00ce D4D0     	 beq .L63
2134:fatfs/ff.c    **** 
 648              	 .loc 1 2134 0 is_stmt 0 discriminator 2
 649 00d0 731E     	 subs r3,r6,#1
 650 00d2 3342     	 tst r3,r6
 651 00d4 D1D1     	 bne .L63
2136:fatfs/ff.c    **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
 652              	 .loc 1 2136 0 is_stmt 1
 653 00d6 94F84030 	 ldrb r3,[r4,#64]
 654 00da 94F83FE0 	 ldrb lr,[r4,#63]
 655 00de 4EEA032E 	 orr lr,lr,r3,lsl#8
2137:fatfs/ff.c    **** 
 656              	 .loc 1 2137 0
 657 00e2 1EF00F0F 	 tst lr,#15
2136:fatfs/ff.c    **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
 658              	 .loc 1 2136 0
 659 00e6 A4F808E0 	 strh lr,[r4,#8]
2137:fatfs/ff.c    **** 
 660              	 .loc 1 2137 0
 661 00ea C6D1     	 bne .L63
2139:fatfs/ff.c    **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 662              	 .loc 1 2139 0
 663 00ec 94F84200 	 ldrb r0,[r4,#66]
 664              	.LVL86:
 665 00f0 94F84130 	 ldrb r3,[r4,#65]
 666              	.LVL87:
2142:fatfs/ff.c    **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 667              	 .loc 1 2142 0
 668 00f4 94F83D70 	 ldrb r7,[r4,#61]
2140:fatfs/ff.c    **** 
 669              	 .loc 1 2140 0
 670 00f8 53EA0023 	 orrs r3,r3,r0,lsl#8
 671              	.LVL88:
2142:fatfs/ff.c    **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 672              	 .loc 1 2142 0
 673 00fc 94F83C00 	 ldrb r0,[r4,#60]
2140:fatfs/ff.c    **** 
 674              	 .loc 1 2140 0
 675 0100 08BF     	 it eq
 676 0102 D4F84E30 	 ldreq r3,[r4,#78]
 677              	.LVL89:
2143:fatfs/ff.c    **** 
 678              	 .loc 1 2143 0
 679 0106 50EA0727 	 orrs r7,r0,r7,lsl#8
 680              	.LVL90:
 681 010a B6D0     	 beq .L63
2131:fatfs/ff.c    **** 
 682              	 .loc 1 2131 0
 683 010c 5143     	 muls r1,r2,r1
 684              	.LVL91:
2146:fatfs/ff.c    **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 685              	 .loc 1 2146 0
 686 010e 07EB1E10 	 add r0,r7,lr,lsr#4
 687              	.LVL92:
 688 0112 0844     	 add r0,r0,r1
 689              	.LVL93:
2147:fatfs/ff.c    **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 690              	 .loc 1 2147 0
 691 0114 8342     	 cmp r3,r0
 692 0116 B0D3     	 bcc .L63
2148:fatfs/ff.c    **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 693              	 .loc 1 2148 0
 694 0118 1B1A     	 subs r3,r3,r0
 695              	.LVL94:
 696 011a B3FBF6F3 	 udiv r3,r3,r6
 697              	.LVL95:
2149:fatfs/ff.c    **** 	fmt = FS_FAT12;
 698              	 .loc 1 2149 0
 699 011e 002B     	 cmp r3,#0
 700 0120 ABD0     	 beq .L63
 701              	.LVL96:
2151:fatfs/ff.c    **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 702              	 .loc 1 2151 0
 703 0122 40F6F576 	 movw r6,#4085
 704              	.LVL97:
 705 0126 B342     	 cmp r3,r6
 706 0128 70D9     	 bls .L83
 707              	.LVL98:
 708 012a 4FF6F576 	 movw r6,#65525
 709 012e B342     	 cmp r3,r6
 710 0130 8CBF     	 ite hi
 711 0132 0326     	 movhi r6,#3
 712 0134 0226     	 movls r6,#2
 713              	.LVL99:
 714              	.L67:
2156:fatfs/ff.c    **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 715              	 .loc 1 2156 0
 716 0136 2844     	 add r0,r0,r5
 717              	.LVL100:
2155:fatfs/ff.c    **** 	fs->database = bsect + sysect;						/* Data start sector */
 718              	 .loc 1 2155 0
 719 0138 0233     	 adds r3,r3,#2
 720              	.LVL101:
2156:fatfs/ff.c    **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 721              	 .loc 1 2156 0
 722 013a C4F82600 	 str r0,[r4,#38]
2158:fatfs/ff.c    **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 723              	 .loc 1 2158 0
 724 013e 032E     	 cmp r6,#3
2157:fatfs/ff.c    **** 	if (fmt == FS_FAT32) {
 725              	 .loc 1 2157 0
 726 0140 05EB0700 	 add r0,r5,r7
2155:fatfs/ff.c    **** 	fs->database = bsect + sysect;						/* Data start sector */
 727              	 .loc 1 2155 0
 728 0144 C4F81630 	 str r3,[r4,#22]
2157:fatfs/ff.c    **** 	if (fmt == FS_FAT32) {
 729              	 .loc 1 2157 0
 730 0148 C4F81E00 	 str r0,[r4,#30]
2158:fatfs/ff.c    **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 731              	 .loc 1 2158 0
 732 014c 60D1     	 bne .L68
 733              	.LVL102:
2159:fatfs/ff.c    **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 734              	 .loc 1 2159 0
 735 014e BEF1000F 	 cmp lr,#0
 736 0152 92D1     	 bne .L63
2160:fatfs/ff.c    **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 737              	 .loc 1 2160 0
 738 0154 D4F85A10 	 ldr r1,[r4,#90]
 739              	.LVL103:
2161:fatfs/ff.c    **** 	} else {
 740              	 .loc 1 2161 0
 741 0158 9B00     	 lsls r3,r3,#2
 742              	.LVL104:
2160:fatfs/ff.c    **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 743              	 .loc 1 2160 0
 744 015a C4F82210 	 str r1,[r4,#34]
 745              	.LVL105:
 746              	.L69:
2168:fatfs/ff.c    **** 		return FR_NO_FILESYSTEM;
 747              	 .loc 1 2168 0
 748 015e 03F2FF13 	 addw r3,r3,#511
 749              	.LVL106:
 750 0162 B2EB532F 	 cmp r2,r3,lsr#9
 751 0166 88D3     	 bcc .L63
2173:fatfs/ff.c    **** 	fs->last_clust = 0;
 752              	 .loc 1 2173 0
 753 0168 4FF0FF33 	 mov r3,#-1
 754              	.LVL107:
 755 016c A373     	 strb r3,[r4,#14]
 756 016e E373     	 strb r3,[r4,#15]
 757 0170 2374     	 strb r3,[r4,#16]
 758 0172 6374     	 strb r3,[r4,#17]
2174:fatfs/ff.c    **** 
 759              	 .loc 1 2174 0
 760 0174 0023     	 movs r3,#0
2177:fatfs/ff.c    **** 	 	fs->fsi_flag = 0;
 761              	 .loc 1 2177 0
 762 0176 032E     	 cmp r6,#3
2174:fatfs/ff.c    **** 
 763              	 .loc 1 2174 0
 764 0178 A372     	 strb r3,[r4,#10]
 765 017a E372     	 strb r3,[r4,#11]
 766 017c 2373     	 strb r3,[r4,#12]
 767 017e 6373     	 strb r3,[r4,#13]
2177:fatfs/ff.c    **** 	 	fs->fsi_flag = 0;
 768              	 .loc 1 2177 0
 769 0180 30D1     	 bne .L72
2178:fatfs/ff.c    **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 770              	 .loc 1 2178 0
 771 0182 6371     	 strb r3,[r4,#5]
2179:fatfs/ff.c    **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 772              	 .loc 1 2179 0
 773 0184 94F85E20 	 ldrb r2,[r4,#94]
 774              	.LVL108:
 775 0188 94F85F30 	 ldrb r3,[r4,#95]
2180:fatfs/ff.c    **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 776              	 .loc 1 2180 0
 777 018c 04F12E01 	 add r1,r4,#46
2179:fatfs/ff.c    **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 778              	 .loc 1 2179 0
 779 0190 42EA0322 	 orr r2,r2,r3,lsl#8
 780 0194 2A44     	 add r2,r2,r5
 781 0196 C4F81220 	 str r2,[r4,#18]
2180:fatfs/ff.c    **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 782              	 .loc 1 2180 0
 783 019a 0123     	 movs r3,#1
 784 019c 6078     	 ldrb r0,[r4,#1]
 785 019e 2F4D     	 ldr r5,.L103+16
 786              	.LVL109:
 787 01a0 A847     	 blx r5
 788              	.LVL110:
 789 01a2 F8B9     	 cbnz r0,.L72
2181:fatfs/ff.c    **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 790              	 .loc 1 2181 0 discriminator 1
 791 01a4 94F82D22 	 ldrb r2,[r4,#557]
 792 01a8 94F82C32 	 ldrb r3,[r4,#556]
 793 01ac 43EA0223 	 orr r3,r3,r2,lsl#8
2180:fatfs/ff.c    **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 794              	 .loc 1 2180 0 discriminator 1
 795 01b0 4AF65522 	 movw r2,#43605
 796 01b4 9342     	 cmp r3,r2
 797 01b6 15D1     	 bne .L72
2182:fatfs/ff.c    **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 798              	 .loc 1 2182 0
 799 01b8 D4F82E20 	 ldr r2,[r4,#46]
2181:fatfs/ff.c    **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 800              	 .loc 1 2181 0
 801 01bc 284B     	 ldr r3,.L103+20
 802 01be 9A42     	 cmp r2,r3
 803 01c0 10D1     	 bne .L72
2182:fatfs/ff.c    **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 804              	 .loc 1 2182 0
 805 01c2 03F1FF53 	 add r3,r3,#534773760
2183:fatfs/ff.c    **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 806              	 .loc 1 2183 0
 807 01c6 D4F81222 	 ldr r2,[r4,#530]
2182:fatfs/ff.c    **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 808              	 .loc 1 2182 0
 809 01ca 03F50053 	 add r3,r3,#8192
 810 01ce 2033     	 adds r3,r3,#32
 811 01d0 9A42     	 cmp r2,r3
2184:fatfs/ff.c    **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 812              	 .loc 1 2184 0
 813 01d2 01BF     	 itttt eq
 814 01d4 D4F81A32 	 ldreq r3,[r4,#538]
 815 01d8 C4F80A30 	 streq r3,[r4,#10]
2185:fatfs/ff.c    **** 		}
 816              	 .loc 1 2185 0
 817 01dc D4F81632 	 ldreq r3,[r4,#534]
 818 01e0 C4F80E30 	 streq r3,[r4,#14]
 819              	.L72:
2191:fatfs/ff.c    **** 	fs->wflag = 0;
 820              	 .loc 1 2191 0
 821 01e4 0020     	 movs r0,#0
2190:fatfs/ff.c    **** 	fs->winsect = 0;		/* Invalidate sector cache */
 822              	 .loc 1 2190 0
 823 01e6 1F4A     	 ldr r2,.L103+24
2189:fatfs/ff.c    **** 	fs->id = ++Fsid;		/* File system mount ID */
 824              	 .loc 1 2189 0
 825 01e8 2670     	 strb r6,[r4]
2190:fatfs/ff.c    **** 	fs->winsect = 0;		/* Invalidate sector cache */
 826              	 .loc 1 2190 0
 827 01ea 1388     	 ldrh r3,[r2]
2192:fatfs/ff.c    **** #if _FS_RPATH
 828              	 .loc 1 2192 0
 829 01ec 2071     	 strb r0,[r4,#4]
2190:fatfs/ff.c    **** 	fs->winsect = 0;		/* Invalidate sector cache */
 830              	 .loc 1 2190 0
 831 01ee 0133     	 adds r3,r3,#1
 832 01f0 9BB2     	 uxth r3,r3
 833 01f2 1380     	 strh r3,[r2]
 834 01f4 E380     	 strh r3,[r4,#6]
2191:fatfs/ff.c    **** 	fs->wflag = 0;
 835              	 .loc 1 2191 0
 836 01f6 84F82A00 	 strb r0,[r4,#42]
 837 01fa 84F82B00 	 strb r0,[r4,#43]
 838 01fe 84F82C00 	 strb r0,[r4,#44]
 839 0202 84F82D00 	 strb r0,[r4,#45]
2200:fatfs/ff.c    **** }
 840              	 .loc 1 2200 0
 841 0206 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 842              	.LVL111:
 843              	.L81:
2104:fatfs/ff.c    **** 	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
 844              	 .loc 1 2104 0
 845 0208 0025     	 movs r5,#0
 846 020a 3DE7     	 b .L61
 847              	.LVL112:
 848              	.L83:
2150:fatfs/ff.c    **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 849              	 .loc 1 2150 0
 850 020c 0126     	 movs r6,#1
 851 020e 92E7     	 b .L67
 852              	.LVL113:
 853              	.L68:
2163:fatfs/ff.c    **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 854              	 .loc 1 2163 0
 855 0210 BEF1000F 	 cmp lr,#0
 856 0214 3FF431AF 	 beq .L63
2164:fatfs/ff.c    **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 857              	 .loc 1 2164 0
 858 0218 0144     	 add r1,r1,r0
 859              	.LVL114:
2166:fatfs/ff.c    **** 	}
 860              	 .loc 1 2166 0
 861 021a 022E     	 cmp r6,#2
2164:fatfs/ff.c    **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 862              	 .loc 1 2164 0
 863 021c C4F82210 	 str r1,[r4,#34]
 864 0220 4FEA4301 	 lsl r1,r3,#1
2166:fatfs/ff.c    **** 	}
 865              	 .loc 1 2166 0
 866 0224 1BBF     	 ittet ne
 867 0226 C918     	 addne r1,r1,r3
 868 0228 03F00103 	 andne r3,r3,#1
 869              	.LVL115:
 870 022c 0B46     	 moveq r3,r1
 871 022e 03EB5103 	 addne r3,r3,r1,lsr#1
 872 0232 94E7     	 b .L69
 873              	.LVL116:
 874              	.L76:
2073:fatfs/ff.c    **** 	fs = FatFs[vol];					/* Get corresponding file system object */
 875              	 .loc 1 2073 0
 876 0234 0B20     	 movs r0,#11
 877              	.LVL117:
 878 0236 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 879              	.LVL118:
 880              	.L77:
2075:fatfs/ff.c    **** 
 881              	 .loc 1 2075 0
 882 0238 0C20     	 movs r0,#12
 883              	.LVL119:
 884 023a F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 885              	.LVL120:
 886              	.L78:
2085:fatfs/ff.c    **** 		}
 887              	 .loc 1 2085 0
 888 023c 3046     	 mov r0,r6
 889              	.LVL121:
 890 023e F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 891              	.LVL122:
 892              	.L79:
 893 0240 2846     	 mov r0,r5
 894              	.LVL123:
 895 0242 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 896              	.LVL124:
 897              	.L80:
2096:fatfs/ff.c    **** 	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 898              	 .loc 1 2096 0
 899 0244 0320     	 movs r0,#3
 900              	.LVL125:
 901 0246 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 902              	.LVL126:
 903              	.L82:
2117:fatfs/ff.c    **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 904              	 .loc 1 2117 0
 905 0248 0120     	 movs r0,#1
 906              	.LVL127:
2201:fatfs/ff.c    **** 
 907              	 .loc 1 2201 0
 908 024a F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 909              	.LVL128:
 910              	.L104:
 911              	 .align 2
 912              	.L103:
 913 024c 00000000 	 .word .LANCHOR0
 914 0250 00000000 	 .word disk_status
 915 0254 00000000 	 .word disk_initialize
 916 0258 00000000 	 .word check_fs
 917 025c 00000000 	 .word disk_read
 918 0260 52526141 	 .word 1096897106
 919 0264 00000000 	 .word .LANCHOR1
 920              	 .cfi_endproc
 921              	.LFE23:
 923              	 .section .text.sync,"ax",%progbits
 924              	 .align 1
 925              	 .syntax unified
 926              	 .thumb
 927              	 .thumb_func
 928              	 .fpu softvfp
 930              	sync:
 931              	.LFB5:
 766:fatfs/ff.c    **** 	FRESULT res;
 932              	 .loc 1 766 0
 933              	 .cfi_startproc
 934              	 
 935              	 
 936              	.LVL129:
 937 0000 38B5     	 push {r3,r4,r5,lr}
 938              	 .cfi_def_cfa_offset 16
 939              	 .cfi_offset 3,-16
 940              	 .cfi_offset 4,-12
 941              	 .cfi_offset 5,-8
 942              	 .cfi_offset 14,-4
 770:fatfs/ff.c    **** 	if (res == FR_OK) {
 943              	 .loc 1 770 0
 944 0002 0021     	 movs r1,#0
 945 0004 324B     	 ldr r3,.L113
 766:fatfs/ff.c    **** 	FRESULT res;
 946              	 .loc 1 766 0
 947 0006 0446     	 mov r4,r0
 770:fatfs/ff.c    **** 	if (res == FR_OK) {
 948              	 .loc 1 770 0
 949 0008 9847     	 blx r3
 950              	.LVL130:
 951 000a 0346     	 mov r3,r0
 952              	.LVL131:
 771:fatfs/ff.c    **** 		/* Update FSInfo sector if needed */
 953              	 .loc 1 771 0
 954 000c 0028     	 cmp r0,#0
 955 000e 5AD1     	 bne .L106
 773:fatfs/ff.c    **** 			fs->winsect = 0;
 956              	 .loc 1 773 0
 957 0010 2278     	 ldrb r2,[r4]
 958 0012 032A     	 cmp r2,#3
 959 0014 4FD1     	 bne .L107
 773:fatfs/ff.c    **** 			fs->winsect = 0;
 960              	 .loc 1 773 0 is_stmt 0 discriminator 1
 961 0016 6279     	 ldrb r2,[r4,#5]
 962 0018 002A     	 cmp r2,#0
 963 001a 4CD0     	 beq .L107
 776:fatfs/ff.c    **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 964              	 .loc 1 776 0 is_stmt 1
 965 001c 04F12E01 	 add r1,r4,#46
 966              	.LVL132:
 967              	.LBB12:
 968              	.LBB13:
 548:fatfs/ff.c    **** 
 969              	 .loc 1 548 0
 970 0020 0A46     	 mov r2,r1
 971              	.LBE13:
 972              	.LBE12:
 774:fatfs/ff.c    **** 			/* Create FSInfo structure */
 973              	 .loc 1 774 0
 974 0022 84F82A00 	 strb r0,[r4,#42]
 975 0026 84F82B00 	 strb r0,[r4,#43]
 976 002a 84F82C00 	 strb r0,[r4,#44]
 977 002e 84F82D00 	 strb r0,[r4,#45]
 978 0032 04F22E20 	 addw r0,r4,#558
 979              	.LVL133:
 980              	.L108:
 981              	.LBB16:
 982              	.LBB14:
 550:fatfs/ff.c    **** 		*d++ = (BYTE)val;
 983              	 .loc 1 550 0
 984 0036 8242     	 cmp r2,r0
 985 0038 46D1     	 bne .L109
 986              	.LVL134:
 987              	.LBE14:
 988              	.LBE16:
 777:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 989              	 .loc 1 777 0
 990 003a 5523     	 movs r3,#85
 991 003c 84F82C32 	 strb r3,[r4,#556]
 992 0040 AA23     	 movs r3,#170
 993 0042 84F82D32 	 strb r3,[r4,#557]
 778:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 994              	 .loc 1 778 0
 995 0046 5223     	 movs r3,#82
 996 0048 84F82E30 	 strb r3,[r4,#46]
 997 004c 84F82F30 	 strb r3,[r4,#47]
 998 0050 6123     	 movs r3,#97
 999 0052 4122     	 movs r2,#65
 779:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1000              	 .loc 1 779 0
 1001 0054 7220     	 movs r0,#114
 778:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1002              	 .loc 1 778 0
 1003 0056 84F83030 	 strb r3,[r4,#48]
 779:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1004              	 .loc 1 779 0
 1005 005a 84F81532 	 strb r3,[r4,#533]
 780:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1006              	 .loc 1 780 0
 1007 005e D4F80E30 	 ldr r3,[r4,#14]
 778:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1008              	 .loc 1 778 0
 1009 0062 84F83120 	 strb r2,[r4,#49]
 779:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1010              	 .loc 1 779 0
 1011 0066 84F81422 	 strb r2,[r4,#532]
 780:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1012              	 .loc 1 780 0
 1013 006a C3F30722 	 ubfx r2,r3,#8,#8
 1014 006e 84F81632 	 strb r3,[r4,#534]
 1015 0072 84F81722 	 strb r2,[r4,#535]
 1016 0076 1A0C     	 lsrs r2,r3,#16
 1017 0078 1B0E     	 lsrs r3,r3,#24
 1018 007a 84F81932 	 strb r3,[r4,#537]
 781:fatfs/ff.c    **** 			/* Write it into the FSInfo sector */
 1019              	 .loc 1 781 0
 1020 007e D4F80A30 	 ldr r3,[r4,#10]
 780:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1021              	 .loc 1 780 0
 1022 0082 84F81822 	 strb r2,[r4,#536]
 781:fatfs/ff.c    **** 			/* Write it into the FSInfo sector */
 1023              	 .loc 1 781 0
 1024 0086 C3F30722 	 ubfx r2,r3,#8,#8
 1025 008a 84F81A32 	 strb r3,[r4,#538]
 1026 008e 84F81B22 	 strb r2,[r4,#539]
 1027 0092 1A0C     	 lsrs r2,r3,#16
 1028 0094 1B0E     	 lsrs r3,r3,#24
 779:fatfs/ff.c    **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1029              	 .loc 1 779 0
 1030 0096 84F81202 	 strb r0,[r4,#530]
 1031 009a 84F81302 	 strb r0,[r4,#531]
 781:fatfs/ff.c    **** 			/* Write it into the FSInfo sector */
 1032              	 .loc 1 781 0
 1033 009e 84F81C22 	 strb r2,[r4,#540]
 1034 00a2 84F81D32 	 strb r3,[r4,#541]
 783:fatfs/ff.c    **** 			fs->fsi_flag = 0;
 1035              	 .loc 1 783 0
 1036 00a6 D4F81220 	 ldr r2,[r4,#18]
 1037 00aa 0123     	 movs r3,#1
 1038 00ac 6078     	 ldrb r0,[r4,#1]
 1039 00ae 094D     	 ldr r5,.L113+4
 1040 00b0 A847     	 blx r5
 1041              	.LVL135:
 784:fatfs/ff.c    **** 		}
 1042              	 .loc 1 784 0
 1043 00b2 0023     	 movs r3,#0
 1044 00b4 6371     	 strb r3,[r4,#5]
 1045              	.L107:
 787:fatfs/ff.c    **** 			res = FR_DISK_ERR;
 1046              	 .loc 1 787 0
 1047 00b6 0022     	 movs r2,#0
 1048 00b8 6078     	 ldrb r0,[r4,#1]
 1049 00ba 1146     	 mov r1,r2
 1050 00bc 064B     	 ldr r3,.L113+8
 1051 00be 9847     	 blx r3
 1052              	.LVL136:
 1053 00c0 0030     	 adds r0,r0,#0
 1054 00c2 18BF     	 it ne
 1055 00c4 0120     	 movne r0,#1
 1056              	.L106:
 1057              	.LVL137:
 792:fatfs/ff.c    **** #endif
 1058              	 .loc 1 792 0
 1059 00c6 38BD     	 pop {r3,r4,r5,pc}
 1060              	.LVL138:
 1061              	.L109:
 1062              	.LBB17:
 1063              	.LBB15:
 551:fatfs/ff.c    **** }
 1064              	 .loc 1 551 0
 1065 00c8 02F8013B 	 strb r3,[r2],#1
 1066              	.LVL139:
 1067 00cc B3E7     	 b .L108
 1068              	.L114:
 1069 00ce 00BF     	 .align 2
 1070              	.L113:
 1071 00d0 00000000 	 .word move_window
 1072 00d4 00000000 	 .word disk_write
 1073 00d8 00000000 	 .word disk_ioctl
 1074              	.LBE15:
 1075              	.LBE17:
 1076              	 .cfi_endproc
 1077              	.LFE5:
 1079              	 .section .text.clust2sect,"ax",%progbits
 1080              	 .align 1
 1081              	 .global clust2sect
 1082              	 .syntax unified
 1083              	 .thumb
 1084              	 .thumb_func
 1085              	 .fpu softvfp
 1087              	clust2sect:
 1088              	.LFB6:
 807:fatfs/ff.c    **** 	clst -= 2;
 1089              	 .loc 1 807 0
 1090              	 .cfi_startproc
 1091              	 
 1092              	 
 1093              	 
 1094              	.LVL140:
 809:fatfs/ff.c    **** 	return clst * fs->csize + fs->database;
 1095              	 .loc 1 809 0
 1096 0000 D0F81630 	 ldr r3,[r0,#22]
 808:fatfs/ff.c    **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 1097              	 .loc 1 808 0
 1098 0004 0239     	 subs r1,r1,#2
 1099              	.LVL141:
 809:fatfs/ff.c    **** 	return clst * fs->csize + fs->database;
 1100              	 .loc 1 809 0
 1101 0006 023B     	 subs r3,r3,#2
 1102 0008 9942     	 cmp r1,r3
 810:fatfs/ff.c    **** }
 1103              	 .loc 1 810 0
 1104 000a 3DBF     	 ittte cc
 1105 000c 8378     	 ldrbcc r3,[r0,#2]
 1106 000e D0F82600 	 ldrcc r0,[r0,#38]
 1107              	.LVL142:
 1108 0012 01FB0300 	 mlacc r0,r1,r3,r0
 809:fatfs/ff.c    **** 	return clst * fs->csize + fs->database;
 1109              	 .loc 1 809 0
 1110 0016 0020     	 movcs r0,#0
 811:fatfs/ff.c    **** 
 1111              	 .loc 1 811 0
 1112 0018 7047     	 bx lr
 1113              	 .cfi_endproc
 1114              	.LFE6:
 1116              	 .section .text.get_fat,"ax",%progbits
 1117              	 .align 1
 1118              	 .global get_fat
 1119              	 .syntax unified
 1120              	 .thumb
 1121              	 .thumb_func
 1122              	 .fpu softvfp
 1124              	get_fat:
 1125              	.LFB7:
 825:fatfs/ff.c    **** 	UINT wc, bc;
 1126              	 .loc 1 825 0
 1127              	 .cfi_startproc
 1128              	 
 1129              	 
 1130              	.LVL143:
 830:fatfs/ff.c    **** 		return 1;
 1131              	 .loc 1 830 0
 1132 0000 0129     	 cmp r1,#1
 825:fatfs/ff.c    **** 	UINT wc, bc;
 1133              	 .loc 1 825 0
 1134 0002 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 1135              	 .cfi_def_cfa_offset 24
 1136              	 .cfi_offset 4,-24
 1137              	 .cfi_offset 5,-20
 1138              	 .cfi_offset 6,-16
 1139              	 .cfi_offset 7,-12
 1140              	 .cfi_offset 8,-8
 1141              	 .cfi_offset 14,-4
 825:fatfs/ff.c    **** 	UINT wc, bc;
 1142              	 .loc 1 825 0
 1143 0006 0646     	 mov r6,r0
 1144 0008 0D46     	 mov r5,r1
 830:fatfs/ff.c    **** 		return 1;
 1145              	 .loc 1 830 0
 1146 000a 66D9     	 bls .L127
 830:fatfs/ff.c    **** 		return 1;
 1147              	 .loc 1 830 0 is_stmt 0 discriminator 1
 1148 000c D0F81630 	 ldr r3,[r0,#22]
 1149 0010 9942     	 cmp r1,r3
 1150 0012 62D2     	 bcs .L127
 1151              	.LVL144:
 1152              	.LBB20:
 1153              	.LBB21:
 833:fatfs/ff.c    **** 	case FS_FAT12 :
 1154              	 .loc 1 833 0 is_stmt 1
 1155 0014 0378     	 ldrb r3,[r0]
 1156 0016 022B     	 cmp r3,#2
 1157 0018 2DD0     	 beq .L120
 1158 001a 032B     	 cmp r3,#3
 1159 001c 3FD0     	 beq .L121
 1160 001e 012B     	 cmp r3,#1
 1161 0020 09D1     	 bne .L129
 1162              	.LVL145:
 835:fatfs/ff.c    **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1163              	 .loc 1 835 0
 1164 0022 01EB5107 	 add r7,r1,r1,lsr#1
 1165              	.LVL146:
 836:fatfs/ff.c    **** 		wc = fs->win[bc % SS(fs)]; bc++;
 1166              	 .loc 1 836 0
 1167 0026 D0F81E10 	 ldr r1,[r0,#30]
 1168              	.LVL147:
 1169 002a DFF8B480 	 ldr r8,.L130
 1170 002e 01EB5721 	 add r1,r1,r7,lsr#9
 1171 0032 C047     	 blx r8
 1172              	.LVL148:
 1173 0034 18B1     	 cbz r0,.L123
 1174              	.LVL149:
 1175              	.L129:
 853:fatfs/ff.c    **** }
 1176              	 .loc 1 853 0
 1177 0036 4FF0FF30 	 mov r0,#-1
 1178              	.LBE21:
 1179              	.LBE20:
 854:fatfs/ff.c    **** 
 1180              	 .loc 1 854 0
 1181 003a BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1182              	.LVL150:
 1183              	.L123:
 1184              	.LBB23:
 1185              	.LBB22:
 838:fatfs/ff.c    **** 		wc |= fs->win[bc % SS(fs)] << 8;
 1186              	 .loc 1 838 0
 1187 003e D6F81E10 	 ldr r1,[r6,#30]
 837:fatfs/ff.c    **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1188              	 .loc 1 837 0
 1189 0042 C7F30803 	 ubfx r3,r7,#0,#9
 1190 0046 0137     	 adds r7,r7,#1
 1191              	.LVL151:
 1192 0048 3344     	 add r3,r3,r6
 838:fatfs/ff.c    **** 		wc |= fs->win[bc % SS(fs)] << 8;
 1193              	 .loc 1 838 0
 1194 004a 01EB5721 	 add r1,r1,r7,lsr#9
 1195 004e 3046     	 mov r0,r6
 837:fatfs/ff.c    **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1196              	 .loc 1 837 0
 1197 0050 93F82E40 	 ldrb r4,[r3,#46]
 1198              	.LVL152:
 838:fatfs/ff.c    **** 		wc |= fs->win[bc % SS(fs)] << 8;
 1199              	 .loc 1 838 0
 1200 0054 C047     	 blx r8
 1201              	.LVL153:
 1202 0056 0028     	 cmp r0,#0
 1203 0058 EDD1     	 bne .L129
 839:fatfs/ff.c    **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 1204              	 .loc 1 839 0
 1205 005a C7F30807 	 ubfx r7,r7,#0,#9
 1206              	.LVL154:
 1207 005e 3E44     	 add r6,r6,r7
 1208              	.LVL155:
 1209 0060 96F82E00 	 ldrb r0,[r6,#46]
 840:fatfs/ff.c    **** 
 1210              	 .loc 1 840 0
 1211 0064 EB07     	 lsls r3,r5,#31
 839:fatfs/ff.c    **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 1212              	 .loc 1 839 0
 1213 0066 44EA0020 	 orr r0,r4,r0,lsl#8
 1214              	.LVL156:
 840:fatfs/ff.c    **** 
 1215              	 .loc 1 840 0
 1216 006a 4CBF     	 ite mi
 1217 006c 0009     	 lsrmi r0,r0,#4
 1218              	.LVL157:
 1219 006e C0F30B00 	 ubfxpl r0,r0,#0,#12
 1220 0072 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1221              	.LVL158:
 1222              	.L120:
 843:fatfs/ff.c    **** 		p = &fs->win[clst * 2 % SS(fs)];
 1223              	 .loc 1 843 0
 1224 0076 D0F81E10 	 ldr r1,[r0,#30]
 1225              	.LVL159:
 1226 007a 194B     	 ldr r3,.L130
 1227 007c 01EB1521 	 add r1,r1,r5,lsr#8
 1228 0080 9847     	 blx r3
 1229              	.LVL160:
 1230 0082 0028     	 cmp r0,#0
 1231 0084 D7D1     	 bne .L129
 844:fatfs/ff.c    **** 		return LD_WORD(p);
 1232              	 .loc 1 844 0
 1233 0086 6D00     	 lsls r5,r5,#1
 1234              	.LVL161:
 1235 0088 05F4FF75 	 and r5,r5,#510
 1236              	.LVL162:
 845:fatfs/ff.c    **** 
 1237              	 .loc 1 845 0
 1238 008c 3544     	 add r5,r5,r6
 1239              	.LVL163:
 1240 008e 95F82F30 	 ldrb r3,[r5,#47]
 1241 0092 95F82E00 	 ldrb r0,[r5,#46]
 1242 0096 40EA0320 	 orr r0,r0,r3,lsl#8
 1243 009a BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1244              	.LVL164:
 1245              	.L121:
 848:fatfs/ff.c    **** 		p = &fs->win[clst * 4 % SS(fs)];
 1246              	 .loc 1 848 0
 1247 009e D0F81E10 	 ldr r1,[r0,#30]
 1248              	.LVL165:
 1249 00a2 0F4B     	 ldr r3,.L130
 1250 00a4 01EBD511 	 add r1,r1,r5,lsr#7
 1251 00a8 9847     	 blx r3
 1252              	.LVL166:
 1253 00aa 0028     	 cmp r0,#0
 1254 00ac C3D1     	 bne .L129
 849:fatfs/ff.c    **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 1255              	 .loc 1 849 0
 1256 00ae AD00     	 lsls r5,r5,#2
 1257              	.LVL167:
 1258 00b0 05F4FE75 	 and r5,r5,#508
 1259 00b4 05F12E03 	 add r3,r5,#46
 1260 00b8 3344     	 add r3,r3,r6
 1261              	.LVL168:
 850:fatfs/ff.c    **** 	}
 1262              	 .loc 1 850 0
 1263 00ba 9878     	 ldrb r0,[r3,#2]
 1264 00bc DA78     	 ldrb r2,[r3,#3]
 1265 00be 3544     	 add r5,r5,r6
 1266 00c0 0004     	 lsls r0,r0,#16
 1267 00c2 40EA0260 	 orr r0,r0,r2,lsl#24
 1268 00c6 95F82E20 	 ldrb r2,[r5,#46]
 1269 00ca 5B78     	 ldrb r3,[r3,#1]
 1270              	.LVL169:
 1271 00cc 1043     	 orrs r0,r0,r2
 1272 00ce 40EA0320 	 orr r0,r0,r3,lsl#8
 1273 00d2 20F07040 	 bic r0,r0,#-268435456
 1274 00d6 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1275              	.LVL170:
 1276              	.L127:
 1277              	.LBE22:
 1278              	.LBE23:
 831:fatfs/ff.c    **** 
 1279              	 .loc 1 831 0
 1280 00da 0120     	 movs r0,#1
 1281              	.LVL171:
 1282 00dc BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1283              	.LVL172:
 1284              	.L131:
 1285              	 .align 2
 1286              	.L130:
 1287 00e0 00000000 	 .word move_window
 1288              	 .cfi_endproc
 1289              	.LFE7:
 1291              	 .section .text.dir_sdi,"ax",%progbits
 1292              	 .align 1
 1293              	 .syntax unified
 1294              	 .thumb
 1295              	 .thumb_func
 1296              	 .fpu softvfp
 1298              	dir_sdi:
 1299              	.LFB11:
1071:fatfs/ff.c    **** 	DWORD clst;
 1300              	 .loc 1 1071 0
 1301              	 .cfi_startproc
 1302              	 
 1303              	 
 1304              	.LVL173:
 1305 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 1306              	 .cfi_def_cfa_offset 24
 1307              	 .cfi_offset 3,-24
 1308              	 .cfi_offset 4,-20
 1309              	 .cfi_offset 5,-16
 1310              	 .cfi_offset 6,-12
 1311              	 .cfi_offset 7,-8
 1312              	 .cfi_offset 14,-4
1071:fatfs/ff.c    **** 	DWORD clst;
 1313              	 .loc 1 1071 0
 1314 0002 0D46     	 mov r5,r1
1076:fatfs/ff.c    **** 	clst = dj->sclust;
 1315              	 .loc 1 1076 0
 1316 0004 C180     	 strh r1,[r0,#6]
1077:fatfs/ff.c    **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 1317              	 .loc 1 1077 0
 1318 0006 8168     	 ldr r1,[r0,#8]
 1319              	.LVL174:
1071:fatfs/ff.c    **** 	DWORD clst;
 1320              	 .loc 1 1071 0
 1321 0008 0446     	 mov r4,r0
1078:fatfs/ff.c    **** 		return FR_INT_ERR;
 1322              	 .loc 1 1078 0
 1323 000a 0129     	 cmp r1,#1
 1324 000c 01D1     	 bne .L133
 1325              	.LVL175:
 1326              	.L135:
1079:fatfs/ff.c    **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 1327              	 .loc 1 1079 0
 1328 000e 0220     	 movs r0,#2
 1329 0010 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1330              	.LVL176:
 1331              	.L133:
1078:fatfs/ff.c    **** 		return FR_INT_ERR;
 1332              	 .loc 1 1078 0 discriminator 1
 1333 0012 0368     	 ldr r3,[r0]
 1334 0014 D3F81620 	 ldr r2,[r3,#22]
 1335 0018 9142     	 cmp r1,r2
 1336 001a F8D2     	 bcs .L135
1080:fatfs/ff.c    **** 		clst = dj->fs->dirbase;
 1337              	 .loc 1 1080 0
 1338 001c D9B9     	 cbnz r1,.L136
1080:fatfs/ff.c    **** 		clst = dj->fs->dirbase;
 1339              	 .loc 1 1080 0 is_stmt 0 discriminator 1
 1340 001e 1A78     	 ldrb r2,[r3]
 1341 0020 032A     	 cmp r2,#3
 1342 0022 02D1     	 bne .L137
1081:fatfs/ff.c    **** 
 1343              	 .loc 1 1081 0 is_stmt 1
 1344 0024 D3F82210 	 ldr r1,[r3,#34]
 1345              	.LVL177:
1083:fatfs/ff.c    **** 		dj->clust = clst;
 1346              	 .loc 1 1083 0
 1347 0028 A9B9     	 cbnz r1,.L136
 1348              	.L137:
 1349              	.LVL178:
1084:fatfs/ff.c    **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 1350              	 .loc 1 1084 0
 1351 002a 0022     	 movs r2,#0
 1352 002c 2273     	 strb r2,[r4,#12]
 1353 002e 6273     	 strb r2,[r4,#13]
 1354 0030 A273     	 strb r2,[r4,#14]
 1355 0032 E273     	 strb r2,[r4,#15]
1085:fatfs/ff.c    **** 			return FR_INT_ERR;
 1356              	 .loc 1 1085 0
 1357 0034 1A89     	 ldrh r2,[r3,#8]
 1358 0036 AA42     	 cmp r2,r5
 1359 0038 E9D9     	 bls .L135
1087:fatfs/ff.c    **** 	}
 1360              	 .loc 1 1087 0
 1361 003a D3F82230 	 ldr r3,[r3,#34]
 1362 003e 03EB1513 	 add r3,r3,r5,lsr#4
 1363 0042 2361     	 str r3,[r4,#16]
 1364              	.LVL179:
 1365              	.L138:
1102:fatfs/ff.c    **** 
 1366              	 .loc 1 1102 0
 1367 0044 2368     	 ldr r3,[r4]
 1368 0046 05F00F05 	 and r5,r5,#15
 1369              	.LVL180:
 1370 004a 2E33     	 adds r3,r3,#46
 1371 004c 03EB4515 	 add r5,r3,r5,lsl#5
 1372 0050 6561     	 str r5,[r4,#20]
1104:fatfs/ff.c    **** }
 1373              	 .loc 1 1104 0
 1374 0052 0020     	 movs r0,#0
 1375 0054 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1376              	.LVL181:
 1377              	.L136:
1090:fatfs/ff.c    **** 		while (idx >= ic) {	/* Follow cluster chain */
 1378              	 .loc 1 1090 0
 1379 0056 9E78     	 ldrb r6,[r3,#2]
1092:fatfs/ff.c    **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1380              	 .loc 1 1092 0
 1381 0058 0D4F     	 ldr r7,.L142
1090:fatfs/ff.c    **** 		while (idx >= ic) {	/* Follow cluster chain */
 1382              	 .loc 1 1090 0
 1383 005a 3601     	 lsls r6,r6,#4
 1384              	.LVL182:
 1385              	.L139:
1091:fatfs/ff.c    **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 1386              	 .loc 1 1091 0
 1387 005c B542     	 cmp r5,r6
 1388 005e 2068     	 ldr r0,[r4]
 1389 0060 06D2     	 bcs .L140
1098:fatfs/ff.c    **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 1390              	 .loc 1 1098 0
 1391 0062 E160     	 str r1,[r4,#12]
1099:fatfs/ff.c    **** 	}
 1392              	 .loc 1 1099 0
 1393 0064 0B4B     	 ldr r3,.L142+4
 1394 0066 9847     	 blx r3
 1395              	.LVL183:
 1396 0068 00EB1510 	 add r0,r0,r5,lsr#4
 1397 006c 2061     	 str r0,[r4,#16]
 1398 006e E9E7     	 b .L138
 1399              	.LVL184:
 1400              	.L140:
1092:fatfs/ff.c    **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1401              	 .loc 1 1092 0
 1402 0070 B847     	 blx r7
 1403              	.LVL185:
1093:fatfs/ff.c    **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 1404              	 .loc 1 1093 0
 1405 0072 431C     	 adds r3,r0,#1
1092:fatfs/ff.c    **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1406              	 .loc 1 1092 0
 1407 0074 0146     	 mov r1,r0
 1408              	.LVL186:
1093:fatfs/ff.c    **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 1409              	 .loc 1 1093 0
 1410 0076 09D0     	 beq .L141
1094:fatfs/ff.c    **** 				return FR_INT_ERR;
 1411              	 .loc 1 1094 0
 1412 0078 0128     	 cmp r0,#1
 1413 007a C8D9     	 bls .L135
1094:fatfs/ff.c    **** 				return FR_INT_ERR;
 1414              	 .loc 1 1094 0 is_stmt 0 discriminator 1
 1415 007c 2368     	 ldr r3,[r4]
 1416 007e D3F81630 	 ldr r3,[r3,#22]
 1417 0082 9842     	 cmp r0,r3
 1418 0084 C3D2     	 bcs .L135
1096:fatfs/ff.c    **** 		}
 1419              	 .loc 1 1096 0 is_stmt 1
 1420 0086 AD1B     	 subs r5,r5,r6
 1421              	.LVL187:
 1422 0088 ADB2     	 uxth r5,r5
 1423              	.LVL188:
 1424 008a E7E7     	 b .L139
 1425              	.L141:
1093:fatfs/ff.c    **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 1426              	 .loc 1 1093 0
 1427 008c 0120     	 movs r0,#1
 1428              	.LVL189:
1105:fatfs/ff.c    **** 
 1429              	 .loc 1 1105 0
 1430 008e F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1431              	.LVL190:
 1432              	.L143:
 1433              	 .align 2
 1434              	.L142:
 1435 0090 00000000 	 .word get_fat
 1436 0094 00000000 	 .word clust2sect
 1437              	 .cfi_endproc
 1438              	.LFE11:
 1440              	 .section .text.dir_remove,"ax",%progbits
 1441              	 .align 1
 1442              	 .syntax unified
 1443              	 .thumb
 1444              	 .thumb_func
 1445              	 .fpu softvfp
 1447              	dir_remove:
 1448              	.LFB18:
1617:fatfs/ff.c    **** 	FRESULT res;
 1449              	 .loc 1 1617 0
 1450              	 .cfi_startproc
 1451              	 
 1452              	 
 1453              	.LVL191:
 1454 0000 10B5     	 push {r4,lr}
 1455              	 .cfi_def_cfa_offset 8
 1456              	 .cfi_offset 4,-8
 1457              	 .cfi_offset 14,-4
1637:fatfs/ff.c    **** 	if (res == FR_OK) {
 1458              	 .loc 1 1637 0
 1459 0002 084B     	 ldr r3,.L146
 1460 0004 C188     	 ldrh r1,[r0,#6]
1617:fatfs/ff.c    **** 	FRESULT res;
 1461              	 .loc 1 1617 0
 1462 0006 0446     	 mov r4,r0
1637:fatfs/ff.c    **** 	if (res == FR_OK) {
 1463              	 .loc 1 1637 0
 1464 0008 9847     	 blx r3
 1465              	.LVL192:
1638:fatfs/ff.c    **** 		res = move_window(dj->fs, dj->sect);
 1466              	 .loc 1 1638 0
 1467 000a 50B9     	 cbnz r0,.L145
 1468              	.LVL193:
 1469              	.LBB26:
 1470              	.LBB27:
1639:fatfs/ff.c    **** 		if (res == FR_OK) {
 1471              	 .loc 1 1639 0
 1472 000c 2169     	 ldr r1,[r4,#16]
 1473 000e 2068     	 ldr r0,[r4]
 1474              	.LVL194:
 1475 0010 054B     	 ldr r3,.L146+4
 1476 0012 9847     	 blx r3
 1477              	.LVL195:
1640:fatfs/ff.c    **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
 1478              	 .loc 1 1640 0
 1479 0014 28B9     	 cbnz r0,.L145
1641:fatfs/ff.c    **** 			dj->fs->wflag = 1;
 1480              	 .loc 1 1641 0
 1481 0016 E522     	 movs r2,#229
 1482 0018 6369     	 ldr r3,[r4,#20]
 1483 001a 1A70     	 strb r2,[r3]
1642:fatfs/ff.c    **** 		}
 1484              	 .loc 1 1642 0
 1485 001c 0122     	 movs r2,#1
 1486 001e 2368     	 ldr r3,[r4]
 1487 0020 1A71     	 strb r2,[r3,#4]
 1488              	.LVL196:
 1489              	.L145:
 1490              	.LBE27:
 1491              	.LBE26:
1648:fatfs/ff.c    **** #endif /* !_FS_READONLY */
 1492              	 .loc 1 1648 0
 1493 0022 10BD     	 pop {r4,pc}
 1494              	.LVL197:
 1495              	.L147:
 1496              	 .align 2
 1497              	.L146:
 1498 0024 00000000 	 .word dir_sdi
 1499 0028 00000000 	 .word move_window
 1500              	 .cfi_endproc
 1501              	.LFE18:
 1503              	 .section .text.put_fat,"ax",%progbits
 1504              	 .align 1
 1505              	 .global put_fat
 1506              	 .syntax unified
 1507              	 .thumb
 1508              	 .thumb_func
 1509              	 .fpu softvfp
 1511              	put_fat:
 1512              	.LFB8:
 869:fatfs/ff.c    **** 	UINT bc;
 1513              	 .loc 1 869 0
 1514              	 .cfi_startproc
 1515              	 
 1516              	 
 1517              	.LVL198:
 875:fatfs/ff.c    **** 		res = FR_INT_ERR;
 1518              	 .loc 1 875 0
 1519 0000 0129     	 cmp r1,#1
 869:fatfs/ff.c    **** 	UINT bc;
 1520              	 .loc 1 869 0
 1521 0002 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 1522              	 .cfi_def_cfa_offset 24
 1523              	 .cfi_offset 4,-24
 1524              	 .cfi_offset 5,-20
 1525              	 .cfi_offset 6,-16
 1526              	 .cfi_offset 7,-12
 1527              	 .cfi_offset 8,-8
 1528              	 .cfi_offset 14,-4
 869:fatfs/ff.c    **** 	UINT bc;
 1529              	 .loc 1 869 0
 1530 0006 0546     	 mov r5,r0
 1531 0008 0C46     	 mov r4,r1
 1532 000a 1646     	 mov r6,r2
 875:fatfs/ff.c    **** 		res = FR_INT_ERR;
 1533              	 .loc 1 875 0
 1534 000c 78D9     	 bls .L159
 875:fatfs/ff.c    **** 		res = FR_INT_ERR;
 1535              	 .loc 1 875 0 is_stmt 0 discriminator 1
 1536 000e D0F81630 	 ldr r3,[r0,#22]
 1537 0012 9942     	 cmp r1,r3
 1538 0014 74D2     	 bcs .L159
 1539              	.LVL199:
 1540              	.LBB30:
 1541              	.LBB31:
 879:fatfs/ff.c    **** 		case FS_FAT12 :
 1542              	 .loc 1 879 0 is_stmt 1
 1543 0016 0378     	 ldrb r3,[r0]
 1544 0018 022B     	 cmp r3,#2
 1545 001a 3DD0     	 beq .L151
 1546 001c 032B     	 cmp r3,#3
 1547 001e 4ED0     	 beq .L152
 1548 0020 012B     	 cmp r3,#1
 1549 0022 6BD1     	 bne .L161
 1550              	.LVL200:
 881:fatfs/ff.c    **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1551              	 .loc 1 881 0
 1552 0024 01EB5107 	 add r7,r1,r1,lsr#1
 1553              	.LVL201:
 882:fatfs/ff.c    **** 			if (res != FR_OK) break;
 1554              	 .loc 1 882 0
 1555 0028 D0F81E10 	 ldr r1,[r0,#30]
 1556              	.LVL202:
 1557 002c DFF8D880 	 ldr r8,.L162
 1558 0030 01EB5721 	 add r1,r1,r7,lsr#9
 1559 0034 C047     	 blx r8
 1560              	.LVL203:
 883:fatfs/ff.c    **** 			p = &fs->win[bc % SS(fs)];
 1561              	 .loc 1 883 0
 1562 0036 18BB     	 cbnz r0,.L150
 884:fatfs/ff.c    **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1563              	 .loc 1 884 0
 1564 0038 C7F30803 	 ubfx r3,r7,#0,#9
 1565              	.LVL204:
 885:fatfs/ff.c    **** 			bc++;
 1566              	 .loc 1 885 0
 1567 003c 14F00104 	 ands r4,r4,#1
 1568              	.LVL205:
 1569 0040 2B44     	 add r3,r3,r5
 1570 0042 17BF     	 itett ne
 1571 0044 93F82E10 	 ldrbne r1,[r3,#46]
 1572 0048 F1B2     	 uxtbeq r1,r6
 1573 004a 01F00F00 	 andne r0,r1,#15
 1574              	.LVL206:
 1575 004e 3101     	 lslne r1,r6,#4
 1576 0050 1CBF     	 itt ne
 1577 0052 01F0F001 	 andne r1,r1,#240
 1578 0056 0143     	 orrne r1,r1,r0
 1579 0058 83F82E10 	 strb r1,[r3,#46]
 887:fatfs/ff.c    **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1580              	 .loc 1 887 0
 1581 005c 0123     	 movs r3,#1
 888:fatfs/ff.c    **** 			if (res != FR_OK) break;
 1582              	 .loc 1 888 0
 1583 005e D5F81E10 	 ldr r1,[r5,#30]
 886:fatfs/ff.c    **** 			fs->wflag = 1;
 1584              	 .loc 1 886 0
 1585 0062 0137     	 adds r7,r7,#1
 1586              	.LVL207:
 887:fatfs/ff.c    **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1587              	 .loc 1 887 0
 1588 0064 2B71     	 strb r3,[r5,#4]
 888:fatfs/ff.c    **** 			if (res != FR_OK) break;
 1589              	 .loc 1 888 0
 1590 0066 01EB5721 	 add r1,r1,r7,lsr#9
 1591 006a 2846     	 mov r0,r5
 1592 006c C047     	 blx r8
 1593              	.LVL208:
 889:fatfs/ff.c    **** 			p = &fs->win[bc % SS(fs)];
 1594              	 .loc 1 889 0
 1595 006e 38B9     	 cbnz r0,.L150
 890:fatfs/ff.c    **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1596              	 .loc 1 890 0
 1597 0070 C7F30807 	 ubfx r7,r7,#0,#9
 1598              	.LVL209:
 1599 0074 2F44     	 add r7,r7,r5
 891:fatfs/ff.c    **** 			break;
 1600              	 .loc 1 891 0
 1601 0076 3CB1     	 cbz r4,.L156
 1602 0078 C6F30712 	 ubfx r2,r6,#4,#8
 1603              	.LVL210:
 1604              	.L157:
 1605 007c 87F82E20 	 strb r2,[r7,#46]
 1606              	.LVL211:
 1607              	.L150:
 912:fatfs/ff.c    **** 	}
 1608              	 .loc 1 912 0
 1609 0080 0123     	 movs r3,#1
 1610 0082 2B71     	 strb r3,[r5,#4]
 1611              	.LVL212:
 1612 0084 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1613              	.LVL213:
 1614              	.L156:
 891:fatfs/ff.c    **** 			break;
 1615              	 .loc 1 891 0
 1616 0088 97F82E20 	 ldrb r2,[r7,#46]
 1617 008c C6F30326 	 ubfx r6,r6,#8,#4
 1618              	.LVL214:
 1619 0090 22F00F02 	 bic r2,r2,#15
 1620 0094 3243     	 orrs r2,r2,r6
 1621 0096 F1E7     	 b .L157
 1622              	.LVL215:
 1623              	.L151:
 895:fatfs/ff.c    **** 			if (res != FR_OK) break;
 1624              	 .loc 1 895 0
 1625 0098 D0F81E10 	 ldr r1,[r0,#30]
 1626              	.LVL216:
 1627 009c 1A4B     	 ldr r3,.L162
 1628 009e 01EB1421 	 add r1,r1,r4,lsr#8
 1629 00a2 9847     	 blx r3
 1630              	.LVL217:
 896:fatfs/ff.c    **** 			p = &fs->win[clst * 2 % SS(fs)];
 1631              	 .loc 1 896 0
 1632 00a4 0028     	 cmp r0,#0
 1633 00a6 EBD1     	 bne .L150
 897:fatfs/ff.c    **** 			ST_WORD(p, (WORD)val);
 1634              	 .loc 1 897 0
 1635 00a8 6400     	 lsls r4,r4,#1
 1636              	.LVL218:
 1637 00aa 04F4FF74 	 and r4,r4,#510
 1638              	.LVL219:
 898:fatfs/ff.c    **** 			break;
 1639              	 .loc 1 898 0
 1640 00ae 2C44     	 add r4,r4,r5
 1641              	.LVL220:
 1642 00b0 C6F30722 	 ubfx r2,r6,#8,#8
 1643 00b4 84F82E60 	 strb r6,[r4,#46]
 1644 00b8 84F82F20 	 strb r2,[r4,#47]
 1645 00bc E0E7     	 b .L150
 1646              	.LVL221:
 1647              	.L152:
 902:fatfs/ff.c    **** 			if (res != FR_OK) break;
 1648              	 .loc 1 902 0
 1649 00be D0F81E10 	 ldr r1,[r0,#30]
 1650              	.LVL222:
 1651 00c2 114B     	 ldr r3,.L162
 1652 00c4 01EBD411 	 add r1,r1,r4,lsr#7
 1653 00c8 9847     	 blx r3
 1654              	.LVL223:
 903:fatfs/ff.c    **** 			p = &fs->win[clst * 4 % SS(fs)];
 1655              	 .loc 1 903 0
 1656 00ca 0028     	 cmp r0,#0
 1657 00cc D8D1     	 bne .L150
 904:fatfs/ff.c    **** 			val |= LD_DWORD(p) & 0xF0000000;
 1658              	 .loc 1 904 0
 1659 00ce A400     	 lsls r4,r4,#2
 1660              	.LVL224:
 1661 00d0 04F4FE74 	 and r4,r4,#508
 1662 00d4 04F12E01 	 add r1,r4,#46
 1663 00d8 2944     	 add r1,r1,r5
 1664              	.LVL225:
 905:fatfs/ff.c    **** 			ST_DWORD(p, val);
 1665              	 .loc 1 905 0
 1666 00da CB78     	 ldrb r3,[r1,#3]
 1667 00dc 2C44     	 add r4,r4,r5
 1668 00de 1B06     	 lsls r3,r3,#24
 1669 00e0 03F07043 	 and r3,r3,#-268435456
 1670 00e4 43EA0602 	 orr r2,r3,r6
 1671              	.LVL226:
 906:fatfs/ff.c    **** 			break;
 1672              	 .loc 1 906 0
 1673 00e8 C2F30723 	 ubfx r3,r2,#8,#8
 1674 00ec 84F82E20 	 strb r2,[r4,#46]
 1675 00f0 4B70     	 strb r3,[r1,#1]
 1676 00f2 130C     	 lsrs r3,r2,#16
 1677 00f4 120E     	 lsrs r2,r2,#24
 1678              	.LVL227:
 1679 00f6 8B70     	 strb r3,[r1,#2]
 1680 00f8 CA70     	 strb r2,[r1,#3]
 1681              	.LVL228:
 1682 00fa C1E7     	 b .L150
 1683              	.LVL229:
 1684              	.L161:
 910:fatfs/ff.c    **** 		}
 1685              	 .loc 1 910 0
 1686 00fc 0220     	 movs r0,#2
 1687              	.LVL230:
 1688 00fe BFE7     	 b .L150
 1689              	.LVL231:
 1690              	.L159:
 1691              	.LBE31:
 1692              	.LBE30:
 876:fatfs/ff.c    **** 
 1693              	 .loc 1 876 0
 1694 0100 0220     	 movs r0,#2
 1695              	.LVL232:
 916:fatfs/ff.c    **** #endif /* !_FS_READONLY */
 1696              	 .loc 1 916 0
 1697 0102 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1698              	.LVL233:
 1699              	.L163:
 1700 0106 00BF     	 .align 2
 1701              	.L162:
 1702 0108 00000000 	 .word move_window
 1703              	 .cfi_endproc
 1704              	.LFE8:
 1706              	 .section .text.create_chain,"ax",%progbits
 1707              	 .align 1
 1708              	 .syntax unified
 1709              	 .thumb
 1710              	 .thumb_func
 1711              	 .fpu softvfp
 1713              	create_chain:
 1714              	.LFB10:
 984:fatfs/ff.c    **** 	DWORD cs, ncl, scl;
 1715              	 .loc 1 984 0
 1716              	 .cfi_startproc
 1717              	 
 1718              	 
 1719              	.LVL234:
 1720 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 1721              	 .cfi_def_cfa_offset 24
 1722              	 .cfi_offset 4,-24
 1723              	 .cfi_offset 5,-20
 1724              	 .cfi_offset 6,-16
 1725              	 .cfi_offset 7,-12
 1726              	 .cfi_offset 8,-8
 1727              	 .cfi_offset 14,-4
 984:fatfs/ff.c    **** 	DWORD cs, ncl, scl;
 1728              	 .loc 1 984 0
 1729 0004 0546     	 mov r5,r0
 989:fatfs/ff.c    **** 		scl = fs->last_clust;			/* Get suggested start point */
 1730              	 .loc 1 989 0
 1731 0006 0F46     	 mov r7,r1
 1732 0008 A9B9     	 cbnz r1,.L165
 990:fatfs/ff.c    **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 1733              	 .loc 1 990 0
 1734 000a D0F80A60 	 ldr r6,[r0,#10]
 1735              	.LVL235:
 991:fatfs/ff.c    **** 	}
 1736              	 .loc 1 991 0
 1737 000e EEB1     	 cbz r6,.L179
 991:fatfs/ff.c    **** 	}
 1738              	 .loc 1 991 0 is_stmt 0 discriminator 2
 1739 0010 D0F81630 	 ldr r3,[r0,#22]
 1740 0014 9E42     	 cmp r6,r3
 1741 0016 28BF     	 it cs
 1742 0018 0126     	 movcs r6,#1
 1743              	.LVL236:
 1744              	.L166:
 991:fatfs/ff.c    **** 	}
 1745              	 .loc 1 991 0
 1746 001a 3446     	 mov r4,r6
1007:fatfs/ff.c    **** 		if (cs == 0) break;				/* Found a free cluster */
 1747              	 .loc 1 1007 0 is_stmt 1
 1748 001c DFF88C80 	 ldr r8,.L190
 1749              	.LVL237:
 1750              	.L173:
1003:fatfs/ff.c    **** 			ncl = 2;
 1751              	 .loc 1 1003 0
 1752 0020 D5F81630 	 ldr r3,[r5,#22]
1002:fatfs/ff.c    **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 1753              	 .loc 1 1002 0
 1754 0024 0134     	 adds r4,r4,#1
 1755              	.LVL238:
1003:fatfs/ff.c    **** 			ncl = 2;
 1756              	 .loc 1 1003 0
 1757 0026 9C42     	 cmp r4,r3
 1758 0028 13D3     	 bcc .L169
 1759              	.LVL239:
1005:fatfs/ff.c    **** 		}
 1760              	 .loc 1 1005 0
 1761 002a 012E     	 cmp r6,#1
 1762 002c 10D8     	 bhi .L180
 1763              	.LVL240:
 1764              	.L172:
 1765 002e 0024     	 movs r4,#0
 1766              	.LVL241:
 1767              	.L164:
1029:fatfs/ff.c    **** #endif /* !_FS_READONLY */
 1768              	 .loc 1 1029 0
 1769 0030 2046     	 mov r0,r4
 1770 0032 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1771              	.LVL242:
 1772              	.L165:
 994:fatfs/ff.c    **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 1773              	 .loc 1 994 0
 1774 0036 1D4B     	 ldr r3,.L190
 1775 0038 9847     	 blx r3
 1776              	.LVL243:
 995:fatfs/ff.c    **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 1777              	 .loc 1 995 0
 1778 003a 0128     	 cmp r0,#1
 994:fatfs/ff.c    **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 1779              	 .loc 1 994 0
 1780 003c 0446     	 mov r4,r0
 1781              	.LVL244:
 995:fatfs/ff.c    **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 1782              	 .loc 1 995 0
 1783 003e 32D9     	 bls .L167
 996:fatfs/ff.c    **** 		scl = clst;
 1784              	 .loc 1 996 0
 1785 0040 D5F81630 	 ldr r3,[r5,#22]
 1786 0044 9842     	 cmp r0,r3
 1787 0046 F3D3     	 bcc .L164
 1788 0048 3E46     	 mov r6,r7
 1789 004a E6E7     	 b .L166
 1790              	.LVL245:
 1791              	.L179:
 991:fatfs/ff.c    **** 	}
 1792              	 .loc 1 991 0
 1793 004c 0126     	 movs r6,#1
 1794              	.LVL246:
 1795 004e E4E7     	 b .L166
 1796              	.LVL247:
 1797              	.L180:
1004:fatfs/ff.c    **** 			if (ncl > scl) return 0;	/* No free cluster */
 1798              	 .loc 1 1004 0
 1799 0050 0224     	 movs r4,#2
 1800              	.LVL248:
 1801              	.L169:
1007:fatfs/ff.c    **** 		if (cs == 0) break;				/* Found a free cluster */
 1802              	 .loc 1 1007 0
 1803 0052 2146     	 mov r1,r4
 1804 0054 2846     	 mov r0,r5
 1805 0056 C047     	 blx r8
 1806              	.LVL249:
1008:fatfs/ff.c    **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 1807              	 .loc 1 1008 0
 1808 0058 48B1     	 cbz r0,.L170
1009:fatfs/ff.c    **** 			return cs;
 1809              	 .loc 1 1009 0
 1810 005a 411C     	 adds r1,r0,#1
 1811 005c 02D1     	 bne .L171
 1812              	.LVL250:
 1813              	.L178:
1004:fatfs/ff.c    **** 			if (ncl > scl) return 0;	/* No free cluster */
 1814              	 .loc 1 1004 0
 1815 005e 4FF0FF34 	 mov r4,#-1
 1816              	.LVL251:
 1817 0062 E5E7     	 b .L164
 1818              	.LVL252:
 1819              	.L171:
1009:fatfs/ff.c    **** 			return cs;
 1820              	 .loc 1 1009 0 discriminator 1
 1821 0064 0128     	 cmp r0,#1
 1822 0066 1ED0     	 beq .L167
1011:fatfs/ff.c    **** 	}
 1823              	 .loc 1 1011 0
 1824 0068 B442     	 cmp r4,r6
 1825 006a D9D1     	 bne .L173
 1826 006c DFE7     	 b .L172
 1827              	.L170:
1014:fatfs/ff.c    **** 	if (res == FR_OK && clst != 0) {
 1828              	 .loc 1 1014 0
 1829 006e 6FF07042 	 mvn r2,#-268435456
 1830 0072 2146     	 mov r1,r4
 1831 0074 2846     	 mov r0,r5
 1832              	.LVL253:
 1833 0076 0E4E     	 ldr r6,.L190+4
 1834              	.LVL254:
 1835 0078 B047     	 blx r6
 1836              	.LVL255:
1015:fatfs/ff.c    **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 1837              	 .loc 1 1015 0
 1838 007a 90B9     	 cbnz r0,.L174
1015:fatfs/ff.c    **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 1839              	 .loc 1 1015 0 is_stmt 0 discriminator 1
 1840 007c 5FB9     	 cbnz r7,.L175
 1841              	.L177:
 1842              	.LVL256:
1020:fatfs/ff.c    **** 			fs->free_clust--;
 1843              	 .loc 1 1020 0 is_stmt 1
 1844 007e D5F80E30 	 ldr r3,[r5,#14]
1019:fatfs/ff.c    **** 		if (fs->free_clust != 0xFFFFFFFF) {
 1845              	 .loc 1 1019 0
 1846 0082 C5F80A40 	 str r4,[r5,#10]
1020:fatfs/ff.c    **** 			fs->free_clust--;
 1847              	 .loc 1 1020 0
 1848 0086 5A1C     	 adds r2,r3,#1
 1849 0088 D2D0     	 beq .L164
1021:fatfs/ff.c    **** 			fs->fsi_flag = 1;
 1850              	 .loc 1 1021 0
 1851 008a 013B     	 subs r3,r3,#1
 1852 008c C5F80E30 	 str r3,[r5,#14]
1022:fatfs/ff.c    **** 		}
 1853              	 .loc 1 1022 0
 1854 0090 0123     	 movs r3,#1
 1855 0092 6B71     	 strb r3,[r5,#5]
 1856 0094 CCE7     	 b .L164
 1857              	.LVL257:
 1858              	.L175:
1016:fatfs/ff.c    **** 	}
 1859              	 .loc 1 1016 0
 1860 0096 2246     	 mov r2,r4
 1861 0098 3946     	 mov r1,r7
 1862 009a 2846     	 mov r0,r5
 1863              	.LVL258:
 1864 009c B047     	 blx r6
 1865              	.LVL259:
1018:fatfs/ff.c    **** 		fs->last_clust = ncl;			/* Update FSINFO */
 1866              	 .loc 1 1018 0
 1867 009e 0028     	 cmp r0,#0
 1868 00a0 EDD0     	 beq .L177
 1869              	.L174:
1025:fatfs/ff.c    **** 	}
 1870              	 .loc 1 1025 0
 1871 00a2 0128     	 cmp r0,#1
 1872 00a4 DBD0     	 beq .L178
 1873              	.LVL260:
 1874              	.L167:
1025:fatfs/ff.c    **** 	}
 1875              	 .loc 1 1025 0 is_stmt 0 discriminator 2
 1876 00a6 0124     	 movs r4,#1
 1877 00a8 C2E7     	 b .L164
 1878              	.L191:
 1879 00aa 00BF     	 .align 2
 1880              	.L190:
 1881 00ac 00000000 	 .word get_fat
 1882 00b0 00000000 	 .word put_fat
 1883              	 .cfi_endproc
 1884              	.LFE10:
 1886              	 .section .text.dir_next,"ax",%progbits
 1887              	 .align 1
 1888              	 .syntax unified
 1889              	 .thumb
 1890              	 .thumb_func
 1891              	 .fpu softvfp
 1893              	dir_next:
 1894              	.LFB12:
1119:fatfs/ff.c    **** 	DWORD clst;
 1895              	 .loc 1 1119 0 is_stmt 1
 1896              	 .cfi_startproc
 1897              	 
 1898              	 
 1899              	.LVL261:
 1900 0000 2DE9F047 	 push {r4,r5,r6,r7,r8,r9,r10,lr}
 1901              	 .cfi_def_cfa_offset 32
 1902              	 .cfi_offset 4,-32
 1903              	 .cfi_offset 5,-28
 1904              	 .cfi_offset 6,-24
 1905              	 .cfi_offset 7,-20
 1906              	 .cfi_offset 8,-16
 1907              	 .cfi_offset 9,-12
 1908              	 .cfi_offset 10,-8
 1909              	 .cfi_offset 14,-4
1125:fatfs/ff.c    **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 1910              	 .loc 1 1125 0
 1911 0004 C588     	 ldrh r5,[r0,#6]
1119:fatfs/ff.c    **** 	DWORD clst;
 1912              	 .loc 1 1119 0
 1913 0006 0446     	 mov r4,r0
1125:fatfs/ff.c    **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 1914              	 .loc 1 1125 0
 1915 0008 0135     	 adds r5,r5,#1
 1916 000a ADB2     	 uxth r5,r5
1119:fatfs/ff.c    **** 	DWORD clst;
 1917              	 .loc 1 1119 0
 1918 000c 8846     	 mov r8,r1
 1919              	.LVL262:
1126:fatfs/ff.c    **** 		return FR_NO_FILE;
 1920              	 .loc 1 1126 0
 1921 000e 15B9     	 cbnz r5,.L193
 1922              	.LVL263:
 1923              	.L195:
1127:fatfs/ff.c    **** 
 1924              	 .loc 1 1127 0
 1925 0010 0420     	 movs r0,#4
 1926 0012 BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 1927              	.LVL264:
 1928              	.L193:
1126:fatfs/ff.c    **** 		return FR_NO_FILE;
 1929              	 .loc 1 1126 0 discriminator 1
 1930 0016 0369     	 ldr r3,[r0,#16]
 1931 0018 002B     	 cmp r3,#0
 1932 001a F9D0     	 beq .L195
1129:fatfs/ff.c    **** 		dj->sect++;					/* Next sector */
 1933              	 .loc 1 1129 0
 1934 001c 15F00F07 	 ands r7,r5,#15
 1935 0020 07D1     	 bne .L197
1132:fatfs/ff.c    **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 1936              	 .loc 1 1132 0
 1937 0022 C168     	 ldr r1,[r0,#12]
 1938              	.LVL265:
1130:fatfs/ff.c    **** 
 1939              	 .loc 1 1130 0
 1940 0024 0133     	 adds r3,r3,#1
 1941 0026 0361     	 str r3,[r0,#16]
 1942 0028 0068     	 ldr r0,[r0]
 1943              	.LVL266:
1132:fatfs/ff.c    **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 1944              	 .loc 1 1132 0
 1945 002a 59B9     	 cbnz r1,.L198
1133:fatfs/ff.c    **** 				return FR_NO_FILE;
 1946              	 .loc 1 1133 0
 1947 002c 0389     	 ldrh r3,[r0,#8]
 1948 002e AB42     	 cmp r3,r5
 1949 0030 EED9     	 bls .L195
 1950              	.LVL267:
 1951              	.L197:
1170:fatfs/ff.c    **** 
 1952              	 .loc 1 1170 0
 1953 0032 2368     	 ldr r3,[r4]
1169:fatfs/ff.c    **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 1954              	 .loc 1 1169 0
 1955 0034 E580     	 strh r5,[r4,#6]
1170:fatfs/ff.c    **** 
 1956              	 .loc 1 1170 0
 1957 0036 2E33     	 adds r3,r3,#46
 1958 0038 03EB4713 	 add r3,r3,r7,lsl#5
 1959 003c 6361     	 str r3,[r4,#20]
1172:fatfs/ff.c    **** }
 1960              	 .loc 1 1172 0
 1961 003e 0020     	 movs r0,#0
 1962 0040 BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 1963              	.LVL268:
 1964              	.L198:
1137:fatfs/ff.c    **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 1965              	 .loc 1 1137 0
 1966 0044 8378     	 ldrb r3,[r0,#2]
 1967 0046 013B     	 subs r3,r3,#1
 1968 0048 13EA1513 	 ands r3,r3,r5,lsr#4
 1969 004c F1D1     	 bne .L197
1138:fatfs/ff.c    **** 				if (clst <= 1) return FR_INT_ERR;
 1970              	 .loc 1 1138 0
 1971 004e 2F4B     	 ldr r3,.L222
 1972 0050 9847     	 blx r3
 1973              	.LVL269:
1139:fatfs/ff.c    **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1974              	 .loc 1 1139 0
 1975 0052 0128     	 cmp r0,#1
1138:fatfs/ff.c    **** 				if (clst <= 1) return FR_INT_ERR;
 1976              	 .loc 1 1138 0
 1977 0054 0646     	 mov r6,r0
 1978              	.LVL270:
1139:fatfs/ff.c    **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1979              	 .loc 1 1139 0
 1980 0056 02D8     	 bhi .L200
 1981              	.L203:
 1982 0058 0220     	 movs r0,#2
 1983              	.LVL271:
 1984 005a BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 1985              	.LVL272:
 1986              	.L200:
1140:fatfs/ff.c    **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 1987              	 .loc 1 1140 0
 1988 005e 421C     	 adds r2,r0,#1
 1989 0060 02D1     	 bne .L201
 1990              	.LVL273:
 1991              	.L204:
 1992 0062 0120     	 movs r0,#1
 1993 0064 BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 1994              	.LVL274:
 1995              	.L201:
1141:fatfs/ff.c    **** #if !_FS_READONLY
 1996              	 .loc 1 1141 0
 1997 0068 2068     	 ldr r0,[r4]
 1998              	.LVL275:
 1999 006a D0F81630 	 ldr r3,[r0,#22]
 2000 006e 9E42     	 cmp r6,r3
 2001 0070 2FD3     	 bcc .L202
 2002              	.LBB35:
1144:fatfs/ff.c    **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 2003              	 .loc 1 1144 0
 2004 0072 B8F1000F 	 cmp r8,#0
 2005 0076 CBD0     	 beq .L195
1145:fatfs/ff.c    **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 2006              	 .loc 1 1145 0
 2007 0078 E168     	 ldr r1,[r4,#12]
 2008 007a 254B     	 ldr r3,.L222+4
 2009 007c 9847     	 blx r3
 2010              	.LVL276:
1146:fatfs/ff.c    **** 					if (clst == 1) return FR_INT_ERR;
 2011              	 .loc 1 1146 0
 2012 007e 0646     	 mov r6,r0
 2013 0080 0028     	 cmp r0,#0
 2014 0082 3FD0     	 beq .L209
1147:fatfs/ff.c    **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 2015              	 .loc 1 1147 0
 2016 0084 0128     	 cmp r0,#1
 2017 0086 E7D0     	 beq .L203
1148:fatfs/ff.c    **** 					/* Clean-up stretched table */
 2018              	 .loc 1 1148 0
 2019 0088 431C     	 adds r3,r0,#1
 2020 008a EAD0     	 beq .L204
1150:fatfs/ff.c    **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 2021              	 .loc 1 1150 0
 2022 008c 0021     	 movs r1,#0
 2023 008e 2068     	 ldr r0,[r4]
 2024              	.LVL277:
 2025 0090 DFF88480 	 ldr r8,.L222+12
 2026              	.LVL278:
 2027 0094 C047     	 blx r8
 2028              	.LVL279:
 2029 0096 0028     	 cmp r0,#0
 2030 0098 E3D1     	 bne .L204
1151:fatfs/ff.c    **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 2031              	 .loc 1 1151 0
 2032 009a 2368     	 ldr r3,[r4]
 2033              	.LVL280:
 2034 009c 03F22E22 	 addw r2,r3,#558
 2035              	.LBB36:
 2036              	.LBB37:
 548:fatfs/ff.c    **** 
 2037              	 .loc 1 548 0
 2038 00a0 2E33     	 adds r3,r3,#46
 2039              	.LVL281:
 2040              	.L205:
 550:fatfs/ff.c    **** 		*d++ = (BYTE)val;
 2041              	 .loc 1 550 0
 2042 00a2 9342     	 cmp r3,r2
 2043 00a4 1CD1     	 bne .L206
 2044              	.LVL282:
 2045              	.LBE37:
 2046              	.LBE36:
1152:fatfs/ff.c    **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 2047              	 .loc 1 1152 0
 2048 00a6 2268     	 ldr r2,[r4]
 2049 00a8 3146     	 mov r1,r6
 2050 00aa 1046     	 mov r0,r2
 2051 00ac 194B     	 ldr r3,.L222+8
 2052 00ae 9847     	 blx r3
 2053              	.LVL283:
1153:fatfs/ff.c    **** 						dj->fs->wflag = 1;
 2054              	 .loc 1 1153 0
 2055 00b0 4FF00009 	 mov r9,#0
1154:fatfs/ff.c    **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 2056              	 .loc 1 1154 0
 2057 00b4 4FF0010A 	 mov r10,#1
1152:fatfs/ff.c    **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 2058              	 .loc 1 1152 0
 2059 00b8 C2F82A00 	 str r0,[r2,#42]
 2060              	.LVL284:
 2061              	.L207:
1153:fatfs/ff.c    **** 						dj->fs->wflag = 1;
 2062              	 .loc 1 1153 0 discriminator 1
 2063 00bc 2068     	 ldr r0,[r4]
 2064 00be 5FFA89F2 	 uxtb r2,r9
 2065 00c2 8378     	 ldrb r3,[r0,#2]
 2066 00c4 9342     	 cmp r3,r2
 2067 00c6 0ED8     	 bhi .L208
1158:fatfs/ff.c    **** #else
 2068              	 .loc 1 1158 0
 2069 00c8 D0F82A30 	 ldr r3,[r0,#42]
 2070 00cc 9B1A     	 subs r3,r3,r2
 2071 00ce C0F82A30 	 str r3,[r0,#42]
 2072              	.LVL285:
 2073              	.L202:
 2074              	.LBE35:
1163:fatfs/ff.c    **** 				dj->sect = clust2sect(dj->fs, clst);
 2075              	 .loc 1 1163 0
 2076 00d2 E660     	 str r6,[r4,#12]
1164:fatfs/ff.c    **** 			}
 2077              	 .loc 1 1164 0
 2078 00d4 3146     	 mov r1,r6
 2079 00d6 2068     	 ldr r0,[r4]
 2080 00d8 0E4B     	 ldr r3,.L222+8
 2081 00da 9847     	 blx r3
 2082              	.LVL286:
 2083 00dc 2061     	 str r0,[r4,#16]
 2084 00de A8E7     	 b .L197
 2085              	.LVL287:
 2086              	.L206:
 2087              	.LBB40:
 2088              	.LBB39:
 2089              	.LBB38:
 551:fatfs/ff.c    **** }
 2090              	 .loc 1 551 0
 2091 00e0 03F8010B 	 strb r0,[r3],#1
 2092              	.LVL288:
 2093 00e4 DDE7     	 b .L205
 2094              	.LVL289:
 2095              	.L208:
 2096              	.LBE38:
 2097              	.LBE39:
1154:fatfs/ff.c    **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 2098              	 .loc 1 1154 0
 2099 00e6 80F804A0 	 strb r10,[r0,#4]
1155:fatfs/ff.c    **** 						dj->fs->winsect++;
 2100              	 .loc 1 1155 0
 2101 00ea 0021     	 movs r1,#0
 2102 00ec C047     	 blx r8
 2103              	.LVL290:
 2104 00ee 09F10109 	 add r9,r9,#1
 2105              	.LVL291:
 2106 00f2 0028     	 cmp r0,#0
 2107 00f4 B5D1     	 bne .L204
1156:fatfs/ff.c    **** 					}
 2108              	 .loc 1 1156 0 discriminator 2
 2109 00f6 2268     	 ldr r2,[r4]
 2110 00f8 D2F82A30 	 ldr r3,[r2,#42]
 2111 00fc 0133     	 adds r3,r3,#1
 2112 00fe C2F82A30 	 str r3,[r2,#42]
 2113              	.LVL292:
 2114 0102 DBE7     	 b .L207
 2115              	.LVL293:
 2116              	.L209:
1146:fatfs/ff.c    **** 					if (clst == 1) return FR_INT_ERR;
 2117              	 .loc 1 1146 0
 2118 0104 0720     	 movs r0,#7
 2119              	.LVL294:
 2120              	.LBE40:
1173:fatfs/ff.c    **** 
 2121              	 .loc 1 1173 0
 2122 0106 BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 2123              	.LVL295:
 2124              	.L223:
 2125 010a 00BF     	 .align 2
 2126              	.L222:
 2127 010c 00000000 	 .word get_fat
 2128 0110 00000000 	 .word create_chain
 2129 0114 00000000 	 .word clust2sect
 2130 0118 00000000 	 .word move_window
 2131              	 .cfi_endproc
 2132              	.LFE12:
 2134              	 .section .text.follow_path,"ax",%progbits
 2135              	 .align 1
 2136              	 .syntax unified
 2137              	 .thumb
 2138              	 .thumb_func
 2139              	 .fpu softvfp
 2141              	follow_path:
 2142              	.LFB21:
1959:fatfs/ff.c    **** 	FRESULT res;
 2143              	 .loc 1 1959 0
 2144              	 .cfi_startproc
 2145              	 
 2146              	 
 2147              	.LVL296:
 2148 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 2149              	 .cfi_def_cfa_offset 32
 2150              	 .cfi_offset 3,-32
 2151              	 .cfi_offset 4,-28
 2152              	 .cfi_offset 5,-24
 2153              	 .cfi_offset 6,-20
 2154              	 .cfi_offset 7,-16
 2155              	 .cfi_offset 8,-12
 2156              	 .cfi_offset 9,-8
 2157              	 .cfi_offset 14,-4
1971:fatfs/ff.c    **** 		path++;
 2158              	 .loc 1 1971 0
 2159 0004 0B78     	 ldrb r3,[r1]
1959:fatfs/ff.c    **** 	FRESULT res;
 2160              	 .loc 1 1959 0
 2161 0006 0446     	 mov r4,r0
1971:fatfs/ff.c    **** 		path++;
 2162              	 .loc 1 1971 0
 2163 0008 2F2B     	 cmp r3,#47
1959:fatfs/ff.c    **** 	FRESULT res;
 2164              	 .loc 1 1959 0
 2165 000a 0D46     	 mov r5,r1
1971:fatfs/ff.c    **** 		path++;
 2166              	 .loc 1 1971 0
 2167 000c 01D0     	 beq .L225
1971:fatfs/ff.c    **** 		path++;
 2168              	 .loc 1 1971 0 is_stmt 0 discriminator 1
 2169 000e 5C2B     	 cmp r3,#92
 2170 0010 00D1     	 bne .L226
 2171              	.L225:
1972:fatfs/ff.c    **** 	dj->sclust = 0;						/* Start from the root dir */
 2172              	 .loc 1 1972 0 is_stmt 1
 2173 0012 0135     	 adds r5,r5,#1
 2174              	.LVL297:
 2175              	.L226:
1973:fatfs/ff.c    **** #endif
 2176              	 .loc 1 1973 0
 2177 0014 0026     	 movs r6,#0
 2178 0016 2672     	 strb r6,[r4,#8]
 2179 0018 6672     	 strb r6,[r4,#9]
 2180 001a A672     	 strb r6,[r4,#10]
 2181 001c E672     	 strb r6,[r4,#11]
1976:fatfs/ff.c    **** 		res = dir_sdi(dj, 0);
 2182              	 .loc 1 1976 0
 2183 001e 2B78     	 ldrb r3,[r5]
 2184 0020 1F2B     	 cmp r3,#31
 2185 0022 36D9     	 bls .L227
 2186              	.LBB51:
 2187              	.LBB52:
1823:fatfs/ff.c    **** #else
 2188              	 .loc 1 1823 0
 2189 0024 5F4E     	 ldr r6,.L287
 2190              	.LVL298:
 2191              	.L230:
1795:fatfs/ff.c    **** 	sfn = dj->fn;
 2192              	 .loc 1 1795 0
 2193 0026 2B78     	 ldrb r3,[r5]
 2194 0028 AC46     	 mov ip,r5
 2195              	.LVL299:
 2196 002a 2F2B     	 cmp r3,#47
 2197 002c 05F10105 	 add r5,r5,#1
 2198              	.LVL300:
 2199 0030 F9D0     	 beq .L230
 2200 0032 5C2B     	 cmp r3,#92
 2201 0034 F7D0     	 beq .L230
1796:fatfs/ff.c    **** 	mem_set(sfn, ' ', 11);
 2202              	 .loc 1 1796 0
 2203 0036 A069     	 ldr r0,[r4,#24]
 2204              	.LVL301:
 2205              	.LBB53:
 2206              	.LBB54:
 551:fatfs/ff.c    **** }
 2207              	 .loc 1 551 0
 2208 0038 2021     	 movs r1,#32
 2209              	.LBE54:
 2210              	.LBE53:
1796:fatfs/ff.c    **** 	mem_set(sfn, ' ', 11);
 2211              	 .loc 1 1796 0
 2212 003a 0346     	 mov r3,r0
 2213 003c 00F10B02 	 add r2,r0,#11
 2214              	.LVL302:
 2215              	.L232:
 2216              	.LBB57:
 2217              	.LBB55:
 550:fatfs/ff.c    **** 		*d++ = (BYTE)val;
 2218              	 .loc 1 550 0
 2219 0040 9342     	 cmp r3,r2
 2220 0042 30D1     	 bne .L233
 2221 0044 4FF00008 	 mov r8,#0
 2222 0048 4FF0080E 	 mov lr,#8
 2223 004c 4546     	 mov r5,r8
 2224 004e 4746     	 mov r7,r8
 2225 0050 0CF1FF39 	 add r9,ip,#-1
 2226              	.LVL303:
 2227              	.L234:
 2228              	.LBE55:
 2229              	.LBE57:
1813:fatfs/ff.c    **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 2230              	 .loc 1 1813 0
 2231 0054 19F8013F 	 ldrb r3,[r9,#1]!
 2232 0058 0135     	 adds r5,r5,#1
 2233              	.LVL304:
1814:fatfs/ff.c    **** 		if (c == '.' || i >= ni) {
 2234              	 .loc 1 1814 0
 2235 005a 202B     	 cmp r3,#32
 2236 005c 2DD9     	 bls .L235
 2237 005e 2F2B     	 cmp r3,#47
 2238 0060 2BD0     	 beq .L235
 2239 0062 5C2B     	 cmp r3,#92
 2240 0064 29D0     	 beq .L235
1815:fatfs/ff.c    **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 2241              	 .loc 1 1815 0
 2242 0066 2E2B     	 cmp r3,#46
 2243 0068 00F08480 	 beq .L236
 2244 006c C645     	 cmp lr,r8
 2245 006e 0DD9     	 bls .L262
1820:fatfs/ff.c    **** 			b |= 3;						/* Eliminate NT flag */
 2246              	 .loc 1 1820 0
 2247 0070 1A06     	 lsls r2,r3,#24
1823:fatfs/ff.c    **** #else
 2248              	 .loc 1 1823 0
 2249 0072 44BF     	 itt mi
 2250 0074 803B     	 submi r3,r3,#128
 2251              	.LVL305:
 2252 0076 F35C     	 ldrbmi r3,[r6,r3]
 2253 0078 4B49     	 ldr r1,.L287+4
1821:fatfs/ff.c    **** #ifdef _EXCVT
 2254              	 .loc 1 1821 0
 2255 007a 48BF     	 it mi
 2256 007c 47F00307 	 orrmi r7,r7,#3
 2257              	.LVL306:
 2258              	.L241:
 2259              	.LBB58:
 2260              	.LBB59:
 567:fatfs/ff.c    **** 	return *str;
 2261              	 .loc 1 567 0
 2262 0080 11F8012F 	 ldrb r2,[r1,#1]!
 2263              	.LVL307:
 2264 0084 002A     	 cmp r2,#0
 2265 0086 7ED0     	 beq .L240
 2266 0088 9342     	 cmp r3,r2
 2267 008a F9D1     	 bne .L241
 2268              	.LVL308:
 2269              	.L262:
 2270              	.LBE59:
 2271              	.LBE58:
1816:fatfs/ff.c    **** 			i = 8; ni = 11;
 2272              	 .loc 1 1816 0
 2273 008c 0620     	 movs r0,#6
 2274              	.LVL309:
 2275              	.LBE52:
 2276              	.LBE51:
2006:fatfs/ff.c    **** }
 2277              	 .loc 1 2006 0
 2278 008e BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 2279              	.LVL310:
 2280              	.L227:
1977:fatfs/ff.c    **** 		dj->dir = 0;
 2281              	 .loc 1 1977 0
 2282 0092 3146     	 mov r1,r6
 2283 0094 2046     	 mov r0,r4
 2284              	.LVL311:
 2285 0096 454B     	 ldr r3,.L287+8
 2286 0098 9847     	 blx r3
 2287              	.LVL312:
1978:fatfs/ff.c    **** 	} else {							/* Follow path */
 2288              	 .loc 1 1978 0
 2289 009a 2675     	 strb r6,[r4,#20]
 2290 009c 6675     	 strb r6,[r4,#21]
 2291 009e A675     	 strb r6,[r4,#22]
 2292 00a0 E675     	 strb r6,[r4,#23]
 2293 00a2 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 2294              	.LVL313:
 2295              	.L233:
 2296              	.LBB63:
 2297              	.LBB61:
 2298              	.LBB60:
 2299              	.LBB56:
 551:fatfs/ff.c    **** }
 2300              	 .loc 1 551 0
 2301 00a6 03F8011B 	 strb r1,[r3],#1
 2302              	.LVL314:
 2303 00aa C9E7     	 b .L232
 2304              	.LVL315:
 2305              	.L254:
 2306              	.LBE56:
 2307              	.LBE60:
1840:fatfs/ff.c    **** 			} else {
 2308              	 .loc 1 1840 0
 2309 00ac 47F00207 	 orr r7,r7,#2
 2310              	.LVL316:
 2311              	.L242:
1846:fatfs/ff.c    **** 		}
 2312              	 .loc 1 1846 0
 2313 00b0 00F80830 	 strb r3,[r0,r8]
 2314 00b4 08F10108 	 add r8,r8,#1
 2315              	.LVL317:
 2316 00b8 CCE7     	 b .L234
 2317              	.L235:
1850:fatfs/ff.c    **** 
 2318              	 .loc 1 1850 0
 2319 00ba 212B     	 cmp r3,#33
1849:fatfs/ff.c    **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 2320              	 .loc 1 1849 0
 2321 00bc 6544     	 add r5,r5,ip
 2322              	.LVL318:
1850:fatfs/ff.c    **** 
 2323              	 .loc 1 1850 0
 2324 00be 34BF     	 ite cc
 2325 00c0 0423     	 movcc r3,#4
 2326              	.LVL319:
 2327 00c2 0023     	 movcs r3,#0
 2328              	.LVL320:
1852:fatfs/ff.c    **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 2329              	 .loc 1 1852 0
 2330 00c4 B8F1000F 	 cmp r8,#0
 2331 00c8 E0D0     	 beq .L262
1853:fatfs/ff.c    **** 
 2332              	 .loc 1 1853 0
 2333 00ca 0178     	 ldrb r1,[r0]
 2334 00cc E529     	 cmp r1,#229
 2335 00ce 04BF     	 itt eq
 2336 00d0 0521     	 moveq r1,#5
 2337 00d2 0170     	 strbeq r1,[r0]
1855:fatfs/ff.c    **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 2338              	 .loc 1 1855 0
 2339 00d4 BEF1080F 	 cmp lr,#8
 2340 00d8 04BF     	 itt eq
 2341 00da BA00     	 lsleq r2,r7,#2
 2342 00dc D7B2     	 uxtbeq r7,r2
 2343              	.LVL321:
1856:fatfs/ff.c    **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 2344              	 .loc 1 1856 0
 2345 00de 07F00301 	 and r1,r7,#3
 2346 00e2 0129     	 cmp r1,#1
1857:fatfs/ff.c    **** 
 2347              	 .loc 1 1857 0
 2348 00e4 07F00C02 	 and r2,r7,#12
1856:fatfs/ff.c    **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 2349              	 .loc 1 1856 0
 2350 00e8 08BF     	 it eq
 2351 00ea 43F01003 	 orreq r3,r3,#16
 2352              	.LVL322:
1857:fatfs/ff.c    **** 
 2353              	 .loc 1 1857 0
 2354 00ee 042A     	 cmp r2,#4
 2355 00f0 08BF     	 it eq
 2356 00f2 43F00803 	 orreq r3,r3,#8
 2357              	.LVL323:
1859:fatfs/ff.c    **** 
 2358              	 .loc 1 1859 0
 2359 00f6 C372     	 strb r3,[r0,#11]
 2360              	.LVL324:
 2361              	.LBE61:
 2362              	.LBE63:
 2363              	.LBB64:
 2364              	.LBB65:
1399:fatfs/ff.c    **** 	if (res != FR_OK) return res;
 2365              	 .loc 1 1399 0
 2366 00f8 0021     	 movs r1,#0
 2367 00fa 2046     	 mov r0,r4
 2368              	.LVL325:
 2369 00fc 2B4B     	 ldr r3,.L287+8
 2370 00fe 9847     	 blx r3
 2371              	.LVL326:
1400:fatfs/ff.c    **** 
 2372              	 .loc 1 1400 0
 2373 0100 E0B9     	 cbnz r0,.L248
1406:fatfs/ff.c    **** 		if (res != FR_OK) break;
 2374              	 .loc 1 1406 0
 2375 0102 DFF8B480 	 ldr r8,.L287+20
1436:fatfs/ff.c    **** 	} while (res == FR_OK);
 2376              	 .loc 1 1436 0
 2377 0106 2A4F     	 ldr r7,.L287+12
 2378              	.L251:
1406:fatfs/ff.c    **** 		if (res != FR_OK) break;
 2379              	 .loc 1 1406 0
 2380 0108 2169     	 ldr r1,[r4,#16]
 2381 010a 2068     	 ldr r0,[r4]
 2382              	.LVL327:
 2383 010c C047     	 blx r8
 2384              	.LVL328:
1407:fatfs/ff.c    **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 2385              	 .loc 1 1407 0
 2386 010e A8B9     	 cbnz r0,.L248
1408:fatfs/ff.c    **** 		c = dir[DIR_Name];
 2387              	 .loc 1 1408 0
 2388 0110 6269     	 ldr r2,[r4,#20]
 2389              	.LVL329:
1410:fatfs/ff.c    **** #if _USE_LFN	/* LFN configuration */
 2390              	 .loc 1 1410 0
 2391 0112 1378     	 ldrb r3,[r2]
 2392 0114 EBB1     	 cbz r3,.L259
1433:fatfs/ff.c    **** 			break;
 2393              	 .loc 1 1433 0
 2394 0116 D37A     	 ldrb r3,[r2,#11]
 2395 0118 1907     	 lsls r1,r3,#28
 2396 011a 0AD4     	 bmi .L249
 2397 011c A369     	 ldr r3,[r4,#24]
 2398              	.LVL330:
 2399 011e 03F10B0C 	 add ip,r3,#11
 2400              	.LVL331:
 2401              	.L250:
 2402              	.LBB66:
 2403              	.LBB67:
 560:fatfs/ff.c    **** 	return r;
 2404              	 .loc 1 560 0
 2405 0122 9C45     	 cmp ip,r3
 2406 0124 0AD0     	 beq .L248
 2407              	.LVL332:
 2408 0126 12F801EB 	 ldrb lr,[r2],#1
 2409              	.LVL333:
 2410 012a 13F8011B 	 ldrb r1,[r3],#1
 2411              	.LVL334:
 2412 012e 8E45     	 cmp lr,r1
 2413 0130 F7D0     	 beq .L250
 2414              	.LVL335:
 2415              	.L249:
 2416              	.LBE67:
 2417              	.LBE66:
1436:fatfs/ff.c    **** 	} while (res == FR_OK);
 2418              	 .loc 1 1436 0
 2419 0132 0021     	 movs r1,#0
 2420 0134 2046     	 mov r0,r4
 2421              	.LVL336:
 2422 0136 B847     	 blx r7
 2423              	.LVL337:
1437:fatfs/ff.c    **** 
 2424              	 .loc 1 1437 0
 2425 0138 0028     	 cmp r0,#0
 2426 013a E5D0     	 beq .L251
 2427              	.LVL338:
 2428              	.L248:
 2429              	.LBE65:
 2430              	.LBE64:
1984:fatfs/ff.c    **** 			if (res != FR_OK) {				/* Failed to find the object */
 2431              	 .loc 1 1984 0
 2432 013c A369     	 ldr r3,[r4,#24]
 2433 013e DB7A     	 ldrb r3,[r3,#11]
 2434              	.LVL339:
1985:fatfs/ff.c    **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 2435              	 .loc 1 1985 0
 2436 0140 48B1     	 cbz r0,.L252
1986:fatfs/ff.c    **** 				/* Object not found */
 2437              	 .loc 1 1986 0
 2438 0142 0428     	 cmp r0,#4
 2439 0144 2CD1     	 bne .L263
1993:fatfs/ff.c    **** 				}
 2440              	 .loc 1 1993 0
 2441 0146 13F0040F 	 tst r3,#4
 2442 014a 08BF     	 it eq
 2443 014c 0520     	 moveq r0,#5
 2444 014e BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 2445              	.LVL340:
 2446              	.L259:
 2447              	.LBB69:
 2448              	.LBB68:
1410:fatfs/ff.c    **** #if _USE_LFN	/* LFN configuration */
 2449              	 .loc 1 1410 0
 2450 0152 0420     	 movs r0,#4
 2451              	.LVL341:
 2452 0154 F2E7     	 b .L248
 2453              	.LVL342:
 2454              	.L252:
 2455              	.LBE68:
 2456              	.LBE69:
1997:fatfs/ff.c    **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 2457              	 .loc 1 1997 0
 2458 0156 5A07     	 lsls r2,r3,#29
 2459 0158 22D4     	 bmi .L263
1998:fatfs/ff.c    **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 2460              	 .loc 1 1998 0
 2461 015a 6169     	 ldr r1,[r4,#20]
 2462              	.LVL343:
1999:fatfs/ff.c    **** 				res = FR_NO_PATH; break;
 2463              	 .loc 1 1999 0
 2464 015c CB7A     	 ldrb r3,[r1,#11]
 2465              	.LVL344:
 2466 015e DB06     	 lsls r3,r3,#27
 2467 0160 05D5     	 bpl .L261
2002:fatfs/ff.c    **** 		}
 2468              	 .loc 1 2002 0
 2469 0162 2368     	 ldr r3,[r4]
 2470 0164 1878     	 ldrb r0,[r3]
 2471 0166 134B     	 ldr r3,.L287+16
 2472 0168 9847     	 blx r3
 2473              	.LVL345:
 2474 016a A060     	 str r0,[r4,#8]
1981:fatfs/ff.c    **** 			if (res != FR_OK) break;
 2475              	 .loc 1 1981 0
 2476 016c 5BE7     	 b .L230
 2477              	.LVL346:
 2478              	.L261:
1993:fatfs/ff.c    **** 				}
 2479              	 .loc 1 1993 0
 2480 016e 0520     	 movs r0,#5
 2481 0170 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 2482              	.LVL347:
 2483              	.L236:
 2484              	.LBB70:
 2485              	.LBB62:
1816:fatfs/ff.c    **** 			i = 8; ni = 11;
 2486              	 .loc 1 1816 0
 2487 0174 BEF1080F 	 cmp lr,#8
 2488 0178 88D1     	 bne .L262
 2489              	.LVL348:
1818:fatfs/ff.c    **** 		}
 2490              	 .loc 1 1818 0
 2491 017a BA00     	 lsls r2,r7,#2
1817:fatfs/ff.c    **** 			b <<= 2; continue;
 2492              	 .loc 1 1817 0
 2493 017c F046     	 mov r8,lr
1818:fatfs/ff.c    **** 		}
 2494              	 .loc 1 1818 0
 2495 017e D7B2     	 uxtb r7,r2
 2496              	.LVL349:
1817:fatfs/ff.c    **** 			b <<= 2; continue;
 2497              	 .loc 1 1817 0
 2498 0180 4FF00B0E 	 mov lr,#11
 2499 0184 66E7     	 b .L234
 2500              	.LVL350:
 2501              	.L240:
1839:fatfs/ff.c    **** 				b |= 2;
 2502              	 .loc 1 1839 0
 2503 0186 A3F14102 	 sub r2,r3,#65
 2504 018a 192A     	 cmp r2,#25
 2505 018c 8ED9     	 bls .L254
1842:fatfs/ff.c    **** 					b |= 1; c -= 0x20;
 2506              	 .loc 1 1842 0
 2507 018e A3F16102 	 sub r2,r3,#97
 2508 0192 192A     	 cmp r2,#25
1843:fatfs/ff.c    **** 				}
 2509              	 .loc 1 1843 0
 2510 0194 9EBF     	 ittt ls
 2511 0196 203B     	 subls r3,r3,#32
 2512              	.LVL351:
 2513 0198 47F00107 	 orrls r7,r7,#1
 2514              	.LVL352:
 2515 019c DBB2     	 uxtbls r3,r3
 2516              	.LVL353:
 2517 019e 87E7     	 b .L242
 2518              	.LVL354:
 2519              	.L263:
 2520              	.LBE62:
 2521              	.LBE70:
2007:fatfs/ff.c    **** 
 2522              	 .loc 1 2007 0
 2523 01a0 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 2524              	.LVL355:
 2525              	.L288:
 2526              	 .align 2
 2527              	.L287:
 2528 01a4 00000000 	 .word .LANCHOR2
 2529 01a8 FFFFFFFF 	 .word .LC0-1
 2530 01ac 00000000 	 .word dir_sdi
 2531 01b0 00000000 	 .word dir_next
 2532 01b4 00000000 	 .word ld_clust.isra.0
 2533 01b8 00000000 	 .word move_window
 2534              	 .cfi_endproc
 2535              	.LFE21:
 2537              	 .section .text.dir_register,"ax",%progbits
 2538              	 .align 1
 2539              	 .syntax unified
 2540              	 .thumb
 2541              	 .thumb_func
 2542              	 .fpu softvfp
 2544              	dir_register:
 2545              	.LFB17:
1510:fatfs/ff.c    **** 	FRESULT res;
 2546              	 .loc 1 1510 0
 2547              	 .cfi_startproc
 2548              	 
 2549              	 
 2550              	.LVL356:
 2551 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 2552              	 .cfi_def_cfa_offset 24
 2553              	 .cfi_offset 4,-24
 2554              	 .cfi_offset 5,-20
 2555              	 .cfi_offset 6,-16
 2556              	 .cfi_offset 7,-12
 2557              	 .cfi_offset 8,-8
 2558              	 .cfi_offset 14,-4
1577:fatfs/ff.c    **** 	if (res == FR_OK) {
 2559              	 .loc 1 1577 0
 2560 0004 0021     	 movs r1,#0
 2561 0006 1A4B     	 ldr r3,.L305
1510:fatfs/ff.c    **** 	FRESULT res;
 2562              	 .loc 1 1510 0
 2563 0008 0546     	 mov r5,r0
1577:fatfs/ff.c    **** 	if (res == FR_OK) {
 2564              	 .loc 1 1577 0
 2565 000a 9847     	 blx r3
 2566              	.LVL357:
1578:fatfs/ff.c    **** 		do {	/* Find a blank entry for the SFN */
 2567              	 .loc 1 1578 0
 2568 000c 0446     	 mov r4,r0
 2569 000e 98B9     	 cbnz r0,.L296
1580:fatfs/ff.c    **** 			if (res != FR_OK) break;
 2570              	 .loc 1 1580 0
 2571 0010 184E     	 ldr r6,.L305+4
1584:fatfs/ff.c    **** 		} while (res == FR_OK);
 2572              	 .loc 1 1584 0
 2573 0012 DFF86880 	 ldr r8,.L305+12
 2574 0016 3746     	 mov r7,r6
 2575              	.L292:
1580:fatfs/ff.c    **** 			if (res != FR_OK) break;
 2576              	 .loc 1 1580 0
 2577 0018 2969     	 ldr r1,[r5,#16]
 2578 001a 2868     	 ldr r0,[r5]
 2579              	.LVL358:
 2580 001c B047     	 blx r6
 2581              	.LVL359:
1581:fatfs/ff.c    **** 			c = *dj->dir;
 2582              	 .loc 1 1581 0
 2583 001e 0446     	 mov r4,r0
 2584 0020 50B9     	 cbnz r0,.L296
1582:fatfs/ff.c    **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
 2585              	 .loc 1 1582 0
 2586 0022 6B69     	 ldr r3,[r5,#20]
 2587 0024 1B78     	 ldrb r3,[r3]
 2588              	.LVL360:
1583:fatfs/ff.c    **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
 2589              	 .loc 1 1583 0
 2590 0026 E52B     	 cmp r3,#229
 2591 0028 0CD0     	 beq .L291
1583:fatfs/ff.c    **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
 2592              	 .loc 1 1583 0 is_stmt 0 discriminator 1
 2593 002a 5BB1     	 cbz r3,.L291
1584:fatfs/ff.c    **** 		} while (res == FR_OK);
 2594              	 .loc 1 1584 0 is_stmt 1
 2595 002c 0121     	 movs r1,#1
 2596 002e 2846     	 mov r0,r5
 2597              	.LVL361:
 2598 0030 C047     	 blx r8
 2599              	.LVL362:
1585:fatfs/ff.c    **** 	}
 2600              	 .loc 1 1585 0
 2601 0032 0446     	 mov r4,r0
 2602 0034 0028     	 cmp r0,#0
 2603 0036 EFD0     	 beq .L292
 2604              	.LVL363:
 2605              	.L296:
1603:fatfs/ff.c    **** #endif /* !_FS_READONLY */
 2606              	 .loc 1 1603 0
 2607 0038 2046     	 mov r0,r4
 2608 003a BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 2609              	.LVL364:
 2610              	.L294:
 2611              	.LBB75:
 2612              	.LBB76:
 2613              	.LBB77:
 2614              	.LBB78:
 551:fatfs/ff.c    **** }
 2615              	 .loc 1 551 0
 2616 003e 03F8011B 	 strb r1,[r3],#1
 2617              	.LVL365:
 2618 0042 0AE0     	 b .L293
 2619              	.LVL366:
 2620              	.L291:
 2621              	.LBE78:
 2622              	.LBE77:
1590:fatfs/ff.c    **** 		if (res == FR_OK) {
 2623              	 .loc 1 1590 0
 2624 0044 2969     	 ldr r1,[r5,#16]
 2625 0046 2868     	 ldr r0,[r5]
 2626 0048 B847     	 blx r7
 2627              	.LVL367:
1591:fatfs/ff.c    **** 			dir = dj->dir;
 2628              	 .loc 1 1591 0
 2629 004a 0446     	 mov r4,r0
 2630 004c 0028     	 cmp r0,#0
 2631 004e F3D1     	 bne .L296
1592:fatfs/ff.c    **** 			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
 2632              	 .loc 1 1592 0
 2633 0050 6869     	 ldr r0,[r5,#20]
 2634              	.LVL368:
 2635              	.LBB80:
 2636              	.LBB79:
 551:fatfs/ff.c    **** }
 2637              	 .loc 1 551 0
 2638 0052 2146     	 mov r1,r4
 548:fatfs/ff.c    **** 
 2639              	 .loc 1 548 0
 2640 0054 0346     	 mov r3,r0
 2641 0056 00F12002 	 add r2,r0,#32
 2642              	.LVL369:
 2643              	.L293:
 550:fatfs/ff.c    **** 		*d++ = (BYTE)val;
 2644              	 .loc 1 550 0
 2645 005a 9A42     	 cmp r2,r3
 2646 005c EFD1     	 bne .L294
 2647              	.LVL370:
 2648              	.LBE79:
 2649              	.LBE80:
1594:fatfs/ff.c    **** #if _USE_LFN
 2650              	 .loc 1 1594 0
 2651 005e 0B22     	 movs r2,#11
 2652 0060 054B     	 ldr r3,.L305+8
 2653 0062 A969     	 ldr r1,[r5,#24]
 2654 0064 9847     	 blx r3
 2655              	.LVL371:
1598:fatfs/ff.c    **** 		}
 2656              	 .loc 1 1598 0
 2657 0066 0122     	 movs r2,#1
 2658 0068 2B68     	 ldr r3,[r5]
 2659 006a 1A71     	 strb r2,[r3,#4]
 2660 006c E4E7     	 b .L296
 2661              	.L306:
 2662 006e 00BF     	 .align 2
 2663              	.L305:
 2664 0070 00000000 	 .word dir_sdi
 2665 0074 00000000 	 .word move_window
 2666 0078 00000000 	 .word mem_cpy
 2667 007c 00000000 	 .word dir_next
 2668              	.LBE76:
 2669              	.LBE75:
 2670              	 .cfi_endproc
 2671              	.LFE17:
 2673              	 .section .text.dir_read,"ax",%progbits
 2674              	 .align 1
 2675              	 .syntax unified
 2676              	 .thumb
 2677              	 .thumb_func
 2678              	 .fpu softvfp
 2680              	dir_read:
 2681              	.LFB16:
1453:fatfs/ff.c    **** 	FRESULT res;
 2682              	 .loc 1 1453 0
 2683              	 .cfi_startproc
 2684              	 
 2685              	 
 2686              	.LVL372:
 2687 0000 70B5     	 push {r4,r5,r6,lr}
 2688              	 .cfi_def_cfa_offset 16
 2689              	 .cfi_offset 4,-16
 2690              	 .cfi_offset 5,-12
 2691              	 .cfi_offset 6,-8
 2692              	 .cfi_offset 14,-4
1453:fatfs/ff.c    **** 	FRESULT res;
 2693              	 .loc 1 1453 0
 2694 0002 0446     	 mov r4,r0
1460:fatfs/ff.c    **** 	while (dj->sect) {
 2695              	 .loc 1 1460 0
 2696 0004 0420     	 movs r0,#4
 2697              	.LVL373:
1462:fatfs/ff.c    **** 		if (res != FR_OK) break;
 2698              	 .loc 1 1462 0
 2699 0006 114D     	 ldr r5,.L324
1490:fatfs/ff.c    **** 		if (res != FR_OK) break;
 2700              	 .loc 1 1490 0
 2701 0008 114E     	 ldr r6,.L324+4
 2702              	.LVL374:
 2703              	.L308:
1461:fatfs/ff.c    **** 		res = move_window(dj->fs, dj->sect);
 2704              	 .loc 1 1461 0
 2705 000a 2169     	 ldr r1,[r4,#16]
 2706 000c 09B9     	 cbnz r1,.L312
 2707              	.LVL375:
1494:fatfs/ff.c    **** 
 2708              	 .loc 1 1494 0
 2709 000e 68B1     	 cbz r0,.L313
 2710 0010 13E0     	 b .L309
 2711              	.LVL376:
 2712              	.L312:
1462:fatfs/ff.c    **** 		if (res != FR_OK) break;
 2713              	 .loc 1 1462 0
 2714 0012 2068     	 ldr r0,[r4]
 2715 0014 A847     	 blx r5
 2716              	.LVL377:
1463:fatfs/ff.c    **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 2717              	 .loc 1 1463 0
 2718 0016 80B9     	 cbnz r0,.L309
1464:fatfs/ff.c    **** 		c = dir[DIR_Name];
 2719              	 .loc 1 1464 0
 2720 0018 6269     	 ldr r2,[r4,#20]
 2721              	.LVL378:
1465:fatfs/ff.c    **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2722              	 .loc 1 1465 0
 2723 001a 1378     	 ldrb r3,[r2]
 2724              	.LVL379:
1466:fatfs/ff.c    **** #if _USE_LFN	/* LFN configuration */
 2725              	 .loc 1 1466 0
 2726 001c 9BB1     	 cbz r3,.L314
1487:fatfs/ff.c    **** 			break;
 2727              	 .loc 1 1487 0
 2728 001e E52B     	 cmp r3,#229
 2729 0020 06D0     	 beq .L310
1487:fatfs/ff.c    **** 			break;
 2730              	 .loc 1 1487 0 is_stmt 0 discriminator 1
 2731 0022 2E2B     	 cmp r3,#46
 2732 0024 04D0     	 beq .L310
1487:fatfs/ff.c    **** 			break;
 2733              	 .loc 1 1487 0 discriminator 2
 2734 0026 D37A     	 ldrb r3,[r2,#11]
 2735              	.LVL380:
 2736 0028 1B07     	 lsls r3,r3,#28
 2737 002a 01D4     	 bmi .L310
 2738              	.LVL381:
 2739              	.L313:
1466:fatfs/ff.c    **** #if _USE_LFN	/* LFN configuration */
 2740              	 .loc 1 1466 0 is_stmt 1
 2741 002c 0020     	 movs r0,#0
 2742              	.LVL382:
 2743 002e 70BD     	 pop {r4,r5,r6,pc}
 2744              	.LVL383:
 2745              	.L310:
1490:fatfs/ff.c    **** 		if (res != FR_OK) break;
 2746              	 .loc 1 1490 0
 2747 0030 0021     	 movs r1,#0
 2748 0032 2046     	 mov r0,r4
 2749              	.LVL384:
 2750 0034 B047     	 blx r6
 2751              	.LVL385:
1491:fatfs/ff.c    **** 	}
 2752              	 .loc 1 1491 0
 2753 0036 0028     	 cmp r0,#0
 2754 0038 E7D0     	 beq .L308
 2755              	.LVL386:
 2756              	.L309:
1494:fatfs/ff.c    **** 
 2757              	 .loc 1 1494 0 discriminator 1
 2758 003a 0023     	 movs r3,#0
 2759 003c 2374     	 strb r3,[r4,#16]
 2760 003e 6374     	 strb r3,[r4,#17]
 2761 0040 A374     	 strb r3,[r4,#18]
 2762 0042 E374     	 strb r3,[r4,#19]
1497:fatfs/ff.c    **** #endif
 2763              	 .loc 1 1497 0 discriminator 1
 2764 0044 70BD     	 pop {r4,r5,r6,pc}
 2765              	.LVL387:
 2766              	.L314:
1466:fatfs/ff.c    **** #if _USE_LFN	/* LFN configuration */
 2767              	 .loc 1 1466 0
 2768 0046 0420     	 movs r0,#4
 2769              	.LVL388:
 2770 0048 F7E7     	 b .L309
 2771              	.L325:
 2772 004a 00BF     	 .align 2
 2773              	.L324:
 2774 004c 00000000 	 .word move_window
 2775 0050 00000000 	 .word dir_next
 2776              	 .cfi_endproc
 2777              	.LFE16:
 2779              	 .section .text.remove_chain,"ax",%progbits
 2780              	 .align 1
 2781              	 .syntax unified
 2782              	 .thumb
 2783              	 .thumb_func
 2784              	 .fpu softvfp
 2786              	remove_chain:
 2787              	.LFB9:
 931:fatfs/ff.c    **** 	FRESULT res;
 2788              	 .loc 1 931 0
 2789              	 .cfi_startproc
 2790              	 
 2791              	 
 2792              	.LVL389:
 938:fatfs/ff.c    **** 		res = FR_INT_ERR;
 2793              	 .loc 1 938 0
 2794 0000 0129     	 cmp r1,#1
 931:fatfs/ff.c    **** 	FRESULT res;
 2795              	 .loc 1 931 0
 2796 0002 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 2797              	 .cfi_def_cfa_offset 24
 2798              	 .cfi_offset 4,-24
 2799              	 .cfi_offset 5,-20
 2800              	 .cfi_offset 6,-16
 2801              	 .cfi_offset 7,-12
 2802              	 .cfi_offset 8,-8
 2803              	 .cfi_offset 14,-4
 931:fatfs/ff.c    **** 	FRESULT res;
 2804              	 .loc 1 931 0
 2805 0006 0446     	 mov r4,r0
 2806 0008 0D46     	 mov r5,r1
 938:fatfs/ff.c    **** 		res = FR_INT_ERR;
 2807              	 .loc 1 938 0
 2808 000a 02D8     	 bhi .L327
 2809              	.LVL390:
 2810              	.L329:
 939:fatfs/ff.c    **** 
 2811              	 .loc 1 939 0
 2812 000c 0220     	 movs r0,#2
 2813 000e BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 2814              	.LVL391:
 2815              	.L327:
 938:fatfs/ff.c    **** 		res = FR_INT_ERR;
 2816              	 .loc 1 938 0 discriminator 1
 2817 0012 D0F81630 	 ldr r3,[r0,#22]
 2818 0016 9942     	 cmp r1,r3
 2819 0018 F8D2     	 bcs .L329
 2820              	.LBB83:
 2821              	.LBB84:
 944:fatfs/ff.c    **** 			if (nxt == 0) break;				/* Empty cluster? */
 2822              	 .loc 1 944 0
 2823 001a 134F     	 ldr r7,.L342
 948:fatfs/ff.c    **** 			if (res != FR_OK) break;
 2824              	 .loc 1 948 0
 2825 001c DFF84C80 	 ldr r8,.L342+4
 2826              	.LVL392:
 2827              	.L330:
 943:fatfs/ff.c    **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 2828              	 .loc 1 943 0
 2829 0020 D4F81630 	 ldr r3,[r4,#22]
 2830 0024 9D42     	 cmp r5,r3
 2831 0026 04D2     	 bcs .L334
 944:fatfs/ff.c    **** 			if (nxt == 0) break;				/* Empty cluster? */
 2832              	 .loc 1 944 0
 2833 0028 2946     	 mov r1,r5
 2834 002a 2046     	 mov r0,r4
 2835 002c B847     	 blx r7
 2836              	.LVL393:
 945:fatfs/ff.c    **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 2837              	 .loc 1 945 0
 2838 002e 0646     	 mov r6,r0
 2839 0030 10B9     	 cbnz r0,.L331
 2840              	.LVL394:
 2841              	.L334:
 2842              	.LBE84:
 2843              	.LBE83:
 939:fatfs/ff.c    **** 
 2844              	 .loc 1 939 0
 2845 0032 0020     	 movs r0,#0
 2846 0034 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 2847              	.LVL395:
 2848              	.L331:
 2849              	.LBB87:
 2850              	.LBB85:
 946:fatfs/ff.c    **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 2851              	 .loc 1 946 0
 2852 0038 0128     	 cmp r0,#1
 2853 003a E7D0     	 beq .L329
 947:fatfs/ff.c    **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 2854              	 .loc 1 947 0
 2855 003c 411C     	 adds r1,r0,#1
 2856 003e 0FD0     	 beq .L335
 948:fatfs/ff.c    **** 			if (res != FR_OK) break;
 2857              	 .loc 1 948 0
 2858 0040 0022     	 movs r2,#0
 2859 0042 2946     	 mov r1,r5
 2860 0044 2046     	 mov r0,r4
 2861              	.LVL396:
 2862 0046 C047     	 blx r8
 2863              	.LVL397:
 949:fatfs/ff.c    **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 2864              	 .loc 1 949 0
 2865 0048 58B9     	 cbnz r0,.L328
 950:fatfs/ff.c    **** 				fs->free_clust++;
 2866              	 .loc 1 950 0
 2867 004a D4F80E30 	 ldr r3,[r4,#14]
 2868              	.LBE85:
 2869              	.LBE87:
 931:fatfs/ff.c    **** 	FRESULT res;
 2870              	 .loc 1 931 0
 2871 004e 3546     	 mov r5,r6
 2872              	.LVL398:
 2873              	.LBB88:
 2874              	.LBB86:
 950:fatfs/ff.c    **** 				fs->free_clust++;
 2875              	 .loc 1 950 0
 2876 0050 5A1C     	 adds r2,r3,#1
 951:fatfs/ff.c    **** 				fs->fsi_flag = 1;
 2877              	 .loc 1 951 0
 2878 0052 1FBF     	 itttt ne
 2879 0054 0133     	 addne r3,r3,#1
 2880 0056 C4F80E30 	 strne r3,[r4,#14]
 952:fatfs/ff.c    **** 			}
 2881              	 .loc 1 952 0
 2882 005a 0123     	 movne r3,#1
 2883 005c 6371     	 strbne r3,[r4,#5]
 2884 005e DFE7     	 b .L330
 2885              	.LVL399:
 2886              	.L335:
 947:fatfs/ff.c    **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 2887              	 .loc 1 947 0
 2888 0060 0120     	 movs r0,#1
 2889              	.LVL400:
 2890              	.L328:
 2891              	.LBE86:
 2892              	.LBE88:
 969:fatfs/ff.c    **** #endif
 2893              	 .loc 1 969 0
 2894 0062 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 2895              	.LVL401:
 2896              	.L343:
 2897 0066 00BF     	 .align 2
 2898              	.L342:
 2899 0068 00000000 	 .word get_fat
 2900 006c 00000000 	 .word put_fat
 2901              	 .cfi_endproc
 2902              	.LFE9:
 2904              	 .section .text.f_mount,"ax",%progbits
 2905              	 .align 1
 2906              	 .global f_mount
 2907              	 .syntax unified
 2908              	 .thumb
 2909              	 .thumb_func
 2910              	 .fpu softvfp
 2912              	f_mount:
 2913              	.LFB25:
2229:fatfs/ff.c    **** 
2230:fatfs/ff.c    **** 
2231:fatfs/ff.c    **** 
2232:fatfs/ff.c    **** 
2233:fatfs/ff.c    **** /*--------------------------------------------------------------------------
2234:fatfs/ff.c    **** 
2235:fatfs/ff.c    ****    Public Functions
2236:fatfs/ff.c    **** 
2237:fatfs/ff.c    **** --------------------------------------------------------------------------*/
2238:fatfs/ff.c    **** 
2239:fatfs/ff.c    **** 
2240:fatfs/ff.c    **** 
2241:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2242:fatfs/ff.c    **** /* Mount/Unmount a Logical Drive                                         */
2243:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2244:fatfs/ff.c    **** 
2245:fatfs/ff.c    **** FRESULT f_mount (
2246:fatfs/ff.c    **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
2247:fatfs/ff.c    **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
2248:fatfs/ff.c    **** )
2249:fatfs/ff.c    **** {
 2914              	 .loc 1 2249 0
 2915              	 .cfi_startproc
 2916              	 
 2917              	 
 2918              	 
 2919              	.LVL402:
2250:fatfs/ff.c    **** 	FATFS *rfs;
2251:fatfs/ff.c    **** 
2252:fatfs/ff.c    **** 
2253:fatfs/ff.c    **** 	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 2920              	 .loc 1 2253 0
 2921 0000 48B9     	 cbnz r0,.L348
2254:fatfs/ff.c    **** 		return FR_INVALID_DRIVE;
2255:fatfs/ff.c    **** 	rfs = FatFs[vol];			/* Get current fs object */
 2922              	 .loc 1 2255 0
 2923 0002 064B     	 ldr r3,.L355
 2924 0004 1A68     	 ldr r2,[r3]
 2925              	.LVL403:
2256:fatfs/ff.c    **** 
2257:fatfs/ff.c    **** 	if (rfs) {
 2926              	 .loc 1 2257 0
 2927 0006 02B1     	 cbz r2,.L346
2258:fatfs/ff.c    **** #if _FS_LOCK
2259:fatfs/ff.c    **** 		clear_lock(rfs);
2260:fatfs/ff.c    **** #endif
2261:fatfs/ff.c    **** #if _FS_REENTRANT				/* Discard sync object of the current volume */
2262:fatfs/ff.c    **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
2263:fatfs/ff.c    **** #endif
2264:fatfs/ff.c    **** 		rfs->fs_type = 0;		/* Clear old fs object */
 2928              	 .loc 1 2264 0
 2929 0008 1070     	 strb r0,[r2]
 2930              	.L346:
2265:fatfs/ff.c    **** 	}
2266:fatfs/ff.c    **** 
2267:fatfs/ff.c    **** 	if (fs) {
 2931              	 .loc 1 2267 0
 2932 000a 09B1     	 cbz r1,.L347
2268:fatfs/ff.c    **** 		fs->fs_type = 0;		/* Clear new fs object */
 2933              	 .loc 1 2268 0
 2934 000c 0022     	 movs r2,#0
 2935              	.LVL404:
 2936 000e 0A70     	 strb r2,[r1]
 2937              	.L347:
2269:fatfs/ff.c    **** #if _FS_REENTRANT				/* Create sync object for the new volume */
2270:fatfs/ff.c    **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
2271:fatfs/ff.c    **** #endif
2272:fatfs/ff.c    **** 	}
2273:fatfs/ff.c    **** 	FatFs[vol] = fs;			/* Register new fs object */
 2938              	 .loc 1 2273 0
 2939 0010 1960     	 str r1,[r3]
 2940              	.LVL405:
2274:fatfs/ff.c    **** 
2275:fatfs/ff.c    **** 	return FR_OK;
 2941              	 .loc 1 2275 0
 2942 0012 0020     	 movs r0,#0
 2943              	.LVL406:
 2944 0014 7047     	 bx lr
 2945              	.LVL407:
 2946              	.L348:
2254:fatfs/ff.c    **** 	rfs = FatFs[vol];			/* Get current fs object */
 2947              	 .loc 1 2254 0
 2948 0016 0B20     	 movs r0,#11
 2949              	.LVL408:
2276:fatfs/ff.c    **** }
 2950              	 .loc 1 2276 0
 2951 0018 7047     	 bx lr
 2952              	.L356:
 2953 001a 00BF     	 .align 2
 2954              	.L355:
 2955 001c 00000000 	 .word .LANCHOR0
 2956              	 .cfi_endproc
 2957              	.LFE25:
 2959              	 .section .text.f_open,"ax",%progbits
 2960              	 .align 1
 2961              	 .global f_open
 2962              	 .syntax unified
 2963              	 .thumb
 2964              	 .thumb_func
 2965              	 .fpu softvfp
 2967              	f_open:
 2968              	.LFB26:
2277:fatfs/ff.c    **** 
2278:fatfs/ff.c    **** 
2279:fatfs/ff.c    **** 
2280:fatfs/ff.c    **** 
2281:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2282:fatfs/ff.c    **** /* Open or Create a File                                                 */
2283:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2284:fatfs/ff.c    **** 
2285:fatfs/ff.c    **** FRESULT f_open (
2286:fatfs/ff.c    **** 	FIL *fp,			/* Pointer to the blank file object */
2287:fatfs/ff.c    **** 	const TCHAR *path,	/* Pointer to the file name */
2288:fatfs/ff.c    **** 	BYTE mode			/* Access mode and file open mode flags */
2289:fatfs/ff.c    **** )
2290:fatfs/ff.c    **** {
 2969              	 .loc 1 2290 0
 2970              	 .cfi_startproc
 2971              	 
 2972              	 
 2973              	.LVL409:
 2974 0000 2DE9F043 	 push {r4,r5,r6,r7,r8,r9,lr}
 2975              	 .cfi_def_cfa_offset 28
 2976              	 .cfi_offset 4,-28
 2977              	 .cfi_offset 5,-24
 2978              	 .cfi_offset 6,-20
 2979              	 .cfi_offset 7,-16
 2980              	 .cfi_offset 8,-12
 2981              	 .cfi_offset 9,-8
 2982              	 .cfi_offset 14,-4
 2983 0004 8DB0     	 sub sp,sp,#52
 2984              	 .cfi_def_cfa_offset 80
 2985              	 .loc 1 2290 0
 2986 0006 0191     	 str r1,[sp,#4]
 2987 0008 1646     	 mov r6,r2
2291:fatfs/ff.c    **** 	FRESULT res;
2292:fatfs/ff.c    **** 	DIR dj;
2293:fatfs/ff.c    **** 	BYTE *dir;
2294:fatfs/ff.c    **** 	DEF_NAMEBUF;
2295:fatfs/ff.c    **** 
2296:fatfs/ff.c    **** 
2297:fatfs/ff.c    **** 	if (!fp) return FR_INVALID_OBJECT;
 2988              	 .loc 1 2297 0
 2989 000a 0546     	 mov r5,r0
 2990 000c 0028     	 cmp r0,#0
 2991 000e 00F08B80 	 beq .L365
2298:fatfs/ff.c    **** 	fp->fs = 0;			/* Clear file object */
 2992              	 .loc 1 2298 0
 2993 0012 0023     	 movs r3,#0
2299:fatfs/ff.c    **** 
2300:fatfs/ff.c    **** #if !_FS_READONLY
2301:fatfs/ff.c    **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
2302:fatfs/ff.c    **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 2994              	 .loc 1 2302 0
 2995 0014 02F01E02 	 and r2,r2,#30
 2996              	.LVL410:
2298:fatfs/ff.c    **** 	fp->fs = 0;			/* Clear file object */
 2997              	 .loc 1 2298 0
 2998 0018 0370     	 strb r3,[r0]
 2999 001a 4370     	 strb r3,[r0,#1]
 3000 001c 8370     	 strb r3,[r0,#2]
 3001 001e C370     	 strb r3,[r0,#3]
 3002              	.LVL411:
 3003              	 .loc 1 2302 0
 3004 0020 05A9     	 add r1,sp,#20
 3005              	.LVL412:
 3006 0022 01A8     	 add r0,sp,#4
 3007              	.LVL413:
 3008 0024 434B     	 ldr r3,.L386
 3009 0026 9847     	 blx r3
 3010              	.LVL414:
2303:fatfs/ff.c    **** #else
2304:fatfs/ff.c    **** 	mode &= FA_READ;
2305:fatfs/ff.c    **** 	res = chk_mounted(&path, &dj.fs, 0);
2306:fatfs/ff.c    **** #endif
2307:fatfs/ff.c    **** 	if (res == FR_OK) {
 3011              	 .loc 1 2307 0
 3012 0028 0028     	 cmp r0,#0
 3013 002a 4BD1     	 bne .L358
2308:fatfs/ff.c    **** 		INIT_BUF(dj);
 3014              	 .loc 1 2308 0
 3015 002c 02AB     	 add r3,sp,#8
 3016 002e 0B93     	 str r3,[sp,#44]
2309:fatfs/ff.c    **** 		res = follow_path(&dj, path);	/* Follow the file path */
 3017              	 .loc 1 2309 0
 3018 0030 0199     	 ldr r1,[sp,#4]
 3019 0032 05A8     	 add r0,sp,#20
 3020              	.LVL415:
 3021 0034 404B     	 ldr r3,.L386+4
 3022 0036 9847     	 blx r3
 3023              	.LVL416:
2310:fatfs/ff.c    **** 		dir = dj.dir;
 3024              	 .loc 1 2310 0
 3025 0038 0A9C     	 ldr r4,[sp,#40]
 3026              	.LVL417:
2311:fatfs/ff.c    **** #if !_FS_READONLY	/* R/W configuration */
2312:fatfs/ff.c    **** 		if (res == FR_OK) {
 3027              	 .loc 1 2312 0
 3028 003a 10B9     	 cbnz r0,.L359
2313:fatfs/ff.c    **** 			if (!dir)	/* Current dir itself */
2314:fatfs/ff.c    **** 				res = FR_INVALID_NAME;
 3029              	 .loc 1 2314 0
 3030 003c 002C     	 cmp r4,#0
 3031 003e 08BF     	 it eq
 3032 0040 0620     	 moveq r0,#6
 3033              	.LVL418:
 3034              	.L359:
2315:fatfs/ff.c    **** #if _FS_LOCK
2316:fatfs/ff.c    **** 			else
2317:fatfs/ff.c    **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2318:fatfs/ff.c    **** #endif
2319:fatfs/ff.c    **** 		}
2320:fatfs/ff.c    **** 		/* Create or Open a file */
2321:fatfs/ff.c    **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 3035              	 .loc 1 2321 0
 3036 0042 16F01C0F 	 tst r6,#28
2301:fatfs/ff.c    **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 3037              	 .loc 1 2301 0
 3038 0046 06F01F07 	 and r7,r6,#31
 3039              	.LVL419:
 3040              	 .loc 1 2321 0
 3041 004a 46D0     	 beq .L360
 3042              	.LBB89:
2322:fatfs/ff.c    **** 			DWORD dw, cl;
2323:fatfs/ff.c    **** 
2324:fatfs/ff.c    **** 			if (res != FR_OK) {					/* No file, create new */
 3043              	 .loc 1 2324 0
 3044 004c 0028     	 cmp r0,#0
 3045 004e 3CD0     	 beq .L361
2325:fatfs/ff.c    **** 				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 3046              	 .loc 1 2325 0
 3047 0050 0428     	 cmp r0,#4
 3048 0052 37D1     	 bne .L358
2326:fatfs/ff.c    **** #if _FS_LOCK
2327:fatfs/ff.c    **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2328:fatfs/ff.c    **** #else
2329:fatfs/ff.c    **** 					res = dir_register(&dj);
 3049              	 .loc 1 2329 0
 3050 0054 05A8     	 add r0,sp,#20
 3051              	.LVL420:
 3052 0056 394B     	 ldr r3,.L386+8
 3053 0058 9847     	 blx r3
 3054              	.LVL421:
2330:fatfs/ff.c    **** #endif
2331:fatfs/ff.c    **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
2332:fatfs/ff.c    **** 				dir = dj.dir;					/* New entry */
2333:fatfs/ff.c    **** 			}
2334:fatfs/ff.c    **** 			else {								/* Any object is already existing */
2335:fatfs/ff.c    **** 				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2336:fatfs/ff.c    **** 					res = FR_DENIED;
2337:fatfs/ff.c    **** 				} else {
2338:fatfs/ff.c    **** 					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
2339:fatfs/ff.c    **** 						res = FR_EXIST;
2340:fatfs/ff.c    **** 				}
2341:fatfs/ff.c    **** 			}
2342:fatfs/ff.c    **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 3055              	 .loc 1 2342 0
 3056 005a 98BB     	 cbnz r0,.L358
2332:fatfs/ff.c    **** 			}
 3057              	 .loc 1 2332 0
 3058 005c 0A9C     	 ldr r4,[sp,#40]
2331:fatfs/ff.c    **** 				dir = dj.dir;					/* New entry */
 3059              	 .loc 1 2331 0
 3060 005e 47F00807 	 orr r7,r7,#8
 3061              	.LVL422:
 3062              	.L362:
 3063              	 .loc 1 2342 0 discriminator 1
 3064 0062 3E07     	 lsls r6,r7,#28
 3065 0064 42D5     	 bpl .L363
2343:fatfs/ff.c    **** 				dw = get_fattime();					/* Created time */
 3066              	 .loc 1 2343 0
 3067 0066 364B     	 ldr r3,.L386+12
 3068 0068 9847     	 blx r3
 3069              	.LVL423:
2344:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_CrtTime, dw);
2345:fatfs/ff.c    **** 				dir[DIR_Attr] = 0;					/* Reset attribute */
 3070              	 .loc 1 2345 0
 3071 006a 0026     	 movs r6,#0
2344:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_CrtTime, dw);
 3072              	 .loc 1 2344 0
 3073 006c C0F30723 	 ubfx r3,r0,#8,#8
 3074 0070 A073     	 strb r0,[r4,#14]
 3075 0072 E373     	 strb r3,[r4,#15]
 3076 0074 030C     	 lsrs r3,r0,#16
 3077 0076 000E     	 lsrs r0,r0,#24
 3078              	.LVL424:
 3079 0078 2374     	 strb r3,[r4,#16]
 3080              	 .loc 1 2345 0
 3081 007a E672     	 strb r6,[r4,#11]
2344:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_CrtTime, dw);
 3082              	 .loc 1 2344 0
 3083 007c 6074     	 strb r0,[r4,#17]
2346:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
2347:fatfs/ff.c    **** 				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
 3084              	 .loc 1 2347 0
 3085 007e DDF81480 	 ldr r8,[sp,#20]
2346:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 3086              	 .loc 1 2346 0
 3087 0082 2677     	 strb r6,[r4,#28]
 3088 0084 6677     	 strb r6,[r4,#29]
 3089 0086 A677     	 strb r6,[r4,#30]
 3090 0088 E677     	 strb r6,[r4,#31]
 3091              	 .loc 1 2347 0
 3092 008a 98F80000 	 ldrb r0,[r8]
 3093 008e 2D4B     	 ldr r3,.L386+16
 3094 0090 2146     	 mov r1,r4
 3095 0092 9847     	 blx r3
 3096              	.LVL425:
2348:fatfs/ff.c    **** 				st_clust(dir, 0);					/* cluster = 0 */
2349:fatfs/ff.c    **** 				dj.fs->wflag = 1;
 3097              	 .loc 1 2349 0
 3098 0094 0123     	 movs r3,#1
 3099              	.LBB90:
 3100              	.LBB91:
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 3101              	 .loc 1 1205 0
 3102 0096 A676     	 strb r6,[r4,#26]
 3103 0098 E676     	 strb r6,[r4,#27]
1206:fatfs/ff.c    **** }
 3104              	 .loc 1 1206 0
 3105 009a 2675     	 strb r6,[r4,#20]
 3106 009c 6675     	 strb r6,[r4,#21]
 3107              	.LVL426:
 3108              	.LBE91:
 3109              	.LBE90:
 3110              	 .loc 1 2349 0
 3111 009e 88F80430 	 strb r3,[r8,#4]
2350:fatfs/ff.c    **** 				if (cl) {							/* Remove the cluster chain if exist */
 3112              	 .loc 1 2350 0
 3113 00a2 0646     	 mov r6,r0
 3114 00a4 10B3     	 cbz r0,.L363
2351:fatfs/ff.c    **** 					dw = dj.fs->winsect;
2352:fatfs/ff.c    **** 					res = remove_chain(dj.fs, cl);
 3115              	 .loc 1 2352 0
 3116 00a6 0146     	 mov r1,r0
 3117 00a8 274B     	 ldr r3,.L386+20
 3118 00aa 4046     	 mov r0,r8
 3119              	.LVL427:
2351:fatfs/ff.c    **** 					dw = dj.fs->winsect;
 3120              	 .loc 1 2351 0
 3121 00ac D8F82A90 	 ldr r9,[r8,#42]
 3122              	.LVL428:
 3123              	 .loc 1 2352 0
 3124 00b0 9847     	 blx r3
 3125              	.LVL429:
2353:fatfs/ff.c    **** 					if (res == FR_OK) {
 3126              	 .loc 1 2353 0
 3127 00b2 38B9     	 cbnz r0,.L358
2354:fatfs/ff.c    **** 						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 3128              	 .loc 1 2354 0
 3129 00b4 0598     	 ldr r0,[sp,#20]
 3130              	.LVL430:
 3131 00b6 013E     	 subs r6,r6,#1
 3132              	.LVL431:
 3133 00b8 C0F80A60 	 str r6,[r0,#10]
2355:fatfs/ff.c    **** 						res = move_window(dj.fs, dw);
 3134              	 .loc 1 2355 0
 3135 00bc 4946     	 mov r1,r9
 3136 00be 234B     	 ldr r3,.L386+24
 3137 00c0 9847     	 blx r3
 3138              	.LVL432:
 3139              	.LBE89:
2356:fatfs/ff.c    **** 					}
2357:fatfs/ff.c    **** 				}
2358:fatfs/ff.c    **** 			}
2359:fatfs/ff.c    **** 		}
2360:fatfs/ff.c    **** 		else {	/* Open an existing file */
2361:fatfs/ff.c    **** 			if (res == FR_OK) {						/* Follow succeeded */
2362:fatfs/ff.c    **** 				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
2363:fatfs/ff.c    **** 					res = FR_NO_FILE;
2364:fatfs/ff.c    **** 				} else {
2365:fatfs/ff.c    **** 					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
2366:fatfs/ff.c    **** 						res = FR_DENIED;
2367:fatfs/ff.c    **** 				}
2368:fatfs/ff.c    **** 			}
2369:fatfs/ff.c    **** 		}
2370:fatfs/ff.c    **** 		if (res == FR_OK) {
 3140              	 .loc 1 2370 0
 3141 00c2 98B1     	 cbz r0,.L363
 3142              	.LVL433:
 3143              	.L358:
2371:fatfs/ff.c    **** 			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
2372:fatfs/ff.c    **** 				mode |= FA__WRITTEN;
2373:fatfs/ff.c    **** 			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
2374:fatfs/ff.c    **** 			fp->dir_ptr = dir;
2375:fatfs/ff.c    **** #if _FS_LOCK
2376:fatfs/ff.c    **** 			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2377:fatfs/ff.c    **** 			if (!fp->lockid) res = FR_INT_ERR;
2378:fatfs/ff.c    **** #endif
2379:fatfs/ff.c    **** 		}
2380:fatfs/ff.c    **** 
2381:fatfs/ff.c    **** #else				/* R/O configuration */
2382:fatfs/ff.c    **** 		if (res == FR_OK) {					/* Follow succeeded */
2383:fatfs/ff.c    **** 			dir = dj.dir;
2384:fatfs/ff.c    **** 			if (!dir) {						/* Current dir itself */
2385:fatfs/ff.c    **** 				res = FR_INVALID_NAME;
2386:fatfs/ff.c    **** 			} else {
2387:fatfs/ff.c    **** 				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
2388:fatfs/ff.c    **** 					res = FR_NO_FILE;
2389:fatfs/ff.c    **** 			}
2390:fatfs/ff.c    **** 		}
2391:fatfs/ff.c    **** #endif
2392:fatfs/ff.c    **** 		FREE_BUF();
2393:fatfs/ff.c    **** 
2394:fatfs/ff.c    **** 		if (res == FR_OK) {
2395:fatfs/ff.c    **** 			fp->flag = mode;					/* File access mode */
2396:fatfs/ff.c    **** 			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
2397:fatfs/ff.c    **** 			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
2398:fatfs/ff.c    **** 			fp->fptr = 0;						/* File pointer */
2399:fatfs/ff.c    **** 			fp->dsect = 0;
2400:fatfs/ff.c    **** #if _USE_FASTSEEK
2401:fatfs/ff.c    **** 			fp->cltbl = 0;						/* Normal seek mode */
2402:fatfs/ff.c    **** #endif
2403:fatfs/ff.c    **** 			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
2404:fatfs/ff.c    **** 		}
2405:fatfs/ff.c    **** 	}
2406:fatfs/ff.c    **** 
2407:fatfs/ff.c    **** 	LEAVE_FF(dj.fs, res);
2408:fatfs/ff.c    **** }
 3144              	 .loc 1 2408 0
 3145 00c4 0DB0     	 add sp,sp,#52
 3146              	 .cfi_remember_state
 3147              	 .cfi_def_cfa_offset 28
 3148              	 
 3149 00c6 BDE8F083 	 pop {r4,r5,r6,r7,r8,r9,pc}
 3150              	.LVL434:
 3151              	.L361:
 3152              	 .cfi_restore_state
 3153              	.LBB92:
2335:fatfs/ff.c    **** 					res = FR_DENIED;
 3154              	 .loc 1 2335 0
 3155 00ca E37A     	 ldrb r3,[r4,#11]
 3156 00cc 13F0110F 	 tst r3,#17
 3157 00d0 2ED1     	 bne .L370
2338:fatfs/ff.c    **** 						res = FR_EXIST;
 3158              	 .loc 1 2338 0
 3159 00d2 7307     	 lsls r3,r6,#29
 3160 00d4 C5D5     	 bpl .L362
2339:fatfs/ff.c    **** 				}
 3161              	 .loc 1 2339 0
 3162 00d6 0820     	 movs r0,#8
 3163              	.LVL435:
 3164 00d8 F4E7     	 b .L358
 3165              	.LVL436:
 3166              	.L360:
 3167              	.LBE92:
2361:fatfs/ff.c    **** 				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 3168              	 .loc 1 2361 0
 3169 00da 0028     	 cmp r0,#0
 3170 00dc F2D1     	 bne .L358
2362:fatfs/ff.c    **** 					res = FR_NO_FILE;
 3171              	 .loc 1 2362 0
 3172 00de E37A     	 ldrb r3,[r4,#11]
 3173 00e0 D806     	 lsls r0,r3,#27
 3174              	.LVL437:
 3175 00e2 23D4     	 bmi .L369
2365:fatfs/ff.c    **** 						res = FR_DENIED;
 3176              	 .loc 1 2365 0
 3177 00e4 B107     	 lsls r1,r6,#30
 3178 00e6 01D5     	 bpl .L363
2365:fatfs/ff.c    **** 						res = FR_DENIED;
 3179              	 .loc 1 2365 0 is_stmt 0 discriminator 1
 3180 00e8 DA07     	 lsls r2,r3,#31
 3181 00ea 21D4     	 bmi .L370
 3182              	.L363:
 3183              	.LVL438:
2373:fatfs/ff.c    **** 			fp->dir_ptr = dir;
 3184              	 .loc 1 2373 0 is_stmt 1
 3185 00ec 059E     	 ldr r6,[sp,#20]
2371:fatfs/ff.c    **** 				mode |= FA__WRITTEN;
 3186              	 .loc 1 2371 0
 3187 00ee 3B07     	 lsls r3,r7,#28
2373:fatfs/ff.c    **** 			fp->dir_ptr = dir;
 3188              	 .loc 1 2373 0
 3189 00f0 D6F82A30 	 ldr r3,[r6,#42]
2372:fatfs/ff.c    **** 			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 3190              	 .loc 1 2372 0
 3191 00f4 48BF     	 it mi
 3192 00f6 47F02007 	 orrmi r7,r7,#32
 3193              	.LVL439:
2373:fatfs/ff.c    **** 			fp->dir_ptr = dir;
 3194              	 .loc 1 2373 0
 3195 00fa EB61     	 str r3,[r5,#28]
2374:fatfs/ff.c    **** #if _FS_LOCK
 3196              	 .loc 1 2374 0
 3197 00fc 2C62     	 str r4,[r5,#32]
2395:fatfs/ff.c    **** 			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 3198              	 .loc 1 2395 0
 3199 00fe AF71     	 strb r7,[r5,#6]
2396:fatfs/ff.c    **** 			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 3200              	 .loc 1 2396 0
 3201 0100 3078     	 ldrb r0,[r6]
 3202 0102 104B     	 ldr r3,.L386+16
 3203 0104 2146     	 mov r1,r4
 3204 0106 9847     	 blx r3
 3205              	.LVL440:
 3206 0108 2861     	 str r0,[r5,#16]
2398:fatfs/ff.c    **** 			fp->dsect = 0;
 3207              	 .loc 1 2398 0
 3208 010a 0020     	 movs r0,#0
2397:fatfs/ff.c    **** 			fp->fptr = 0;						/* File pointer */
 3209              	 .loc 1 2397 0
 3210 010c E369     	 ldr r3,[r4,#28]
2398:fatfs/ff.c    **** 			fp->dsect = 0;
 3211              	 .loc 1 2398 0
 3212 010e 2872     	 strb r0,[r5,#8]
2397:fatfs/ff.c    **** 			fp->fptr = 0;						/* File pointer */
 3213              	 .loc 1 2397 0
 3214 0110 EB60     	 str r3,[r5,#12]
2398:fatfs/ff.c    **** 			fp->dsect = 0;
 3215              	 .loc 1 2398 0
 3216 0112 6872     	 strb r0,[r5,#9]
 3217 0114 A872     	 strb r0,[r5,#10]
 3218 0116 E872     	 strb r0,[r5,#11]
2399:fatfs/ff.c    **** #if _USE_FASTSEEK
 3219              	 .loc 1 2399 0
 3220 0118 2876     	 strb r0,[r5,#24]
 3221 011a 6876     	 strb r0,[r5,#25]
 3222 011c A876     	 strb r0,[r5,#26]
 3223 011e E876     	 strb r0,[r5,#27]
2403:fatfs/ff.c    **** 		}
 3224              	 .loc 1 2403 0
 3225 0120 2E60     	 str r6,[r5]
 3226 0122 F388     	 ldrh r3,[r6,#6]
 3227 0124 AB80     	 strh r3,[r5,#4]
 3228 0126 CDE7     	 b .L358
 3229              	.LVL441:
 3230              	.L365:
2297:fatfs/ff.c    **** 	fp->fs = 0;			/* Clear file object */
 3231              	 .loc 1 2297 0
 3232 0128 0920     	 movs r0,#9
 3233              	.LVL442:
 3234 012a CBE7     	 b .L358
 3235              	.LVL443:
 3236              	.L369:
2363:fatfs/ff.c    **** 				} else {
 3237              	 .loc 1 2363 0
 3238 012c 0420     	 movs r0,#4
 3239 012e C9E7     	 b .L358
 3240              	.L370:
 3241              	.LBB93:
2336:fatfs/ff.c    **** 				} else {
 3242              	 .loc 1 2336 0
 3243 0130 0720     	 movs r0,#7
 3244 0132 C7E7     	 b .L358
 3245              	.L387:
 3246              	 .align 2
 3247              	.L386:
 3248 0134 00000000 	 .word chk_mounted
 3249 0138 00000000 	 .word follow_path
 3250 013c 00000000 	 .word dir_register
 3251 0140 00000000 	 .word get_fattime
 3252 0144 00000000 	 .word ld_clust.isra.0
 3253 0148 00000000 	 .word remove_chain
 3254 014c 00000000 	 .word move_window
 3255              	.LBE93:
 3256              	 .cfi_endproc
 3257              	.LFE26:
 3259              	 .section .text.f_read,"ax",%progbits
 3260              	 .align 1
 3261              	 .global f_read
 3262              	 .syntax unified
 3263              	 .thumb
 3264              	 .thumb_func
 3265              	 .fpu softvfp
 3267              	f_read:
 3268              	.LFB27:
2409:fatfs/ff.c    **** 
2410:fatfs/ff.c    **** 
2411:fatfs/ff.c    **** 
2412:fatfs/ff.c    **** 
2413:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2414:fatfs/ff.c    **** /* Read File                                                             */
2415:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2416:fatfs/ff.c    **** 
2417:fatfs/ff.c    **** FRESULT f_read (
2418:fatfs/ff.c    **** 	FIL *fp, 		/* Pointer to the file object */
2419:fatfs/ff.c    **** 	void *buff,		/* Pointer to data buffer */
2420:fatfs/ff.c    **** 	UINT btr,		/* Number of bytes to read */
2421:fatfs/ff.c    **** 	UINT *br		/* Pointer to number of bytes read */
2422:fatfs/ff.c    **** )
2423:fatfs/ff.c    **** {
 3269              	 .loc 1 2423 0
 3270              	 .cfi_startproc
 3271              	 
 3272              	 
 3273              	.LVL444:
 3274 0000 2DE9F74F 	 push {r0,r1,r2,r4,r5,r6,r7,r8,r9,r10,fp,lr}
 3275              	 .cfi_def_cfa_offset 48
 3276              	 .cfi_offset 4,-36
 3277              	 .cfi_offset 5,-32
 3278              	 .cfi_offset 6,-28
 3279              	 .cfi_offset 7,-24
 3280              	 .cfi_offset 8,-20
 3281              	 .cfi_offset 9,-16
 3282              	 .cfi_offset 10,-12
 3283              	 .cfi_offset 11,-8
 3284              	 .cfi_offset 14,-4
 3285              	 .loc 1 2423 0
 3286 0004 9A46     	 mov r10,r3
2424:fatfs/ff.c    **** 	FRESULT res;
2425:fatfs/ff.c    **** 	DWORD clst, sect, remain;
2426:fatfs/ff.c    **** 	UINT rcnt, cc;
2427:fatfs/ff.c    **** 	BYTE csect, *rbuff = buff;
2428:fatfs/ff.c    **** 
2429:fatfs/ff.c    **** 
2430:fatfs/ff.c    **** 	*br = 0;	/* Clear read byte counter */
 3287              	 .loc 1 2430 0
 3288 0006 0023     	 movs r3,#0
 3289              	.LVL445:
 3290 0008 CAF80030 	 str r3,[r10]
2431:fatfs/ff.c    **** 
2432:fatfs/ff.c    **** 	res = validate(fp);							/* Check validity */
 3291              	 .loc 1 2432 0
 3292 000c 494B     	 ldr r3,.L412
2423:fatfs/ff.c    **** 	FRESULT res;
 3293              	 .loc 1 2423 0
 3294 000e 0446     	 mov r4,r0
 3295 0010 8846     	 mov r8,r1
 3296              	.LVL446:
 3297 0012 1546     	 mov r5,r2
 3298              	 .loc 1 2432 0
 3299 0014 9847     	 blx r3
 3300              	.LVL447:
2433:fatfs/ff.c    **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 3301              	 .loc 1 2433 0
 3302 0016 0746     	 mov r7,r0
 3303 0018 80BB     	 cbnz r0,.L389
2434:fatfs/ff.c    **** 	if (fp->flag & FA__ERROR)					/* Aborted file? */
 3304              	 .loc 1 2434 0
 3305 001a A379     	 ldrb r3,[r4,#6]
 3306 001c 1806     	 lsls r0,r3,#24
 3307              	.LVL448:
 3308 001e 1ED4     	 bmi .L405
2435:fatfs/ff.c    **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2436:fatfs/ff.c    **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 3309              	 .loc 1 2436 0
 3310 0020 D907     	 lsls r1,r3,#31
 3311 0022 40F18580 	 bpl .L406
 3312              	.LVL449:
2437:fatfs/ff.c    **** 		LEAVE_FF(fp->fs, FR_DENIED);
2438:fatfs/ff.c    **** 	remain = fp->fsize - fp->fptr;
 3313              	 .loc 1 2438 0
 3314 0026 E368     	 ldr r3,[r4,#12]
 3315 0028 A668     	 ldr r6,[r4,#8]
 3316 002a 9E1B     	 subs r6,r3,r6
 3317 002c AE42     	 cmp r6,r5
 3318 002e 28BF     	 it cs
 3319 0030 2E46     	 movcs r6,r5
 3320              	.LVL450:
 3321              	.L390:
2439:fatfs/ff.c    **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
2440:fatfs/ff.c    **** 
2441:fatfs/ff.c    **** 	for ( ;  btr;								/* Repeat until all data read */
 3322              	 .loc 1 2441 0
 3323 0032 1EB3     	 cbz r6,.L389
2442:fatfs/ff.c    **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2443:fatfs/ff.c    **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 3324              	 .loc 1 2443 0
 3325 0034 A268     	 ldr r2,[r4,#8]
 3326 0036 C2F30803 	 ubfx r3,r2,#0,#9
 3327 003a 002B     	 cmp r3,#0
 3328 003c 5FD1     	 bne .L391
2444:fatfs/ff.c    **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 3329              	 .loc 1 2444 0
 3330 003e 2068     	 ldr r0,[r4]
 3331 0040 8378     	 ldrb r3,[r0,#2]
 3332 0042 013B     	 subs r3,r3,#1
 3333 0044 03EA5223 	 and r3,r3,r2,lsr#9
 3334              	.LVL451:
2445:fatfs/ff.c    **** 			if (!csect) {						/* On the cluster boundary? */
 3335              	 .loc 1 2445 0
 3336 0048 13F0FF03 	 ands r3,r3,#255
 3337              	.LVL452:
 3338 004c 1BD1     	 bne .L392
2446:fatfs/ff.c    **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 3339              	 .loc 1 2446 0
 3340 004e 42B9     	 cbnz r2,.L393
2447:fatfs/ff.c    **** 					clst = fp->sclust;			/* Follow from the origin */
 3341              	 .loc 1 2447 0
 3342 0050 2069     	 ldr r0,[r4,#16]
 3343              	.LVL453:
 3344              	.L394:
2448:fatfs/ff.c    **** 				} else {						/* Middle or end of the file */
2449:fatfs/ff.c    **** #if _USE_FASTSEEK
2450:fatfs/ff.c    **** 					if (fp->cltbl)
2451:fatfs/ff.c    **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2452:fatfs/ff.c    **** 					else
2453:fatfs/ff.c    **** #endif
2454:fatfs/ff.c    **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
2455:fatfs/ff.c    **** 				}
2456:fatfs/ff.c    **** 				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 3345              	 .loc 1 2456 0
 3346 0052 0128     	 cmp r0,#1
 3347 0054 0BD8     	 bhi .L395
 3348              	.LVL454:
 3349              	.L410:
2457:fatfs/ff.c    **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2458:fatfs/ff.c    **** 				fp->clust = clst;				/* Update current cluster */
2459:fatfs/ff.c    **** 			}
2460:fatfs/ff.c    **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
2461:fatfs/ff.c    **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3350              	 .loc 1 2461 0 discriminator 1
 3351 0056 A379     	 ldrb r3,[r4,#6]
 3352 0058 63F07F03 	 orn r3,r3,#127
 3353 005c A371     	 strb r3,[r4,#6]
 3354              	.LVL455:
 3355              	.L405:
2435:fatfs/ff.c    **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 3356              	 .loc 1 2435 0
 3357 005e 0227     	 movs r7,#2
 3358 0060 0CE0     	 b .L389
 3359              	.LVL456:
 3360              	.L393:
2454:fatfs/ff.c    **** 				}
 3361              	 .loc 1 2454 0
 3362 0062 6169     	 ldr r1,[r4,#20]
 3363 0064 344A     	 ldr r2,.L412+4
 3364              	.LVL457:
 3365 0066 0193     	 str r3,[sp,#4]
 3366              	.LVL458:
 3367 0068 9047     	 blx r2
 3368              	.LVL459:
 3369 006a 019B     	 ldr r3,[sp,#4]
 3370              	.LVL460:
 3371 006c F1E7     	 b .L394
 3372              	.L395:
2457:fatfs/ff.c    **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 3373              	 .loc 1 2457 0
 3374 006e 421C     	 adds r2,r0,#1
 3375 0070 08D1     	 bne .L396
 3376              	.LVL461:
 3377              	.L411:
2462:fatfs/ff.c    **** 			sect += csect;
2463:fatfs/ff.c    **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
2464:fatfs/ff.c    **** 			if (cc) {							/* Read maximum contiguous sectors directly */
2465:fatfs/ff.c    **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
2466:fatfs/ff.c    **** 					cc = fp->fs->csize - csect;
2467:fatfs/ff.c    **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
2468:fatfs/ff.c    **** 					ABORT(fp->fs, FR_DISK_ERR);
2469:fatfs/ff.c    **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
2470:fatfs/ff.c    **** #if _FS_TINY
2471:fatfs/ff.c    **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
2472:fatfs/ff.c    **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
2473:fatfs/ff.c    **** #else
2474:fatfs/ff.c    **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
2475:fatfs/ff.c    **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
2476:fatfs/ff.c    **** #endif
2477:fatfs/ff.c    **** #endif
2478:fatfs/ff.c    **** 				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
2479:fatfs/ff.c    **** 				continue;
2480:fatfs/ff.c    **** 			}
2481:fatfs/ff.c    **** #if !_FS_TINY
2482:fatfs/ff.c    **** 			if (fp->dsect != sect) {			/* Load data sector if not in cache */
2483:fatfs/ff.c    **** #if !_FS_READONLY
2484:fatfs/ff.c    **** 				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2485:fatfs/ff.c    **** 					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2486:fatfs/ff.c    **** 						ABORT(fp->fs, FR_DISK_ERR);
2487:fatfs/ff.c    **** 					fp->flag &= ~FA__DIRTY;
2488:fatfs/ff.c    **** 				}
2489:fatfs/ff.c    **** #endif
2490:fatfs/ff.c    **** 				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
2491:fatfs/ff.c    **** 					ABORT(fp->fs, FR_DISK_ERR);
2492:fatfs/ff.c    **** 			}
2493:fatfs/ff.c    **** #endif
2494:fatfs/ff.c    **** 			fp->dsect = sect;
2495:fatfs/ff.c    **** 		}
2496:fatfs/ff.c    **** 		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer 
2497:fatfs/ff.c    **** 		if (rcnt > btr) rcnt = btr;
2498:fatfs/ff.c    **** #if _FS_TINY
2499:fatfs/ff.c    **** 		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
2500:fatfs/ff.c    **** 			ABORT(fp->fs, FR_DISK_ERR);
 3378              	 .loc 1 2500 0
 3379 0072 0127     	 movs r7,#1
 3380 0074 A379     	 ldrb r3,[r4,#6]
 3381 0076 63F07F03 	 orn r3,r3,#127
 3382 007a A371     	 strb r3,[r4,#6]
 3383              	.LVL462:
 3384              	.L389:
2501:fatfs/ff.c    **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2502:fatfs/ff.c    **** #else
2503:fatfs/ff.c    **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2504:fatfs/ff.c    **** #endif
2505:fatfs/ff.c    **** 	}
2506:fatfs/ff.c    **** 
2507:fatfs/ff.c    **** 	LEAVE_FF(fp->fs, FR_OK);
2508:fatfs/ff.c    **** }
 3385              	 .loc 1 2508 0
 3386 007c 3846     	 mov r0,r7
 3387 007e 03B0     	 add sp,sp,#12
 3388              	 .cfi_remember_state
 3389              	 .cfi_def_cfa_offset 36
 3390              	 
 3391 0080 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 3392              	.LVL463:
 3393              	.L396:
 3394              	 .cfi_restore_state
2458:fatfs/ff.c    **** 			}
 3395              	 .loc 1 2458 0
 3396 0084 6061     	 str r0,[r4,#20]
 3397              	.LVL464:
 3398              	.L392:
2460:fatfs/ff.c    **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3399              	 .loc 1 2460 0
 3400 0086 D4F800B0 	 ldr fp,[r4]
 3401 008a 0193     	 str r3,[sp,#4]
 3402 008c 6169     	 ldr r1,[r4,#20]
 3403 008e 2B4B     	 ldr r3,.L412+8
 3404 0090 5846     	 mov r0,fp
 3405 0092 9847     	 blx r3
 3406              	.LVL465:
2461:fatfs/ff.c    **** 			sect += csect;
 3407              	 .loc 1 2461 0
 3408 0094 019B     	 ldr r3,[sp,#4]
 3409 0096 0028     	 cmp r0,#0
 3410 0098 DDD0     	 beq .L410
2464:fatfs/ff.c    **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 3411              	 .loc 1 2464 0
 3412 009a 750A     	 lsrs r5,r6,#9
2462:fatfs/ff.c    **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 3413              	 .loc 1 2462 0
 3414 009c 00EB0309 	 add r9,r0,r3
 3415              	.LVL466:
2464:fatfs/ff.c    **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 3416              	 .loc 1 2464 0
 3417 00a0 2BD0     	 beq .L398
2465:fatfs/ff.c    **** 					cc = fp->fs->csize - csect;
 3418              	 .loc 1 2465 0
 3419 00a2 9BF80220 	 ldrb r2,[fp,#2]
 3420 00a6 5919     	 adds r1,r3,r5
 3421 00a8 9142     	 cmp r1,r2
2466:fatfs/ff.c    **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 3422              	 .loc 1 2466 0
 3423 00aa 88BF     	 it hi
 3424 00ac D51A     	 subhi r5,r2,r3
 3425              	.LVL467:
2467:fatfs/ff.c    **** 					ABORT(fp->fs, FR_DISK_ERR);
 3426              	 .loc 1 2467 0
 3427 00ae 9BF80100 	 ldrb r0,[fp,#1]
 3428 00b2 EBB2     	 uxtb r3,r5
 3429 00b4 4A46     	 mov r2,r9
 3430 00b6 4146     	 mov r1,r8
 3431 00b8 DFF88CB0 	 ldr fp,.L412+20
 3432 00bc D847     	 blx fp
 3433              	.LVL468:
 3434 00be 0028     	 cmp r0,#0
 3435 00c0 D7D1     	 bne .L411
2471:fatfs/ff.c    **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
 3436              	 .loc 1 2471 0
 3437 00c2 2168     	 ldr r1,[r4]
 3438 00c4 0B79     	 ldrb r3,[r1,#4]
 3439 00c6 63B1     	 cbz r3,.L401
2471:fatfs/ff.c    **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
 3440              	 .loc 1 2471 0 is_stmt 0 discriminator 1
 3441 00c8 D1F82A00 	 ldr r0,[r1,#42]
 3442 00cc A0EB0900 	 sub r0,r0,r9
 3443 00d0 8542     	 cmp r5,r0
 3444 00d2 06D9     	 bls .L401
2472:fatfs/ff.c    **** #else
 3445              	 .loc 1 2472 0 is_stmt 1
 3446 00d4 4FF40072 	 mov r2,#512
 3447 00d8 2E31     	 adds r1,r1,#46
 3448 00da 08EB4020 	 add r0,r8,r0,lsl#9
 3449 00de 184B     	 ldr r3,.L412+12
 3450 00e0 9847     	 blx r3
 3451              	.LVL469:
 3452              	.L401:
2478:fatfs/ff.c    **** 				continue;
 3453              	 .loc 1 2478 0
 3454 00e2 6D02     	 lsls r5,r5,#9
 3455              	.LVL470:
 3456              	.L402:
2442:fatfs/ff.c    **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 3457              	 .loc 1 2442 0
 3458 00e4 A368     	 ldr r3,[r4,#8]
 3459 00e6 A844     	 add r8,r8,r5
 3460              	.LVL471:
 3461 00e8 2B44     	 add r3,r3,r5
 3462 00ea A360     	 str r3,[r4,#8]
 3463 00ec DAF80030 	 ldr r3,[r10]
 3464 00f0 761B     	 subs r6,r6,r5
 3465              	.LVL472:
 3466 00f2 2B44     	 add r3,r3,r5
 3467 00f4 CAF80030 	 str r3,[r10]
 3468 00f8 9BE7     	 b .L390
 3469              	.LVL473:
 3470              	.L398:
2494:fatfs/ff.c    **** 		}
 3471              	 .loc 1 2494 0
 3472 00fa C4F81890 	 str r9,[r4,#24]
 3473              	.LVL474:
 3474              	.L391:
2496:fatfs/ff.c    **** 		if (rcnt > btr) rcnt = btr;
 3475              	 .loc 1 2496 0
 3476 00fe A568     	 ldr r5,[r4,#8]
2499:fatfs/ff.c    **** 			ABORT(fp->fs, FR_DISK_ERR);
 3477              	 .loc 1 2499 0
 3478 0100 A169     	 ldr r1,[r4,#24]
2496:fatfs/ff.c    **** 		if (rcnt > btr) rcnt = btr;
 3479              	 .loc 1 2496 0
 3480 0102 C5F30805 	 ubfx r5,r5,#0,#9
 3481 0106 C5F50075 	 rsb r5,r5,#512
 3482              	.LVL475:
 3483 010a B542     	 cmp r5,r6
2499:fatfs/ff.c    **** 			ABORT(fp->fs, FR_DISK_ERR);
 3484              	 .loc 1 2499 0
 3485 010c 2068     	 ldr r0,[r4]
 3486 010e 0D4B     	 ldr r3,.L412+16
 3487 0110 28BF     	 it cs
 3488 0112 3546     	 movcs r5,r6
 3489              	.LVL476:
 3490 0114 9847     	 blx r3
 3491              	.LVL477:
 3492 0116 0028     	 cmp r0,#0
 3493 0118 ABD1     	 bne .L411
2501:fatfs/ff.c    **** #else
 3494              	 .loc 1 2501 0
 3495 011a A368     	 ldr r3,[r4,#8]
 3496 011c 2168     	 ldr r1,[r4]
 3497 011e C3F30803 	 ubfx r3,r3,#0,#9
 3498 0122 2E33     	 adds r3,r3,#46
 3499 0124 1944     	 add r1,r1,r3
 3500 0126 2A46     	 mov r2,r5
 3501 0128 4046     	 mov r0,r8
 3502 012a 054B     	 ldr r3,.L412+12
 3503 012c 9847     	 blx r3
 3504              	.LVL478:
 3505 012e D9E7     	 b .L402
 3506              	.LVL479:
 3507              	.L406:
2437:fatfs/ff.c    **** 	remain = fp->fsize - fp->fptr;
 3508              	 .loc 1 2437 0
 3509 0130 0727     	 movs r7,#7
 3510 0132 A3E7     	 b .L389
 3511              	.L413:
 3512              	 .align 2
 3513              	.L412:
 3514 0134 00000000 	 .word validate
 3515 0138 00000000 	 .word get_fat
 3516 013c 00000000 	 .word clust2sect
 3517 0140 00000000 	 .word mem_cpy
 3518 0144 00000000 	 .word move_window
 3519 0148 00000000 	 .word disk_read
 3520              	 .cfi_endproc
 3521              	.LFE27:
 3523              	 .section .text.f_write,"ax",%progbits
 3524              	 .align 1
 3525              	 .global f_write
 3526              	 .syntax unified
 3527              	 .thumb
 3528              	 .thumb_func
 3529              	 .fpu softvfp
 3531              	f_write:
 3532              	.LFB28:
2509:fatfs/ff.c    **** 
2510:fatfs/ff.c    **** 
2511:fatfs/ff.c    **** 
2512:fatfs/ff.c    **** 
2513:fatfs/ff.c    **** #if !_FS_READONLY
2514:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2515:fatfs/ff.c    **** /* Write File                                                            */
2516:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2517:fatfs/ff.c    **** 
2518:fatfs/ff.c    **** FRESULT f_write (
2519:fatfs/ff.c    **** 	FIL *fp,			/* Pointer to the file object */
2520:fatfs/ff.c    **** 	const void *buff,	/* Pointer to the data to be written */
2521:fatfs/ff.c    **** 	UINT btw,			/* Number of bytes to write */
2522:fatfs/ff.c    **** 	UINT *bw			/* Pointer to number of bytes written */
2523:fatfs/ff.c    **** )
2524:fatfs/ff.c    **** {
 3533              	 .loc 1 2524 0
 3534              	 .cfi_startproc
 3535              	 
 3536              	 
 3537              	.LVL480:
 3538 0000 2DE9F74F 	 push {r0,r1,r2,r4,r5,r6,r7,r8,r9,r10,fp,lr}
 3539              	 .cfi_def_cfa_offset 48
 3540              	 .cfi_offset 4,-36
 3541              	 .cfi_offset 5,-32
 3542              	 .cfi_offset 6,-28
 3543              	 .cfi_offset 7,-24
 3544              	 .cfi_offset 8,-20
 3545              	 .cfi_offset 9,-16
 3546              	 .cfi_offset 10,-12
 3547              	 .cfi_offset 11,-8
 3548              	 .cfi_offset 14,-4
 3549              	 .loc 1 2524 0
 3550 0004 0193     	 str r3,[sp,#4]
2525:fatfs/ff.c    **** 	FRESULT res;
2526:fatfs/ff.c    **** 	DWORD clst, sect;
2527:fatfs/ff.c    **** 	UINT wcnt, cc;
2528:fatfs/ff.c    **** 	const BYTE *wbuff = buff;
2529:fatfs/ff.c    **** 	BYTE csect;
2530:fatfs/ff.c    **** 
2531:fatfs/ff.c    **** 
2532:fatfs/ff.c    **** 	*bw = 0;	/* Clear write byte counter */
 3551              	 .loc 1 2532 0
 3552 0006 0023     	 movs r3,#0
 3553              	.LVL481:
2524:fatfs/ff.c    **** 	FRESULT res;
 3554              	 .loc 1 2524 0
 3555 0008 9046     	 mov r8,r2
 3556              	 .loc 1 2532 0
 3557 000a 019A     	 ldr r2,[sp,#4]
 3558              	.LVL482:
2524:fatfs/ff.c    **** 	FRESULT res;
 3559              	 .loc 1 2524 0
 3560 000c 0446     	 mov r4,r0
 3561              	 .loc 1 2532 0
 3562 000e 1360     	 str r3,[r2]
2533:fatfs/ff.c    **** 
2534:fatfs/ff.c    **** 	res = validate(fp);						/* Check validity */
 3563              	 .loc 1 2534 0
 3564 0010 5F4B     	 ldr r3,.L448
2524:fatfs/ff.c    **** 	FRESULT res;
 3565              	 .loc 1 2524 0
 3566 0012 8946     	 mov r9,r1
 3567              	.LVL483:
 3568              	 .loc 1 2534 0
 3569 0014 9847     	 blx r3
 3570              	.LVL484:
2535:fatfs/ff.c    **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 3571              	 .loc 1 2535 0
 3572 0016 0646     	 mov r6,r0
 3573 0018 00BB     	 cbnz r0,.L415
2536:fatfs/ff.c    **** 	if (fp->flag & FA__ERROR)				/* Aborted file? */
 3574              	 .loc 1 2536 0
 3575 001a A379     	 ldrb r3,[r4,#6]
 3576 001c 1906     	 lsls r1,r3,#24
 3577 001e 00F18580 	 bmi .L438
2537:fatfs/ff.c    **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2538:fatfs/ff.c    **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 3578              	 .loc 1 2538 0
 3579 0022 9A07     	 lsls r2,r3,#30
 3580 0024 40F1B280 	 bpl .L439
2539:fatfs/ff.c    **** 		LEAVE_FF(fp->fs, FR_DENIED);
2540:fatfs/ff.c    **** 	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 3581              	 .loc 1 2540 0
 3582 0028 E368     	 ldr r3,[r4,#12]
 3583 002a 13EB080F 	 cmn r3,r8
 3584 002e 5ED3     	 bcc .L417
 3585              	.LVL485:
 3586              	.L416:
2541:fatfs/ff.c    **** 
2542:fatfs/ff.c    **** 	for ( ;  btw;							/* Repeat until all data written */
2543:fatfs/ff.c    **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2544:fatfs/ff.c    **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
2545:fatfs/ff.c    **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
2546:fatfs/ff.c    **** 			if (!csect) {					/* On the cluster boundary? */
2547:fatfs/ff.c    **** 				if (fp->fptr == 0) {		/* On the top of the file? */
2548:fatfs/ff.c    **** 					clst = fp->sclust;		/* Follow from the origin */
2549:fatfs/ff.c    **** 					if (clst == 0)			/* When no cluster is allocated, */
2550:fatfs/ff.c    **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
2551:fatfs/ff.c    **** 				} else {					/* Middle or end of the file */
2552:fatfs/ff.c    **** #if _USE_FASTSEEK
2553:fatfs/ff.c    **** 					if (fp->cltbl)
2554:fatfs/ff.c    **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2555:fatfs/ff.c    **** 					else
2556:fatfs/ff.c    **** #endif
2557:fatfs/ff.c    **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2558:fatfs/ff.c    **** 				}
2559:fatfs/ff.c    **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2560:fatfs/ff.c    **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2561:fatfs/ff.c    **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2562:fatfs/ff.c    **** 				fp->clust = clst;			/* Update current cluster */
2563:fatfs/ff.c    **** 			}
2564:fatfs/ff.c    **** #if _FS_TINY
2565:fatfs/ff.c    **** 			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
2566:fatfs/ff.c    **** 				ABORT(fp->fs, FR_DISK_ERR);
2567:fatfs/ff.c    **** #else
2568:fatfs/ff.c    **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
2569:fatfs/ff.c    **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2570:fatfs/ff.c    **** 					ABORT(fp->fs, FR_DISK_ERR);
2571:fatfs/ff.c    **** 				fp->flag &= ~FA__DIRTY;
2572:fatfs/ff.c    **** 			}
2573:fatfs/ff.c    **** #endif
2574:fatfs/ff.c    **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
2575:fatfs/ff.c    **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2576:fatfs/ff.c    **** 			sect += csect;
2577:fatfs/ff.c    **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
2578:fatfs/ff.c    **** 			if (cc) {						/* Write maximum contiguous sectors directly */
2579:fatfs/ff.c    **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
2580:fatfs/ff.c    **** 					cc = fp->fs->csize - csect;
2581:fatfs/ff.c    **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
2582:fatfs/ff.c    **** 					ABORT(fp->fs, FR_DISK_ERR);
2583:fatfs/ff.c    **** #if _FS_TINY
2584:fatfs/ff.c    **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct 
2585:fatfs/ff.c    **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
2586:fatfs/ff.c    **** 					fp->fs->wflag = 0;
2587:fatfs/ff.c    **** 				}
2588:fatfs/ff.c    **** #else
2589:fatfs/ff.c    **** 				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write 
2590:fatfs/ff.c    **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
2591:fatfs/ff.c    **** 					fp->flag &= ~FA__DIRTY;
2592:fatfs/ff.c    **** 				}
2593:fatfs/ff.c    **** #endif
2594:fatfs/ff.c    **** 				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
2595:fatfs/ff.c    **** 				continue;
2596:fatfs/ff.c    **** 			}
2597:fatfs/ff.c    **** #if _FS_TINY
2598:fatfs/ff.c    **** 			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
2599:fatfs/ff.c    **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
2600:fatfs/ff.c    **** 				fp->fs->winsect = sect;
2601:fatfs/ff.c    **** 			}
2602:fatfs/ff.c    **** #else
2603:fatfs/ff.c    **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
2604:fatfs/ff.c    **** 				if (fp->fptr < fp->fsize &&
2605:fatfs/ff.c    **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
2606:fatfs/ff.c    **** 						ABORT(fp->fs, FR_DISK_ERR);
2607:fatfs/ff.c    **** 			}
2608:fatfs/ff.c    **** #endif
2609:fatfs/ff.c    **** 			fp->dsect = sect;
2610:fatfs/ff.c    **** 		}
2611:fatfs/ff.c    **** 		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
2612:fatfs/ff.c    **** 		if (wcnt > btw) wcnt = btw;
2613:fatfs/ff.c    **** #if _FS_TINY
2614:fatfs/ff.c    **** 		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
2615:fatfs/ff.c    **** 			ABORT(fp->fs, FR_DISK_ERR);
2616:fatfs/ff.c    **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2617:fatfs/ff.c    **** 		fp->fs->wflag = 1;
2618:fatfs/ff.c    **** #else
2619:fatfs/ff.c    **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2620:fatfs/ff.c    **** 		fp->flag |= FA__DIRTY;
2621:fatfs/ff.c    **** #endif
2622:fatfs/ff.c    **** 	}
2623:fatfs/ff.c    **** 
2624:fatfs/ff.c    **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 3587              	 .loc 1 2624 0
 3588 0030 A368     	 ldr r3,[r4,#8]
 3589 0032 E268     	 ldr r2,[r4,#12]
 3590 0034 9342     	 cmp r3,r2
 3591 0036 00F2A780 	 bhi .L418
 3592              	.L419:
2625:fatfs/ff.c    **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 3593              	 .loc 1 2625 0
 3594 003a A379     	 ldrb r3,[r4,#6]
 3595 003c 43F02003 	 orr r3,r3,#32
 3596 0040 A371     	 strb r3,[r4,#6]
2626:fatfs/ff.c    **** 
2627:fatfs/ff.c    **** 	LEAVE_FF(fp->fs, FR_OK);
 3597              	 .loc 1 2627 0
 3598 0042 0BE0     	 b .L415
 3599              	.LVL486:
 3600              	.L422:
2557:fatfs/ff.c    **** 				}
 3601              	 .loc 1 2557 0
 3602 0044 6169     	 ldr r1,[r4,#20]
 3603 0046 534B     	 ldr r3,.L448+4
 3604              	.LVL487:
 3605 0048 9847     	 blx r3
 3606              	.LVL488:
 3607 004a 0146     	 mov r1,r0
 3608              	.LVL489:
 3609 004c 66E0     	 b .L424
 3610              	.LVL490:
 3611              	.L425:
2561:fatfs/ff.c    **** 				fp->clust = clst;			/* Update current cluster */
 3612              	 .loc 1 2561 0
 3613 004e 4B1C     	 adds r3,r1,#1
 3614 0050 08D1     	 bne .L426
 3615              	.LVL491:
 3616              	.L447:
2615:fatfs/ff.c    **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 3617              	 .loc 1 2615 0
 3618 0052 0126     	 movs r6,#1
 3619 0054 A379     	 ldrb r3,[r4,#6]
 3620 0056 63F07F03 	 orn r3,r3,#127
 3621 005a A371     	 strb r3,[r4,#6]
 3622              	.L415:
2628:fatfs/ff.c    **** }
 3623              	 .loc 1 2628 0
 3624 005c 3046     	 mov r0,r6
 3625 005e 03B0     	 add sp,sp,#12
 3626              	 .cfi_remember_state
 3627              	 .cfi_def_cfa_offset 36
 3628              	 
 3629 0060 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 3630              	.LVL492:
 3631              	.L426:
 3632              	 .cfi_restore_state
2562:fatfs/ff.c    **** 			}
 3633              	 .loc 1 2562 0
 3634 0064 6161     	 str r1,[r4,#20]
 3635              	.LVL493:
 3636              	.L421:
2565:fatfs/ff.c    **** 				ABORT(fp->fs, FR_DISK_ERR);
 3637              	 .loc 1 2565 0
 3638 0066 2068     	 ldr r0,[r4]
 3639 0068 A369     	 ldr r3,[r4,#24]
 3640 006a D0F82A20 	 ldr r2,[r0,#42]
 3641 006e 9A42     	 cmp r2,r3
 3642 0070 04D1     	 bne .L427
2565:fatfs/ff.c    **** 				ABORT(fp->fs, FR_DISK_ERR);
 3643              	 .loc 1 2565 0 is_stmt 0 discriminator 1
 3644 0072 0021     	 movs r1,#0
 3645 0074 484B     	 ldr r3,.L448+8
 3646 0076 9847     	 blx r3
 3647              	.LVL494:
 3648 0078 0028     	 cmp r0,#0
 3649 007a EAD1     	 bne .L447
 3650              	.L427:
2574:fatfs/ff.c    **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3651              	 .loc 1 2574 0 is_stmt 1
 3652 007c D4F800B0 	 ldr fp,[r4]
 3653 0080 6169     	 ldr r1,[r4,#20]
 3654 0082 5846     	 mov r0,fp
 3655 0084 454B     	 ldr r3,.L448+12
 3656 0086 9847     	 blx r3
 3657              	.LVL495:
2575:fatfs/ff.c    **** 			sect += csect;
 3658              	 .loc 1 2575 0
 3659 0088 0028     	 cmp r0,#0
 3660 008a 4BD0     	 beq .L446
2578:fatfs/ff.c    **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 3661              	 .loc 1 2578 0
 3662 008c 5FEA5825 	 lsrs r5,r8,#9
2576:fatfs/ff.c    **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 3663              	 .loc 1 2576 0
 3664 0090 00EB070A 	 add r10,r0,r7
 3665              	.LVL496:
2578:fatfs/ff.c    **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 3666              	 .loc 1 2578 0
 3667 0094 4CD0     	 beq .L429
2579:fatfs/ff.c    **** 					cc = fp->fs->csize - csect;
 3668              	 .loc 1 2579 0
 3669 0096 9BF80230 	 ldrb r3,[fp,#2]
 3670 009a 7A19     	 adds r2,r7,r5
 3671 009c 9A42     	 cmp r2,r3
2580:fatfs/ff.c    **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 3672              	 .loc 1 2580 0
 3673 009e 88BF     	 it hi
 3674 00a0 DD1B     	 subhi r5,r3,r7
 3675              	.LVL497:
2581:fatfs/ff.c    **** 					ABORT(fp->fs, FR_DISK_ERR);
 3676              	 .loc 1 2581 0
 3677 00a2 EBB2     	 uxtb r3,r5
 3678 00a4 3E4F     	 ldr r7,.L448+16
 3679 00a6 5246     	 mov r2,r10
 3680 00a8 4946     	 mov r1,r9
 3681 00aa 9BF80100 	 ldrb r0,[fp,#1]
 3682 00ae B847     	 blx r7
 3683              	.LVL498:
 3684 00b0 0746     	 mov r7,r0
 3685 00b2 0028     	 cmp r0,#0
 3686 00b4 CDD1     	 bne .L447
2584:fatfs/ff.c    **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 3687              	 .loc 1 2584 0
 3688 00b6 2068     	 ldr r0,[r4]
 3689 00b8 D0F82A10 	 ldr r1,[r0,#42]
 3690 00bc A1EB0A01 	 sub r1,r1,r10
 3691 00c0 8D42     	 cmp r5,r1
 3692 00c2 08D9     	 bls .L432
2585:fatfs/ff.c    **** 					fp->fs->wflag = 0;
 3693              	 .loc 1 2585 0
 3694 00c4 374B     	 ldr r3,.L448+20
 3695 00c6 4FF40072 	 mov r2,#512
 3696 00ca 09EB4121 	 add r1,r9,r1,lsl#9
 3697 00ce 2E30     	 adds r0,r0,#46
 3698 00d0 9847     	 blx r3
 3699              	.LVL499:
2586:fatfs/ff.c    **** 				}
 3700              	 .loc 1 2586 0
 3701 00d2 2368     	 ldr r3,[r4]
 3702 00d4 1F71     	 strb r7,[r3,#4]
 3703              	.L432:
2594:fatfs/ff.c    **** 				continue;
 3704              	 .loc 1 2594 0
 3705 00d6 6D02     	 lsls r5,r5,#9
 3706              	.LVL500:
 3707              	.L433:
2543:fatfs/ff.c    **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 3708              	 .loc 1 2543 0
 3709 00d8 A368     	 ldr r3,[r4,#8]
 3710 00da 019A     	 ldr r2,[sp,#4]
 3711 00dc 2B44     	 add r3,r3,r5
 3712 00de A360     	 str r3,[r4,#8]
 3713 00e0 019B     	 ldr r3,[sp,#4]
 3714 00e2 A944     	 add r9,r9,r5
 3715              	.LVL501:
 3716 00e4 1B68     	 ldr r3,[r3]
 3717 00e6 A8EB0508 	 sub r8,r8,r5
 3718              	.LVL502:
 3719 00ea 2B44     	 add r3,r3,r5
 3720 00ec 1360     	 str r3,[r2]
 3721              	.LVL503:
 3722              	.L417:
2542:fatfs/ff.c    **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 3723              	 .loc 1 2542 0
 3724 00ee B8F1000F 	 cmp r8,#0
 3725 00f2 9DD0     	 beq .L416
2544:fatfs/ff.c    **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 3726              	 .loc 1 2544 0
 3727 00f4 A368     	 ldr r3,[r4,#8]
 3728 00f6 C3F30802 	 ubfx r2,r3,#0,#9
 3729 00fa 42BB     	 cbnz r2,.L420
2545:fatfs/ff.c    **** 			if (!csect) {					/* On the cluster boundary? */
 3730              	 .loc 1 2545 0
 3731 00fc 2068     	 ldr r0,[r4]
 3732 00fe 8778     	 ldrb r7,[r0,#2]
 3733 0100 013F     	 subs r7,r7,#1
 3734 0102 07EA5327 	 and r7,r7,r3,lsr#9
 3735              	.LVL504:
2546:fatfs/ff.c    **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 3736              	 .loc 1 2546 0
 3737 0106 17F0FF07 	 ands r7,r7,#255
 3738              	.LVL505:
 3739 010a ACD1     	 bne .L421
2547:fatfs/ff.c    **** 					clst = fp->sclust;		/* Follow from the origin */
 3740              	 .loc 1 2547 0
 3741 010c 002B     	 cmp r3,#0
 3742 010e 99D1     	 bne .L422
2548:fatfs/ff.c    **** 					if (clst == 0)			/* When no cluster is allocated, */
 3743              	 .loc 1 2548 0
 3744 0110 2169     	 ldr r1,[r4,#16]
 3745              	.LVL506:
2549:fatfs/ff.c    **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 3746              	 .loc 1 2549 0
 3747 0112 29B9     	 cbnz r1,.L423
2550:fatfs/ff.c    **** 				} else {					/* Middle or end of the file */
 3748              	 .loc 1 2550 0
 3749 0114 1F4B     	 ldr r3,.L448+4
 3750              	.LVL507:
 3751 0116 9847     	 blx r3
 3752              	.LVL508:
 3753 0118 0146     	 mov r1,r0
 3754              	.LVL509:
 3755 011a 2061     	 str r0,[r4,#16]
 3756              	.L424:
2559:fatfs/ff.c    **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 3757              	 .loc 1 2559 0
 3758 011c 0029     	 cmp r1,#0
 3759 011e 87D0     	 beq .L416
 3760              	.LVL510:
 3761              	.L423:
2560:fatfs/ff.c    **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 3762              	 .loc 1 2560 0
 3763 0120 0129     	 cmp r1,#1
 3764 0122 94D1     	 bne .L425
 3765              	.LVL511:
 3766              	.L446:
2575:fatfs/ff.c    **** 			sect += csect;
 3767              	 .loc 1 2575 0 discriminator 1
 3768 0124 A379     	 ldrb r3,[r4,#6]
 3769 0126 63F07F03 	 orn r3,r3,#127
 3770 012a A371     	 strb r3,[r4,#6]
 3771              	.L438:
2537:fatfs/ff.c    **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 3772              	 .loc 1 2537 0
 3773 012c 0226     	 movs r6,#2
 3774 012e 95E7     	 b .L415
 3775              	.LVL512:
 3776              	.L429:
2598:fatfs/ff.c    **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
 3777              	 .loc 1 2598 0
 3778 0130 A268     	 ldr r2,[r4,#8]
 3779 0132 E368     	 ldr r3,[r4,#12]
 3780 0134 9A42     	 cmp r2,r3
 3781 0136 08D3     	 bcc .L434
2599:fatfs/ff.c    **** 				fp->fs->winsect = sect;
 3782              	 .loc 1 2599 0
 3783 0138 2946     	 mov r1,r5
 3784 013a 5846     	 mov r0,fp
 3785 013c 164B     	 ldr r3,.L448+8
 3786 013e 9847     	 blx r3
 3787              	.LVL513:
 3788 0140 0028     	 cmp r0,#0
 3789 0142 86D1     	 bne .L447
2600:fatfs/ff.c    **** 			}
 3790              	 .loc 1 2600 0
 3791 0144 2368     	 ldr r3,[r4]
 3792 0146 C3F82AA0 	 str r10,[r3,#42]
 3793              	.L434:
2609:fatfs/ff.c    **** 		}
 3794              	 .loc 1 2609 0
 3795 014a C4F818A0 	 str r10,[r4,#24]
 3796              	.LVL514:
 3797              	.L420:
2611:fatfs/ff.c    **** 		if (wcnt > btw) wcnt = btw;
 3798              	 .loc 1 2611 0
 3799 014e A568     	 ldr r5,[r4,#8]
2614:fatfs/ff.c    **** 			ABORT(fp->fs, FR_DISK_ERR);
 3800              	 .loc 1 2614 0
 3801 0150 A169     	 ldr r1,[r4,#24]
2611:fatfs/ff.c    **** 		if (wcnt > btw) wcnt = btw;
 3802              	 .loc 1 2611 0
 3803 0152 C5F30805 	 ubfx r5,r5,#0,#9
 3804 0156 C5F50075 	 rsb r5,r5,#512
 3805              	.LVL515:
 3806 015a 4545     	 cmp r5,r8
2614:fatfs/ff.c    **** 			ABORT(fp->fs, FR_DISK_ERR);
 3807              	 .loc 1 2614 0
 3808 015c 2068     	 ldr r0,[r4]
 3809 015e 0E4B     	 ldr r3,.L448+8
 3810 0160 28BF     	 it cs
 3811 0162 4546     	 movcs r5,r8
 3812              	.LVL516:
 3813 0164 9847     	 blx r3
 3814              	.LVL517:
 3815 0166 0028     	 cmp r0,#0
 3816 0168 7FF473AF 	 bne .L447
2616:fatfs/ff.c    **** 		fp->fs->wflag = 1;
 3817              	 .loc 1 2616 0
 3818 016c A368     	 ldr r3,[r4,#8]
 3819 016e 2068     	 ldr r0,[r4]
 3820 0170 C3F30803 	 ubfx r3,r3,#0,#9
 3821 0174 2E33     	 adds r3,r3,#46
 3822 0176 2A46     	 mov r2,r5
 3823 0178 1844     	 add r0,r0,r3
 3824 017a 4946     	 mov r1,r9
 3825 017c 094B     	 ldr r3,.L448+20
 3826 017e 9847     	 blx r3
 3827              	.LVL518:
2617:fatfs/ff.c    **** #else
 3828              	 .loc 1 2617 0
 3829 0180 0122     	 movs r2,#1
 3830 0182 2368     	 ldr r3,[r4]
 3831 0184 1A71     	 strb r2,[r3,#4]
 3832 0186 A7E7     	 b .L433
 3833              	.LVL519:
 3834              	.L418:
2624:fatfs/ff.c    **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 3835              	 .loc 1 2624 0 discriminator 1
 3836 0188 E360     	 str r3,[r4,#12]
 3837 018a 56E7     	 b .L419
 3838              	.LVL520:
 3839              	.L439:
2539:fatfs/ff.c    **** 	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 3840              	 .loc 1 2539 0
 3841 018c 0726     	 movs r6,#7
 3842 018e 65E7     	 b .L415
 3843              	.L449:
 3844              	 .align 2
 3845              	.L448:
 3846 0190 00000000 	 .word validate
 3847 0194 00000000 	 .word create_chain
 3848 0198 00000000 	 .word move_window
 3849 019c 00000000 	 .word clust2sect
 3850 01a0 00000000 	 .word disk_write
 3851 01a4 00000000 	 .word mem_cpy
 3852              	 .cfi_endproc
 3853              	.LFE28:
 3855              	 .section .text.f_sync,"ax",%progbits
 3856              	 .align 1
 3857              	 .global f_sync
 3858              	 .syntax unified
 3859              	 .thumb
 3860              	 .thumb_func
 3861              	 .fpu softvfp
 3863              	f_sync:
 3864              	.LFB29:
2629:fatfs/ff.c    **** 
2630:fatfs/ff.c    **** 
2631:fatfs/ff.c    **** 
2632:fatfs/ff.c    **** 
2633:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2634:fatfs/ff.c    **** /* Synchronize the File Object                                           */
2635:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2636:fatfs/ff.c    **** 
2637:fatfs/ff.c    **** FRESULT f_sync (
2638:fatfs/ff.c    **** 	FIL *fp		/* Pointer to the file object */
2639:fatfs/ff.c    **** )
2640:fatfs/ff.c    **** {
 3865              	 .loc 1 2640 0
 3866              	 .cfi_startproc
 3867              	 
 3868              	 
 3869              	.LVL521:
 3870 0000 70B5     	 push {r4,r5,r6,lr}
 3871              	 .cfi_def_cfa_offset 16
 3872              	 .cfi_offset 4,-16
 3873              	 .cfi_offset 5,-12
 3874              	 .cfi_offset 6,-8
 3875              	 .cfi_offset 14,-4
2641:fatfs/ff.c    **** 	FRESULT res;
2642:fatfs/ff.c    **** 	DWORD tim;
2643:fatfs/ff.c    **** 	BYTE *dir;
2644:fatfs/ff.c    **** 
2645:fatfs/ff.c    **** 
2646:fatfs/ff.c    **** 	res = validate(fp);					/* Check validity of the object */
 3876              	 .loc 1 2646 0
 3877 0002 204B     	 ldr r3,.L455
2640:fatfs/ff.c    **** 	FRESULT res;
 3878              	 .loc 1 2640 0
 3879 0004 0546     	 mov r5,r0
 3880              	 .loc 1 2646 0
 3881 0006 9847     	 blx r3
 3882              	.LVL522:
2647:fatfs/ff.c    **** 	if (res == FR_OK) {
 3883              	 .loc 1 2647 0
 3884 0008 0028     	 cmp r0,#0
 3885 000a 39D1     	 bne .L451
2648:fatfs/ff.c    **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 3886              	 .loc 1 2648 0
 3887 000c AB79     	 ldrb r3,[r5,#6]
 3888 000e 9B06     	 lsls r3,r3,#26
 3889 0010 36D5     	 bpl .L451
2649:fatfs/ff.c    **** #if !_FS_TINY	/* Write-back dirty buffer */
2650:fatfs/ff.c    **** 			if (fp->flag & FA__DIRTY) {
2651:fatfs/ff.c    **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2652:fatfs/ff.c    **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
2653:fatfs/ff.c    **** 				fp->flag &= ~FA__DIRTY;
2654:fatfs/ff.c    **** 			}
2655:fatfs/ff.c    **** #endif
2656:fatfs/ff.c    **** 			/* Update the directory entry */
2657:fatfs/ff.c    **** 			res = move_window(fp->fs, fp->dir_sect);
 3890              	 .loc 1 2657 0
 3891 0012 E969     	 ldr r1,[r5,#28]
 3892 0014 2868     	 ldr r0,[r5]
 3893              	.LVL523:
 3894 0016 1C4B     	 ldr r3,.L455+4
 3895 0018 9847     	 blx r3
 3896              	.LVL524:
 3897 001a 0646     	 mov r6,r0
 3898              	.LVL525:
2658:fatfs/ff.c    **** 			if (res == FR_OK) {
 3899              	 .loc 1 2658 0
 3900 001c 80BB     	 cbnz r0,.L451
 3901              	.LVL526:
 3902              	.LBB98:
 3903              	.LBB99:
2659:fatfs/ff.c    **** 				dir = fp->dir_ptr;
 3904              	 .loc 1 2659 0
 3905 001e 2C6A     	 ldr r4,[r5,#32]
 3906              	.LVL527:
2660:fatfs/ff.c    **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 3907              	 .loc 1 2660 0
 3908 0020 E37A     	 ldrb r3,[r4,#11]
 3909 0022 43F02003 	 orr r3,r3,#32
 3910 0026 E372     	 strb r3,[r4,#11]
2661:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 3911              	 .loc 1 2661 0
 3912 0028 EB68     	 ldr r3,[r5,#12]
 3913 002a 2377     	 strb r3,[r4,#28]
 3914 002c EB68     	 ldr r3,[r5,#12]
 3915 002e C3F30723 	 ubfx r3,r3,#8,#8
 3916 0032 6377     	 strb r3,[r4,#29]
 3917 0034 EB68     	 ldr r3,[r5,#12]
 3918 0036 1B0C     	 lsrs r3,r3,#16
 3919 0038 A377     	 strb r3,[r4,#30]
 3920 003a EB68     	 ldr r3,[r5,#12]
 3921 003c 1B0E     	 lsrs r3,r3,#24
 3922 003e E377     	 strb r3,[r4,#31]
2662:fatfs/ff.c    **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 3923              	 .loc 1 2662 0
 3924 0040 2B69     	 ldr r3,[r5,#16]
 3925              	.LVL528:
 3926              	.LBB100:
 3927              	.LBB101:
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 3928              	 .loc 1 1205 0
 3929 0042 A376     	 strb r3,[r4,#26]
 3930 0044 C3F30722 	 ubfx r2,r3,#8,#8
1206:fatfs/ff.c    **** }
 3931              	 .loc 1 1206 0
 3932 0048 1B0C     	 lsrs r3,r3,#16
 3933              	.LVL529:
 3934 004a 2375     	 strb r3,[r4,#20]
 3935 004c 1B0A     	 lsrs r3,r3,#8
 3936 004e 6375     	 strb r3,[r4,#21]
 3937              	.LVL530:
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 3938              	 .loc 1 1205 0
 3939 0050 E276     	 strb r2,[r4,#27]
 3940              	.LBE101:
 3941              	.LBE100:
2663:fatfs/ff.c    **** 				tim = get_fattime();						/* Update updated time */
 3942              	 .loc 1 2663 0
 3943 0052 0E4B     	 ldr r3,.L455+8
 3944 0054 9847     	 blx r3
 3945              	.LVL531:
2664:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 3946              	 .loc 1 2664 0
 3947 0056 C0F30723 	 ubfx r3,r0,#8,#8
 3948 005a A075     	 strb r0,[r4,#22]
 3949 005c E375     	 strb r3,[r4,#23]
 3950 005e 030C     	 lsrs r3,r0,#16
 3951 0060 000E     	 lsrs r0,r0,#24
 3952              	.LVL532:
 3953 0062 2376     	 strb r3,[r4,#24]
 3954 0064 6076     	 strb r0,[r4,#25]
2665:fatfs/ff.c    **** 				ST_WORD(dir+DIR_LstAccDate, 0);
 3955              	 .loc 1 2665 0
 3956 0066 A674     	 strb r6,[r4,#18]
 3957 0068 E674     	 strb r6,[r4,#19]
2666:fatfs/ff.c    **** 				fp->flag &= ~FA__WRITTEN;
 3958              	 .loc 1 2666 0
 3959 006a AB79     	 ldrb r3,[r5,#6]
2667:fatfs/ff.c    **** 				fp->fs->wflag = 1;
 3960              	 .loc 1 2667 0
 3961 006c 2868     	 ldr r0,[r5]
2666:fatfs/ff.c    **** 				fp->flag &= ~FA__WRITTEN;
 3962              	 .loc 1 2666 0
 3963 006e 23F02003 	 bic r3,r3,#32
 3964 0072 AB71     	 strb r3,[r5,#6]
 3965              	 .loc 1 2667 0
 3966 0074 0123     	 movs r3,#1
 3967 0076 0371     	 strb r3,[r0,#4]
 3968              	.LBE99:
 3969              	.LBE98:
2668:fatfs/ff.c    **** 				res = sync(fp->fs);
2669:fatfs/ff.c    **** 			}
2670:fatfs/ff.c    **** 		}
2671:fatfs/ff.c    **** 	}
2672:fatfs/ff.c    **** 
2673:fatfs/ff.c    **** 	LEAVE_FF(fp->fs, res);
2674:fatfs/ff.c    **** }
 3970              	 .loc 1 2674 0
 3971 0078 BDE87040 	 pop {r4,r5,r6,lr}
 3972              	 .cfi_remember_state
 3973              	 .cfi_restore 14
 3974              	 .cfi_restore 6
 3975              	 .cfi_restore 5
 3976              	 .cfi_restore 4
 3977              	 .cfi_def_cfa_offset 0
 3978              	.LVL533:
 3979              	.LBB103:
 3980              	.LBB102:
2668:fatfs/ff.c    **** 				res = sync(fp->fs);
 3981              	 .loc 1 2668 0
 3982 007c 044B     	 ldr r3,.L455+12
 3983 007e 1847     	 bx r3
 3984              	.LVL534:
 3985              	.L451:
 3986              	 .cfi_restore_state
 3987              	.LBE102:
 3988              	.LBE103:
 3989              	 .loc 1 2674 0
 3990 0080 70BD     	 pop {r4,r5,r6,pc}
 3991              	.LVL535:
 3992              	.L456:
 3993 0082 00BF     	 .align 2
 3994              	.L455:
 3995 0084 00000000 	 .word validate
 3996 0088 00000000 	 .word move_window
 3997 008c 00000000 	 .word get_fattime
 3998 0090 00000000 	 .word sync
 3999              	 .cfi_endproc
 4000              	.LFE29:
 4002              	 .section .text.f_close,"ax",%progbits
 4003              	 .align 1
 4004              	 .global f_close
 4005              	 .syntax unified
 4006              	 .thumb
 4007              	 .thumb_func
 4008              	 .fpu softvfp
 4010              	f_close:
 4011              	.LFB30:
2675:fatfs/ff.c    **** 
2676:fatfs/ff.c    **** #endif /* !_FS_READONLY */
2677:fatfs/ff.c    **** 
2678:fatfs/ff.c    **** 
2679:fatfs/ff.c    **** 
2680:fatfs/ff.c    **** 
2681:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2682:fatfs/ff.c    **** /* Close File                                                            */
2683:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2684:fatfs/ff.c    **** 
2685:fatfs/ff.c    **** FRESULT f_close (
2686:fatfs/ff.c    **** 	FIL *fp		/* Pointer to the file object to be closed */
2687:fatfs/ff.c    **** )
2688:fatfs/ff.c    **** {
 4012              	 .loc 1 2688 0
 4013              	 .cfi_startproc
 4014              	 
 4015              	 
 4016              	.LVL536:
 4017 0000 10B5     	 push {r4,lr}
 4018              	 .cfi_def_cfa_offset 8
 4019              	 .cfi_offset 4,-8
 4020              	 .cfi_offset 14,-4
2689:fatfs/ff.c    **** 	FRESULT res;
2690:fatfs/ff.c    **** 
2691:fatfs/ff.c    **** 
2692:fatfs/ff.c    **** #if _FS_READONLY
2693:fatfs/ff.c    **** 	res = validate(fp);
2694:fatfs/ff.c    **** 	{
2695:fatfs/ff.c    **** #if _FS_REENTRANT
2696:fatfs/ff.c    **** 		FATFS *fs = fp->fs;
2697:fatfs/ff.c    **** #endif
2698:fatfs/ff.c    **** 		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
2699:fatfs/ff.c    **** 		LEAVE_FF(fs, res);
2700:fatfs/ff.c    **** 	}
2701:fatfs/ff.c    **** #else
2702:fatfs/ff.c    **** 	res = f_sync(fp);		/* Flush cached data */
 4021              	 .loc 1 2702 0
 4022 0002 044B     	 ldr r3,.L459
2688:fatfs/ff.c    **** 	FRESULT res;
 4023              	 .loc 1 2688 0
 4024 0004 0446     	 mov r4,r0
 4025              	 .loc 1 2702 0
 4026 0006 9847     	 blx r3
 4027              	.LVL537:
2703:fatfs/ff.c    **** #if _FS_LOCK
2704:fatfs/ff.c    **** 	if (res == FR_OK) {		/* Decrement open counter */
2705:fatfs/ff.c    **** #if _FS_REENTRANT
2706:fatfs/ff.c    **** 		FATFS *fs = fp->fs;;
2707:fatfs/ff.c    **** 		res = validate(fp);
2708:fatfs/ff.c    **** 		if (res == FR_OK) {
2709:fatfs/ff.c    **** 			res = dec_lock(fp->lockid);
2710:fatfs/ff.c    **** 			unlock_fs(fs, FR_OK);
2711:fatfs/ff.c    **** 		}
2712:fatfs/ff.c    **** #else
2713:fatfs/ff.c    **** 		res = dec_lock(fp->lockid);
2714:fatfs/ff.c    **** #endif
2715:fatfs/ff.c    **** 	}
2716:fatfs/ff.c    **** #endif
2717:fatfs/ff.c    **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 4028              	 .loc 1 2717 0
 4029 0008 18B9     	 cbnz r0,.L458
 4030              	 .loc 1 2717 0 is_stmt 0 discriminator 1
 4031 000a 2070     	 strb r0,[r4]
 4032 000c 6070     	 strb r0,[r4,#1]
 4033 000e A070     	 strb r0,[r4,#2]
 4034 0010 E070     	 strb r0,[r4,#3]
 4035              	.L458:
2718:fatfs/ff.c    **** 	return res;
2719:fatfs/ff.c    **** #endif
2720:fatfs/ff.c    **** }
 4036              	 .loc 1 2720 0 is_stmt 1
 4037 0012 10BD     	 pop {r4,pc}
 4038              	.LVL538:
 4039              	.L460:
 4040              	 .align 2
 4041              	.L459:
 4042 0014 00000000 	 .word f_sync
 4043              	 .cfi_endproc
 4044              	.LFE30:
 4046              	 .section .text.f_lseek,"ax",%progbits
 4047              	 .align 1
 4048              	 .global f_lseek
 4049              	 .syntax unified
 4050              	 .thumb
 4051              	 .thumb_func
 4052              	 .fpu softvfp
 4054              	f_lseek:
 4055              	.LFB31:
2721:fatfs/ff.c    **** 
2722:fatfs/ff.c    **** 
2723:fatfs/ff.c    **** 
2724:fatfs/ff.c    **** 
2725:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2726:fatfs/ff.c    **** /* Current Drive/Directory Handlings                                     */
2727:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2728:fatfs/ff.c    **** 
2729:fatfs/ff.c    **** #if _FS_RPATH >= 1
2730:fatfs/ff.c    **** 
2731:fatfs/ff.c    **** FRESULT f_chdrive (
2732:fatfs/ff.c    **** 	BYTE drv		/* Drive number */
2733:fatfs/ff.c    **** )
2734:fatfs/ff.c    **** {
2735:fatfs/ff.c    **** 	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
2736:fatfs/ff.c    **** 
2737:fatfs/ff.c    **** 	CurrVol = drv;
2738:fatfs/ff.c    **** 
2739:fatfs/ff.c    **** 	return FR_OK;
2740:fatfs/ff.c    **** }
2741:fatfs/ff.c    **** 
2742:fatfs/ff.c    **** 
2743:fatfs/ff.c    **** 
2744:fatfs/ff.c    **** FRESULT f_chdir (
2745:fatfs/ff.c    **** 	const TCHAR *path	/* Pointer to the directory path */
2746:fatfs/ff.c    **** )
2747:fatfs/ff.c    **** {
2748:fatfs/ff.c    **** 	FRESULT res;
2749:fatfs/ff.c    **** 	DIR dj;
2750:fatfs/ff.c    **** 	DEF_NAMEBUF;
2751:fatfs/ff.c    **** 
2752:fatfs/ff.c    **** 
2753:fatfs/ff.c    **** 	res = chk_mounted(&path, &dj.fs, 0);
2754:fatfs/ff.c    **** 	if (res == FR_OK) {
2755:fatfs/ff.c    **** 		INIT_BUF(dj);
2756:fatfs/ff.c    **** 		res = follow_path(&dj, path);		/* Follow the path */
2757:fatfs/ff.c    **** 		FREE_BUF();
2758:fatfs/ff.c    **** 		if (res == FR_OK) {					/* Follow completed */
2759:fatfs/ff.c    **** 			if (!dj.dir) {
2760:fatfs/ff.c    **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
2761:fatfs/ff.c    **** 			} else {
2762:fatfs/ff.c    **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
2763:fatfs/ff.c    **** 					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
2764:fatfs/ff.c    **** 				else
2765:fatfs/ff.c    **** 					res = FR_NO_PATH;		/* Reached but a file */
2766:fatfs/ff.c    **** 			}
2767:fatfs/ff.c    **** 		}
2768:fatfs/ff.c    **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2769:fatfs/ff.c    **** 	}
2770:fatfs/ff.c    **** 
2771:fatfs/ff.c    **** 	LEAVE_FF(dj.fs, res);
2772:fatfs/ff.c    **** }
2773:fatfs/ff.c    **** 
2774:fatfs/ff.c    **** 
2775:fatfs/ff.c    **** #if _FS_RPATH >= 2
2776:fatfs/ff.c    **** FRESULT f_getcwd (
2777:fatfs/ff.c    **** 	TCHAR *path,	/* Pointer to the directory path */
2778:fatfs/ff.c    **** 	UINT sz_path	/* Size of path */
2779:fatfs/ff.c    **** )
2780:fatfs/ff.c    **** {
2781:fatfs/ff.c    **** 	FRESULT res;
2782:fatfs/ff.c    **** 	DIR dj;
2783:fatfs/ff.c    **** 	UINT i, n;
2784:fatfs/ff.c    **** 	DWORD ccl;
2785:fatfs/ff.c    **** 	TCHAR *tp;
2786:fatfs/ff.c    **** 	FILINFO fno;
2787:fatfs/ff.c    **** 	DEF_NAMEBUF;
2788:fatfs/ff.c    **** 
2789:fatfs/ff.c    **** 
2790:fatfs/ff.c    **** 	*path = 0;
2791:fatfs/ff.c    **** 	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
2792:fatfs/ff.c    **** 	if (res == FR_OK) {
2793:fatfs/ff.c    **** 		INIT_BUF(dj);
2794:fatfs/ff.c    **** 		i = sz_path;		/* Bottom of buffer (dir stack base) */
2795:fatfs/ff.c    **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
2796:fatfs/ff.c    **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
2797:fatfs/ff.c    **** 			res = dir_sdi(&dj, 1);			/* Get parent dir */
2798:fatfs/ff.c    **** 			if (res != FR_OK) break;
2799:fatfs/ff.c    **** 			res = dir_read(&dj);
2800:fatfs/ff.c    **** 			if (res != FR_OK) break;
2801:fatfs/ff.c    **** 			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent dir */
2802:fatfs/ff.c    **** 			res = dir_sdi(&dj, 0);
2803:fatfs/ff.c    **** 			if (res != FR_OK) break;
2804:fatfs/ff.c    **** 			do {							/* Find the entry links to the child dir */
2805:fatfs/ff.c    **** 				res = dir_read(&dj);
2806:fatfs/ff.c    **** 				if (res != FR_OK) break;
2807:fatfs/ff.c    **** 				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
2808:fatfs/ff.c    **** 				res = dir_next(&dj, 0);
2809:fatfs/ff.c    **** 			} while (res == FR_OK);
2810:fatfs/ff.c    **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
2811:fatfs/ff.c    **** 			if (res != FR_OK) break;
2812:fatfs/ff.c    **** #if _USE_LFN
2813:fatfs/ff.c    **** 			fno.lfname = path;
2814:fatfs/ff.c    **** 			fno.lfsize = i;
2815:fatfs/ff.c    **** #endif
2816:fatfs/ff.c    **** 			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
2817:fatfs/ff.c    **** 			tp = fno.fname;
2818:fatfs/ff.c    **** 			if (_USE_LFN && *path) tp = path;
2819:fatfs/ff.c    **** 			for (n = 0; tp[n]; n++) ;
2820:fatfs/ff.c    **** 			if (i < n + 3) {
2821:fatfs/ff.c    **** 				res = FR_NOT_ENOUGH_CORE; break;
2822:fatfs/ff.c    **** 			}
2823:fatfs/ff.c    **** 			while (n) path[--i] = tp[--n];
2824:fatfs/ff.c    **** 			path[--i] = '/';
2825:fatfs/ff.c    **** 		}
2826:fatfs/ff.c    **** 		tp = path;
2827:fatfs/ff.c    **** 		if (res == FR_OK) {
2828:fatfs/ff.c    **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
2829:fatfs/ff.c    **** 			*tp++ = ':';
2830:fatfs/ff.c    **** 			if (i == sz_path) {				/* Root-dir */
2831:fatfs/ff.c    **** 				*tp++ = '/';
2832:fatfs/ff.c    **** 			} else {						/* Sub-dir */
2833:fatfs/ff.c    **** 				do		/* Add stacked path str */
2834:fatfs/ff.c    **** 					*tp++ = path[i++];
2835:fatfs/ff.c    **** 				while (i < sz_path);
2836:fatfs/ff.c    **** 			}
2837:fatfs/ff.c    **** 		}
2838:fatfs/ff.c    **** 		*tp = 0;
2839:fatfs/ff.c    **** 		FREE_BUF();
2840:fatfs/ff.c    **** 	}
2841:fatfs/ff.c    **** 
2842:fatfs/ff.c    **** 	LEAVE_FF(dj.fs, res);
2843:fatfs/ff.c    **** }
2844:fatfs/ff.c    **** #endif /* _FS_RPATH >= 2 */
2845:fatfs/ff.c    **** #endif /* _FS_RPATH >= 1 */
2846:fatfs/ff.c    **** 
2847:fatfs/ff.c    **** 
2848:fatfs/ff.c    **** 
2849:fatfs/ff.c    **** #if _FS_MINIMIZE <= 2
2850:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2851:fatfs/ff.c    **** /* Seek File R/W Pointer                                                 */
2852:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
2853:fatfs/ff.c    **** 
2854:fatfs/ff.c    **** FRESULT f_lseek (
2855:fatfs/ff.c    **** 	FIL *fp,		/* Pointer to the file object */
2856:fatfs/ff.c    **** 	DWORD ofs		/* File pointer from top of file */
2857:fatfs/ff.c    **** )
2858:fatfs/ff.c    **** {
 4056              	 .loc 1 2858 0
 4057              	 .cfi_startproc
 4058              	 
 4059              	 
 4060              	.LVL539:
 4061 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 4062              	 .cfi_def_cfa_offset 32
 4063              	 .cfi_offset 3,-32
 4064              	 .cfi_offset 4,-28
 4065              	 .cfi_offset 5,-24
 4066              	 .cfi_offset 6,-20
 4067              	 .cfi_offset 7,-16
 4068              	 .cfi_offset 8,-12
 4069              	 .cfi_offset 9,-8
 4070              	 .cfi_offset 14,-4
2859:fatfs/ff.c    **** 	FRESULT res;
2860:fatfs/ff.c    **** 
2861:fatfs/ff.c    **** 
2862:fatfs/ff.c    **** 	res = validate(fp);					/* Check validity of the object */
 4071              	 .loc 1 2862 0
 4072 0004 434B     	 ldr r3,.L501
2858:fatfs/ff.c    **** 	FRESULT res;
 4073              	 .loc 1 2858 0
 4074 0006 0446     	 mov r4,r0
 4075 0008 0D46     	 mov r5,r1
 4076              	 .loc 1 2862 0
 4077 000a 9847     	 blx r3
 4078              	.LVL540:
2863:fatfs/ff.c    **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 4079              	 .loc 1 2863 0
 4080 000c 0746     	 mov r7,r0
 4081 000e 0028     	 cmp r0,#0
 4082 0010 5FD1     	 bne .L485
2864:fatfs/ff.c    **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 4083              	 .loc 1 2864 0
 4084 0012 A279     	 ldrb r2,[r4,#6]
 4085 0014 1106     	 lsls r1,r2,#24
 4086 0016 53D4     	 bmi .L483
 4087              	.LBB104:
2865:fatfs/ff.c    **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2866:fatfs/ff.c    **** 
2867:fatfs/ff.c    **** #if _USE_FASTSEEK
2868:fatfs/ff.c    **** 	if (fp->cltbl) {	/* Fast seek */
2869:fatfs/ff.c    **** 		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
2870:fatfs/ff.c    **** 
2871:fatfs/ff.c    **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
2872:fatfs/ff.c    **** 			tbl = fp->cltbl;
2873:fatfs/ff.c    **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
2874:fatfs/ff.c    **** 			cl = fp->sclust;			/* Top of the chain */
2875:fatfs/ff.c    **** 			if (cl) {
2876:fatfs/ff.c    **** 				do {
2877:fatfs/ff.c    **** 					/* Get a fragment */
2878:fatfs/ff.c    **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
2879:fatfs/ff.c    **** 					do {
2880:fatfs/ff.c    **** 						pcl = cl; ncl++;
2881:fatfs/ff.c    **** 						cl = get_fat(fp->fs, cl);
2882:fatfs/ff.c    **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
2883:fatfs/ff.c    **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2884:fatfs/ff.c    **** 					} while (cl == pcl + 1);
2885:fatfs/ff.c    **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
2886:fatfs/ff.c    **** 						*tbl++ = ncl; *tbl++ = tcl;
2887:fatfs/ff.c    **** 					}
2888:fatfs/ff.c    **** 				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
2889:fatfs/ff.c    **** 			}
2890:fatfs/ff.c    **** 			*fp->cltbl = ulen;	/* Number of items used */
2891:fatfs/ff.c    **** 			if (ulen <= tlen)
2892:fatfs/ff.c    **** 				*tbl = 0;		/* Terminate table */
2893:fatfs/ff.c    **** 			else
2894:fatfs/ff.c    **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
2895:fatfs/ff.c    **** 
2896:fatfs/ff.c    **** 		} else {						/* Fast seek */
2897:fatfs/ff.c    **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
2898:fatfs/ff.c    **** 				ofs = fp->fsize;
2899:fatfs/ff.c    **** 			fp->fptr = ofs;				/* Set file pointer */
2900:fatfs/ff.c    **** 			if (ofs) {
2901:fatfs/ff.c    **** 				fp->clust = clmt_clust(fp, ofs - 1);
2902:fatfs/ff.c    **** 				dsc = clust2sect(fp->fs, fp->clust);
2903:fatfs/ff.c    **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
2904:fatfs/ff.c    **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
2905:fatfs/ff.c    **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
2906:fatfs/ff.c    **** #if !_FS_TINY
2907:fatfs/ff.c    **** #if !_FS_READONLY
2908:fatfs/ff.c    **** 					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2909:fatfs/ff.c    **** 						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2910:fatfs/ff.c    **** 							ABORT(fp->fs, FR_DISK_ERR);
2911:fatfs/ff.c    **** 						fp->flag &= ~FA__DIRTY;
2912:fatfs/ff.c    **** 					}
2913:fatfs/ff.c    **** #endif
2914:fatfs/ff.c    **** 					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
2915:fatfs/ff.c    **** 						ABORT(fp->fs, FR_DISK_ERR);
2916:fatfs/ff.c    **** #endif
2917:fatfs/ff.c    **** 					fp->dsect = dsc;
2918:fatfs/ff.c    **** 				}
2919:fatfs/ff.c    **** 			}
2920:fatfs/ff.c    **** 		}
2921:fatfs/ff.c    **** 	} else
2922:fatfs/ff.c    **** #endif
2923:fatfs/ff.c    **** 
2924:fatfs/ff.c    **** 	/* Normal Seek */
2925:fatfs/ff.c    **** 	{
2926:fatfs/ff.c    **** 		DWORD clst, bcs, nsect, ifptr;
2927:fatfs/ff.c    **** 
2928:fatfs/ff.c    **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 4088              	 .loc 1 2928 0
 4089 0018 E368     	 ldr r3,[r4,#12]
 4090 001a AB42     	 cmp r3,r5
 4091 001c 03D2     	 bcs .L463
2929:fatfs/ff.c    **** #if !_FS_READONLY
2930:fatfs/ff.c    **** 			 && !(fp->flag & FA_WRITE)
 4092              	 .loc 1 2930 0
 4093 001e 12F0020F 	 tst r2,#2
 4094 0022 08BF     	 it eq
 4095 0024 1D46     	 moveq r5,r3
 4096              	.LVL541:
 4097              	.L463:
2931:fatfs/ff.c    **** #endif
2932:fatfs/ff.c    **** 			) ofs = fp->fsize;
2933:fatfs/ff.c    **** 
2934:fatfs/ff.c    **** 		ifptr = fp->fptr;
2935:fatfs/ff.c    **** 		fp->fptr = nsect = 0;
 4098              	 .loc 1 2935 0
 4099 0026 0022     	 movs r2,#0
2934:fatfs/ff.c    **** 		fp->fptr = nsect = 0;
 4100              	 .loc 1 2934 0
 4101 0028 A368     	 ldr r3,[r4,#8]
 4102              	.LVL542:
 4103              	 .loc 1 2935 0
 4104 002a 2272     	 strb r2,[r4,#8]
 4105 002c 6272     	 strb r2,[r4,#9]
 4106 002e A272     	 strb r2,[r4,#10]
 4107 0030 E272     	 strb r2,[r4,#11]
2936:fatfs/ff.c    **** 		if (ofs) {
 4108              	 .loc 1 2936 0
 4109 0032 9DB9     	 cbnz r5,.L464
2937:fatfs/ff.c    **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
2938:fatfs/ff.c    **** 			if (ifptr > 0 &&
2939:fatfs/ff.c    **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
2940:fatfs/ff.c    **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
2941:fatfs/ff.c    **** 				ofs -= fp->fptr;
2942:fatfs/ff.c    **** 				clst = fp->clust;
2943:fatfs/ff.c    **** 			} else {									/* When seek to back cluster, */
2944:fatfs/ff.c    **** 				clst = fp->sclust;						/* start from the first cluster */
2945:fatfs/ff.c    **** #if !_FS_READONLY
2946:fatfs/ff.c    **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
2947:fatfs/ff.c    **** 					clst = create_chain(fp->fs, 0);
2948:fatfs/ff.c    **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2949:fatfs/ff.c    **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2950:fatfs/ff.c    **** 					fp->sclust = clst;
2951:fatfs/ff.c    **** 				}
2952:fatfs/ff.c    **** #endif
2953:fatfs/ff.c    **** 				fp->clust = clst;
2954:fatfs/ff.c    **** 			}
2955:fatfs/ff.c    **** 			if (clst != 0) {
2956:fatfs/ff.c    **** 				while (ofs > bcs) {						/* Cluster following loop */
2957:fatfs/ff.c    **** #if !_FS_READONLY
2958:fatfs/ff.c    **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
2959:fatfs/ff.c    **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
2960:fatfs/ff.c    **** 						if (clst == 0) {				/* When disk gets full, clip file size */
2961:fatfs/ff.c    **** 							ofs = bcs; break;
2962:fatfs/ff.c    **** 						}
2963:fatfs/ff.c    **** 					} else
2964:fatfs/ff.c    **** #endif
2965:fatfs/ff.c    **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
2966:fatfs/ff.c    **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2967:fatfs/ff.c    **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
2968:fatfs/ff.c    **** 					fp->clust = clst;
2969:fatfs/ff.c    **** 					fp->fptr += bcs;
2970:fatfs/ff.c    **** 					ofs -= bcs;
2971:fatfs/ff.c    **** 				}
2972:fatfs/ff.c    **** 				fp->fptr += ofs;
2973:fatfs/ff.c    **** 				if (ofs % SS(fp->fs)) {
2974:fatfs/ff.c    **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
2975:fatfs/ff.c    **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
2976:fatfs/ff.c    **** 					nsect += ofs / SS(fp->fs);
2977:fatfs/ff.c    **** 				}
2978:fatfs/ff.c    **** 			}
2979:fatfs/ff.c    **** 		}
2980:fatfs/ff.c    **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 4110              	 .loc 1 2980 0
 4111 0034 A368     	 ldr r3,[r4,#8]
 4112              	.LVL543:
 4113 0036 08E0     	 b .L482
 4114              	.LVL544:
 4115              	.L472:
2935:fatfs/ff.c    **** 		if (ofs) {
 4116              	 .loc 1 2935 0
 4117 0038 0025     	 movs r5,#0
 4118              	.LVL545:
 4119              	.L466:
 4120              	 .loc 1 2980 0
 4121 003a A368     	 ldr r3,[r4,#8]
 4122 003c C3F30802 	 ubfx r2,r3,#0,#9
 4123 0040 1AB1     	 cbz r2,.L482
 4124              	 .loc 1 2980 0 is_stmt 0 discriminator 1
 4125 0042 A269     	 ldr r2,[r4,#24]
 4126 0044 9542     	 cmp r5,r2
2981:fatfs/ff.c    **** #if !_FS_TINY
2982:fatfs/ff.c    **** #if !_FS_READONLY
2983:fatfs/ff.c    **** 			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
2984:fatfs/ff.c    **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2985:fatfs/ff.c    **** 					ABORT(fp->fs, FR_DISK_ERR);
2986:fatfs/ff.c    **** 				fp->flag &= ~FA__DIRTY;
2987:fatfs/ff.c    **** 			}
2988:fatfs/ff.c    **** #endif
2989:fatfs/ff.c    **** 			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
2990:fatfs/ff.c    **** 				ABORT(fp->fs, FR_DISK_ERR);
2991:fatfs/ff.c    **** #endif
2992:fatfs/ff.c    **** 			fp->dsect = nsect;
 4127              	 .loc 1 2992 0 is_stmt 1 discriminator 1
 4128 0046 18BF     	 it ne
 4129 0048 A561     	 strne r5,[r4,#24]
 4130              	.LVL546:
 4131              	.L482:
2993:fatfs/ff.c    **** 		}
2994:fatfs/ff.c    **** #if !_FS_READONLY
2995:fatfs/ff.c    **** 		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 4132              	 .loc 1 2995 0
 4133 004a E268     	 ldr r2,[r4,#12]
 4134 004c 9A42     	 cmp r2,r3
 4135 004e 40D2     	 bcs .L485
2996:fatfs/ff.c    **** 			fp->fsize = fp->fptr;
 4136              	 .loc 1 2996 0
 4137 0050 E360     	 str r3,[r4,#12]
2997:fatfs/ff.c    **** 			fp->flag |= FA__WRITTEN;
 4138              	 .loc 1 2997 0
 4139 0052 A379     	 ldrb r3,[r4,#6]
 4140 0054 43F02003 	 orr r3,r3,#32
 4141 0058 A371     	 strb r3,[r4,#6]
 4142 005a 3AE0     	 b .L485
 4143              	.LVL547:
 4144              	.L464:
2937:fatfs/ff.c    **** 			if (ifptr > 0 &&
 4145              	 .loc 1 2937 0
 4146 005c 2068     	 ldr r0,[r4]
 4147              	.LVL548:
 4148 005e 8678     	 ldrb r6,[r0,#2]
 4149 0060 7602     	 lsls r6,r6,#9
 4150              	.LVL549:
2938:fatfs/ff.c    **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 4151              	 .loc 1 2938 0
 4152 0062 13B3     	 cbz r3,.L467
2939:fatfs/ff.c    **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 4153              	 .loc 1 2939 0 discriminator 1
 4154 0064 013B     	 subs r3,r3,#1
 4155              	.LVL550:
 4156 0066 6A1E     	 subs r2,r5,#1
 4157 0068 B2FBF6F2 	 udiv r2,r2,r6
 4158 006c B3FBF6F1 	 udiv r1,r3,r6
2938:fatfs/ff.c    **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 4159              	 .loc 1 2938 0 discriminator 1
 4160 0070 8A42     	 cmp r2,r1
 4161 0072 1AD3     	 bcc .L467
2940:fatfs/ff.c    **** 				ofs -= fp->fptr;
 4162              	 .loc 1 2940 0
 4163 0074 7242     	 negs r2,r6
 4164 0076 1340     	 ands r3,r3,r2
 4165              	.LVL551:
2942:fatfs/ff.c    **** 			} else {									/* When seek to back cluster, */
 4166              	 .loc 1 2942 0
 4167 0078 6169     	 ldr r1,[r4,#20]
2940:fatfs/ff.c    **** 				ofs -= fp->fptr;
 4168              	 .loc 1 2940 0
 4169 007a A360     	 str r3,[r4,#8]
2941:fatfs/ff.c    **** 				clst = fp->clust;
 4170              	 .loc 1 2941 0
 4171 007c ED1A     	 subs r5,r5,r3
 4172              	.LVL552:
 4173              	.L468:
2955:fatfs/ff.c    **** 				while (ofs > bcs) {						/* Cluster following loop */
 4174              	 .loc 1 2955 0
 4175 007e 0029     	 cmp r1,#0
 4176 0080 DAD0     	 beq .L472
2965:fatfs/ff.c    **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4177              	 .loc 1 2965 0
 4178 0082 DFF89C80 	 ldr r8,.L501+12
2959:fatfs/ff.c    **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 4179              	 .loc 1 2959 0
 4180 0086 DFF89490 	 ldr r9,.L501+8
 4181              	.L473:
2956:fatfs/ff.c    **** #if !_FS_READONLY
 4182              	 .loc 1 2956 0
 4183 008a B542     	 cmp r5,r6
 4184 008c 27D8     	 bhi .L480
 4185              	.LVL553:
 4186              	.L475:
2972:fatfs/ff.c    **** 				if (ofs % SS(fp->fs)) {
 4187              	 .loc 1 2972 0
 4188 008e A368     	 ldr r3,[r4,#8]
 4189 0090 2B44     	 add r3,r3,r5
 4190 0092 A360     	 str r3,[r4,#8]
2973:fatfs/ff.c    **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 4191              	 .loc 1 2973 0
 4192 0094 C5F30803 	 ubfx r3,r5,#0,#9
 4193 0098 002B     	 cmp r3,#0
 4194 009a CDD0     	 beq .L472
2974:fatfs/ff.c    **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 4195              	 .loc 1 2974 0
 4196 009c 2068     	 ldr r0,[r4]
 4197 009e 1E4B     	 ldr r3,.L501+4
 4198 00a0 9847     	 blx r3
 4199              	.LVL554:
2975:fatfs/ff.c    **** 					nsect += ofs / SS(fp->fs);
 4200              	 .loc 1 2975 0
 4201 00a2 48B1     	 cbz r0,.L500
2976:fatfs/ff.c    **** 				}
 4202              	 .loc 1 2976 0
 4203 00a4 00EB5525 	 add r5,r0,r5,lsr#9
 4204              	.LVL555:
 4205 00a8 C7E7     	 b .L466
 4206              	.LVL556:
 4207              	.L467:
2944:fatfs/ff.c    **** #if !_FS_READONLY
 4208              	 .loc 1 2944 0
 4209 00aa 2169     	 ldr r1,[r4,#16]
 4210              	.LVL557:
2946:fatfs/ff.c    **** 					clst = create_chain(fp->fs, 0);
 4211              	 .loc 1 2946 0
 4212 00ac A9B9     	 cbnz r1,.L469
2947:fatfs/ff.c    **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 4213              	 .loc 1 2947 0
 4214 00ae 1B4B     	 ldr r3,.L501+8
 4215 00b0 9847     	 blx r3
 4216              	.LVL558:
2948:fatfs/ff.c    **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4217              	 .loc 1 2948 0
 4218 00b2 0128     	 cmp r0,#1
2947:fatfs/ff.c    **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 4219              	 .loc 1 2947 0
 4220 00b4 0146     	 mov r1,r0
 4221              	.LVL559:
2948:fatfs/ff.c    **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4222              	 .loc 1 2948 0
 4223 00b6 05D1     	 bne .L470
 4224              	.LVL560:
 4225              	.L500:
2975:fatfs/ff.c    **** 					nsect += ofs / SS(fp->fs);
 4226              	 .loc 1 2975 0 discriminator 1
 4227 00b8 A379     	 ldrb r3,[r4,#6]
 4228 00ba 63F07F03 	 orn r3,r3,#127
 4229 00be A371     	 strb r3,[r4,#6]
 4230              	.LVL561:
 4231              	.L483:
 4232              	.LBE104:
2865:fatfs/ff.c    **** 
 4233              	 .loc 1 2865 0
 4234 00c0 0227     	 movs r7,#2
 4235 00c2 06E0     	 b .L485
 4236              	.LVL562:
 4237              	.L470:
 4238              	.LBB105:
2949:fatfs/ff.c    **** 					fp->sclust = clst;
 4239              	 .loc 1 2949 0
 4240 00c4 421C     	 adds r2,r0,#1
 4241 00c6 07D1     	 bne .L471
 4242              	.L499:
2966:fatfs/ff.c    **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 4243              	 .loc 1 2966 0 discriminator 1
 4244 00c8 0127     	 movs r7,#1
 4245 00ca A379     	 ldrb r3,[r4,#6]
 4246 00cc 63F07F03 	 orn r3,r3,#127
 4247 00d0 A371     	 strb r3,[r4,#6]
 4248              	.LVL563:
 4249              	.L485:
 4250              	.LBE105:
2998:fatfs/ff.c    **** 		}
2999:fatfs/ff.c    **** #endif
3000:fatfs/ff.c    **** 	}
3001:fatfs/ff.c    **** 
3002:fatfs/ff.c    **** 	LEAVE_FF(fp->fs, res);
3003:fatfs/ff.c    **** }
 4251              	 .loc 1 3003 0
 4252 00d2 3846     	 mov r0,r7
 4253 00d4 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 4254              	.LVL564:
 4255              	.L471:
 4256              	.LBB106:
2950:fatfs/ff.c    **** 				}
 4257              	 .loc 1 2950 0
 4258 00d8 2061     	 str r0,[r4,#16]
 4259              	.LVL565:
 4260              	.L469:
2953:fatfs/ff.c    **** 			}
 4261              	 .loc 1 2953 0
 4262 00da 6161     	 str r1,[r4,#20]
 4263 00dc CFE7     	 b .L468
 4264              	.L480:
2958:fatfs/ff.c    **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 4265              	 .loc 1 2958 0
 4266 00de A379     	 ldrb r3,[r4,#6]
 4267 00e0 2068     	 ldr r0,[r4]
 4268 00e2 13F0020F 	 tst r3,#2
 4269 00e6 04D0     	 beq .L474
2959:fatfs/ff.c    **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 4270              	 .loc 1 2959 0
 4271 00e8 C847     	 blx r9
 4272              	.LVL566:
2960:fatfs/ff.c    **** 							ofs = bcs; break;
 4273              	 .loc 1 2960 0
 4274 00ea 0146     	 mov r1,r0
 4275 00ec 18B9     	 cbnz r0,.L476
 4276 00ee 3546     	 mov r5,r6
 4277              	.LVL567:
 4278 00f0 CDE7     	 b .L475
 4279              	.LVL568:
 4280              	.L474:
2965:fatfs/ff.c    **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4281              	 .loc 1 2965 0
 4282 00f2 C047     	 blx r8
 4283              	.LVL569:
 4284 00f4 0146     	 mov r1,r0
 4285              	.LVL570:
 4286              	.L476:
2966:fatfs/ff.c    **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 4287              	 .loc 1 2966 0
 4288 00f6 4B1C     	 adds r3,r1,#1
 4289 00f8 E6D0     	 beq .L499
2967:fatfs/ff.c    **** 					fp->clust = clst;
 4290              	 .loc 1 2967 0
 4291 00fa 0129     	 cmp r1,#1
 4292 00fc DCD9     	 bls .L500
2967:fatfs/ff.c    **** 					fp->clust = clst;
 4293              	 .loc 1 2967 0 is_stmt 0 discriminator 2
 4294 00fe 2368     	 ldr r3,[r4]
 4295 0100 D3F81630 	 ldr r3,[r3,#22]
 4296 0104 9942     	 cmp r1,r3
 4297 0106 D7D2     	 bcs .L500
2969:fatfs/ff.c    **** 					ofs -= bcs;
 4298              	 .loc 1 2969 0 is_stmt 1
 4299 0108 A368     	 ldr r3,[r4,#8]
2968:fatfs/ff.c    **** 					fp->fptr += bcs;
 4300              	 .loc 1 2968 0
 4301 010a 6161     	 str r1,[r4,#20]
2969:fatfs/ff.c    **** 					ofs -= bcs;
 4302              	 .loc 1 2969 0
 4303 010c 3344     	 add r3,r3,r6
 4304 010e A360     	 str r3,[r4,#8]
2970:fatfs/ff.c    **** 				}
 4305              	 .loc 1 2970 0
 4306 0110 AD1B     	 subs r5,r5,r6
 4307              	.LVL571:
 4308 0112 BAE7     	 b .L473
 4309              	.L502:
 4310              	 .align 2
 4311              	.L501:
 4312 0114 00000000 	 .word validate
 4313 0118 00000000 	 .word clust2sect
 4314 011c 00000000 	 .word create_chain
 4315 0120 00000000 	 .word get_fat
 4316              	.LBE106:
 4317              	 .cfi_endproc
 4318              	.LFE31:
 4320              	 .section .text.f_opendir,"ax",%progbits
 4321              	 .align 1
 4322              	 .global f_opendir
 4323              	 .syntax unified
 4324              	 .thumb
 4325              	 .thumb_func
 4326              	 .fpu softvfp
 4328              	f_opendir:
 4329              	.LFB32:
3004:fatfs/ff.c    **** 
3005:fatfs/ff.c    **** 
3006:fatfs/ff.c    **** 
3007:fatfs/ff.c    **** #if _FS_MINIMIZE <= 1
3008:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3009:fatfs/ff.c    **** /* Create a Directory Object                                             */
3010:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3011:fatfs/ff.c    **** 
3012:fatfs/ff.c    **** FRESULT f_opendir (
3013:fatfs/ff.c    **** 	DIR *dj,			/* Pointer to directory object to create */
3014:fatfs/ff.c    **** 	const TCHAR *path	/* Pointer to the directory path */
3015:fatfs/ff.c    **** )
3016:fatfs/ff.c    **** {
 4330              	 .loc 1 3016 0
 4331              	 .cfi_startproc
 4332              	 
 4333              	 
 4334              	.LVL572:
 4335 0000 30B5     	 push {r4,r5,lr}
 4336              	 .cfi_def_cfa_offset 12
 4337              	 .cfi_offset 4,-12
 4338              	 .cfi_offset 5,-8
 4339              	 .cfi_offset 14,-4
 4340 0002 87B0     	 sub sp,sp,#28
 4341              	 .cfi_def_cfa_offset 40
 4342              	 .loc 1 3016 0
 4343 0004 0191     	 str r1,[sp,#4]
3017:fatfs/ff.c    **** 	FRESULT res;
3018:fatfs/ff.c    **** 	FATFS *fs;
3019:fatfs/ff.c    **** 	DEF_NAMEBUF;
3020:fatfs/ff.c    **** 
3021:fatfs/ff.c    **** 
3022:fatfs/ff.c    **** 	if (!dj) return FR_INVALID_OBJECT;
 4344              	 .loc 1 3022 0
 4345 0006 0446     	 mov r4,r0
 4346 0008 48B3     	 cbz r0,.L512
3023:fatfs/ff.c    **** 
3024:fatfs/ff.c    **** 	res = chk_mounted(&path, &dj->fs, 0);
 4347              	 .loc 1 3024 0
 4348 000a 0146     	 mov r1,r0
 4349              	.LVL573:
 4350 000c 0022     	 movs r2,#0
 4351 000e 01A8     	 add r0,sp,#4
 4352              	.LVL574:
 4353 0010 154B     	 ldr r3,.L527
 4354 0012 9847     	 blx r3
 4355              	.LVL575:
3025:fatfs/ff.c    **** 	fs = dj->fs;
3026:fatfs/ff.c    **** 	if (res == FR_OK) {
 4356              	 .loc 1 3026 0
 4357 0014 68B9     	 cbnz r0,.L505
3027:fatfs/ff.c    **** 		INIT_BUF(*dj);
 4358              	 .loc 1 3027 0
 4359 0016 03AB     	 add r3,sp,#12
 4360 0018 A361     	 str r3,[r4,#24]
3028:fatfs/ff.c    **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
 4361              	 .loc 1 3028 0
 4362 001a 0199     	 ldr r1,[sp,#4]
 4363 001c 2046     	 mov r0,r4
 4364              	.LVL576:
 4365 001e 134B     	 ldr r3,.L527+4
3025:fatfs/ff.c    **** 	fs = dj->fs;
 4366              	 .loc 1 3025 0
 4367 0020 2568     	 ldr r5,[r4]
 4368              	 .loc 1 3028 0
 4369 0022 9847     	 blx r3
 4370              	.LVL577:
3029:fatfs/ff.c    **** 		FREE_BUF();
3030:fatfs/ff.c    **** 		if (res == FR_OK) {						/* Follow completed */
 4371              	 .loc 1 3030 0
 4372 0024 E8B9     	 cbnz r0,.L506
3031:fatfs/ff.c    **** 			if (dj->dir) {						/* It is not the root dir */
 4373              	 .loc 1 3031 0
 4374 0026 6169     	 ldr r1,[r4,#20]
 4375 0028 69B1     	 cbz r1,.L507
3032:fatfs/ff.c    **** 				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 4376              	 .loc 1 3032 0
 4377 002a CB7A     	 ldrb r3,[r1,#11]
 4378 002c DB06     	 lsls r3,r3,#27
 4379 002e 06D4     	 bmi .L508
 4380              	.L510:
3033:fatfs/ff.c    **** 					dj->sclust = ld_clust(fs, dj->dir);
3034:fatfs/ff.c    **** 				} else {						/* The object is not a directory */
3035:fatfs/ff.c    **** 					res = FR_NO_PATH;
 4381              	 .loc 1 3035 0
 4382 0030 0520     	 movs r0,#5
 4383              	.LVL578:
 4384              	.L505:
3036:fatfs/ff.c    **** 				}
3037:fatfs/ff.c    **** 			}
3038:fatfs/ff.c    **** 			if (res == FR_OK) {
3039:fatfs/ff.c    **** 				dj->id = fs->id;
3040:fatfs/ff.c    **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
3041:fatfs/ff.c    **** 			}
3042:fatfs/ff.c    **** 		}
3043:fatfs/ff.c    **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
3044:fatfs/ff.c    **** 		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
3045:fatfs/ff.c    **** 	} else {
3046:fatfs/ff.c    **** 		dj->fs = 0;
 4385              	 .loc 1 3046 0
 4386 0032 0023     	 movs r3,#0
 4387 0034 2370     	 strb r3,[r4]
 4388 0036 6370     	 strb r3,[r4,#1]
 4389 0038 A370     	 strb r3,[r4,#2]
 4390 003a E370     	 strb r3,[r4,#3]
 4391 003c 0DE0     	 b .L513
 4392              	.LVL579:
 4393              	.L508:
3033:fatfs/ff.c    **** 					dj->sclust = ld_clust(fs, dj->dir);
 4394              	 .loc 1 3033 0
 4395 003e 2878     	 ldrb r0,[r5]
 4396              	.LVL580:
 4397 0040 0B4B     	 ldr r3,.L527+8
 4398 0042 9847     	 blx r3
 4399              	.LVL581:
 4400 0044 A060     	 str r0,[r4,#8]
 4401              	.L507:
 4402              	.LVL582:
3039:fatfs/ff.c    **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
 4403              	 .loc 1 3039 0
 4404 0046 EB88     	 ldrh r3,[r5,#6]
3040:fatfs/ff.c    **** 			}
 4405              	 .loc 1 3040 0
 4406 0048 0021     	 movs r1,#0
3039:fatfs/ff.c    **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
 4407              	 .loc 1 3039 0
 4408 004a A380     	 strh r3,[r4,#4]
3040:fatfs/ff.c    **** 			}
 4409              	 .loc 1 3040 0
 4410 004c 2046     	 mov r0,r4
 4411 004e 094B     	 ldr r3,.L527+12
 4412 0050 9847     	 blx r3
 4413              	.LVL583:
3043:fatfs/ff.c    **** 		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
 4414              	 .loc 1 3043 0
 4415 0052 0428     	 cmp r0,#4
 4416 0054 ECD0     	 beq .L510
3044:fatfs/ff.c    **** 	} else {
 4417              	 .loc 1 3044 0
 4418 0056 0028     	 cmp r0,#0
 4419 0058 EBD1     	 bne .L505
 4420              	.LVL584:
 4421              	.L513:
3047:fatfs/ff.c    **** 	}
3048:fatfs/ff.c    **** 
3049:fatfs/ff.c    **** 	LEAVE_FF(fs, res);
3050:fatfs/ff.c    **** }
 4422              	 .loc 1 3050 0
 4423 005a 07B0     	 add sp,sp,#28
 4424              	 .cfi_remember_state
 4425              	 .cfi_def_cfa_offset 12
 4426              	 
 4427 005c 30BD     	 pop {r4,r5,pc}
 4428              	.LVL585:
 4429              	.L512:
 4430              	 .cfi_restore_state
3022:fatfs/ff.c    **** 
 4431              	 .loc 1 3022 0
 4432 005e 0920     	 movs r0,#9
 4433              	.LVL586:
 4434 0060 FBE7     	 b .L513
 4435              	.LVL587:
 4436              	.L506:
3043:fatfs/ff.c    **** 		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
 4437              	 .loc 1 3043 0
 4438 0062 0428     	 cmp r0,#4
 4439 0064 E4D0     	 beq .L510
 4440 0066 E4E7     	 b .L505
 4441              	.L528:
 4442              	 .align 2
 4443              	.L527:
 4444 0068 00000000 	 .word chk_mounted
 4445 006c 00000000 	 .word follow_path
 4446 0070 00000000 	 .word ld_clust.isra.0
 4447 0074 00000000 	 .word dir_sdi
 4448              	 .cfi_endproc
 4449              	.LFE32:
 4451              	 .section .text.f_readdir,"ax",%progbits
 4452              	 .align 1
 4453              	 .global f_readdir
 4454              	 .syntax unified
 4455              	 .thumb
 4456              	 .thumb_func
 4457              	 .fpu softvfp
 4459              	f_readdir:
 4460              	.LFB33:
3051:fatfs/ff.c    **** 
3052:fatfs/ff.c    **** 
3053:fatfs/ff.c    **** 
3054:fatfs/ff.c    **** 
3055:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3056:fatfs/ff.c    **** /* Read Directory Entry in Sequence                                      */
3057:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3058:fatfs/ff.c    **** 
3059:fatfs/ff.c    **** FRESULT f_readdir (
3060:fatfs/ff.c    **** 	DIR *dj,			/* Pointer to the open directory object */
3061:fatfs/ff.c    **** 	FILINFO *fno		/* Pointer to file information to return */
3062:fatfs/ff.c    **** )
3063:fatfs/ff.c    **** {
 4461              	 .loc 1 3063 0
 4462              	 .cfi_startproc
 4463              	 
 4464              	 
 4465              	.LVL588:
 4466 0000 7FB5     	 push {r0,r1,r2,r3,r4,r5,r6,lr}
 4467              	 .cfi_def_cfa_offset 32
 4468              	 .cfi_offset 4,-16
 4469              	 .cfi_offset 5,-12
 4470              	 .cfi_offset 6,-8
 4471              	 .cfi_offset 14,-4
3064:fatfs/ff.c    **** 	FRESULT res;
3065:fatfs/ff.c    **** 	DEF_NAMEBUF;
3066:fatfs/ff.c    **** 
3067:fatfs/ff.c    **** 
3068:fatfs/ff.c    **** 	res = validate(dj);						/* Check validity of the object */
 4472              	 .loc 1 3068 0
 4473 0002 164B     	 ldr r3,.L536
3063:fatfs/ff.c    **** 	FRESULT res;
 4474              	 .loc 1 3063 0
 4475 0004 0446     	 mov r4,r0
 4476 0006 0E46     	 mov r6,r1
 4477              	 .loc 1 3068 0
 4478 0008 9847     	 blx r3
 4479              	.LVL589:
3069:fatfs/ff.c    **** 	if (res == FR_OK) {
 4480              	 .loc 1 3069 0
 4481 000a 0546     	 mov r5,r0
 4482 000c 00BB     	 cbnz r0,.L530
3070:fatfs/ff.c    **** 		if (!fno) {
 4483              	 .loc 1 3070 0
 4484 000e 2EB9     	 cbnz r6,.L531
3071:fatfs/ff.c    **** 			res = dir_sdi(dj, 0);			/* Rewind the directory object */
 4485              	 .loc 1 3071 0
 4486 0010 0146     	 mov r1,r0
 4487 0012 134B     	 ldr r3,.L536+4
 4488 0014 2046     	 mov r0,r4
 4489              	.LVL590:
 4490 0016 9847     	 blx r3
 4491              	.LVL591:
 4492              	.L535:
 4493 0018 0546     	 mov r5,r0
 4494 001a 19E0     	 b .L530
 4495              	.LVL592:
 4496              	.L531:
3072:fatfs/ff.c    **** 		} else {
3073:fatfs/ff.c    **** 			INIT_BUF(*dj);
 4497              	 .loc 1 3073 0
 4498 001c 01AB     	 add r3,sp,#4
 4499 001e A361     	 str r3,[r4,#24]
3074:fatfs/ff.c    **** 			res = dir_read(dj);				/* Read an directory item */
 4500              	 .loc 1 3074 0
 4501 0020 2046     	 mov r0,r4
 4502              	.LVL593:
 4503 0022 104B     	 ldr r3,.L536+8
 4504 0024 9847     	 blx r3
 4505              	.LVL594:
3075:fatfs/ff.c    **** 			if (res == FR_NO_FILE) {		/* Reached end of dir */
 4506              	 .loc 1 3075 0
 4507 0026 0428     	 cmp r0,#4
 4508 0028 15D1     	 bne .L532
3076:fatfs/ff.c    **** 				dj->sect = 0;
 4509              	 .loc 1 3076 0
 4510 002a 2574     	 strb r5,[r4,#16]
 4511 002c 6574     	 strb r5,[r4,#17]
 4512 002e A574     	 strb r5,[r4,#18]
 4513 0030 E574     	 strb r5,[r4,#19]
 4514              	.LVL595:
 4515              	.L533:
3077:fatfs/ff.c    **** 				res = FR_OK;
3078:fatfs/ff.c    **** 			}
3079:fatfs/ff.c    **** 			if (res == FR_OK) {				/* A valid entry is found */
3080:fatfs/ff.c    **** 				get_fileinfo(dj, fno);		/* Get the object information */
 4516              	 .loc 1 3080 0
 4517 0032 3146     	 mov r1,r6
 4518 0034 2046     	 mov r0,r4
 4519 0036 0C4B     	 ldr r3,.L536+12
 4520 0038 9847     	 blx r3
 4521              	.LVL596:
3081:fatfs/ff.c    **** 				res = dir_next(dj, 0);		/* Increment index for next */
 4522              	 .loc 1 3081 0
 4523 003a 0021     	 movs r1,#0
 4524 003c 2046     	 mov r0,r4
 4525 003e 0B4B     	 ldr r3,.L536+16
 4526 0040 9847     	 blx r3
 4527              	.LVL597:
3082:fatfs/ff.c    **** 				if (res == FR_NO_FILE) {
 4528              	 .loc 1 3082 0
 4529 0042 0428     	 cmp r0,#4
 4530 0044 E8D1     	 bne .L535
3083:fatfs/ff.c    **** 					dj->sect = 0;
 4531              	 .loc 1 3083 0
 4532 0046 0023     	 movs r3,#0
 4533 0048 2374     	 strb r3,[r4,#16]
 4534 004a 6374     	 strb r3,[r4,#17]
 4535 004c A374     	 strb r3,[r4,#18]
 4536 004e E374     	 strb r3,[r4,#19]
 4537              	.LVL598:
 4538              	.L530:
3084:fatfs/ff.c    **** 					res = FR_OK;
3085:fatfs/ff.c    **** 				}
3086:fatfs/ff.c    **** 			}
3087:fatfs/ff.c    **** 			FREE_BUF();
3088:fatfs/ff.c    **** 		}
3089:fatfs/ff.c    **** 	}
3090:fatfs/ff.c    **** 
3091:fatfs/ff.c    **** 	LEAVE_FF(dj->fs, res);
3092:fatfs/ff.c    **** }
 4539              	 .loc 1 3092 0
 4540 0050 2846     	 mov r0,r5
 4541 0052 04B0     	 add sp,sp,#16
 4542              	 .cfi_remember_state
 4543              	 .cfi_def_cfa_offset 16
 4544              	 
 4545 0054 70BD     	 pop {r4,r5,r6,pc}
 4546              	.LVL599:
 4547              	.L532:
 4548              	 .cfi_restore_state
3079:fatfs/ff.c    **** 				get_fileinfo(dj, fno);		/* Get the object information */
 4549              	 .loc 1 3079 0
 4550 0056 0028     	 cmp r0,#0
 4551 0058 DED1     	 bne .L535
 4552 005a EAE7     	 b .L533
 4553              	.L537:
 4554              	 .align 2
 4555              	.L536:
 4556 005c 00000000 	 .word validate
 4557 0060 00000000 	 .word dir_sdi
 4558 0064 00000000 	 .word dir_read
 4559 0068 00000000 	 .word get_fileinfo
 4560 006c 00000000 	 .word dir_next
 4561              	 .cfi_endproc
 4562              	.LFE33:
 4564              	 .section .text.f_stat,"ax",%progbits
 4565              	 .align 1
 4566              	 .global f_stat
 4567              	 .syntax unified
 4568              	 .thumb
 4569              	 .thumb_func
 4570              	 .fpu softvfp
 4572              	f_stat:
 4573              	.LFB34:
3093:fatfs/ff.c    **** 
3094:fatfs/ff.c    **** 
3095:fatfs/ff.c    **** 
3096:fatfs/ff.c    **** #if _FS_MINIMIZE == 0
3097:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3098:fatfs/ff.c    **** /* Get File Status                                                       */
3099:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3100:fatfs/ff.c    **** 
3101:fatfs/ff.c    **** FRESULT f_stat (
3102:fatfs/ff.c    **** 	const TCHAR *path,	/* Pointer to the file path */
3103:fatfs/ff.c    **** 	FILINFO *fno		/* Pointer to file information to return */
3104:fatfs/ff.c    **** )
3105:fatfs/ff.c    **** {
 4574              	 .loc 1 3105 0
 4575              	 .cfi_startproc
 4576              	 
 4577              	 
 4578              	.LVL600:
 4579 0000 30B5     	 push {r4,r5,lr}
 4580              	 .cfi_def_cfa_offset 12
 4581              	 .cfi_offset 4,-12
 4582              	 .cfi_offset 5,-8
 4583              	 .cfi_offset 14,-4
 4584 0002 8DB0     	 sub sp,sp,#52
 4585              	 .cfi_def_cfa_offset 64
 4586              	 .loc 1 3105 0
 4587 0004 0190     	 str r0,[sp,#4]
 4588 0006 0D46     	 mov r5,r1
3106:fatfs/ff.c    **** 	FRESULT res;
3107:fatfs/ff.c    **** 	DIR dj;
3108:fatfs/ff.c    **** 	DEF_NAMEBUF;
3109:fatfs/ff.c    **** 
3110:fatfs/ff.c    **** 
3111:fatfs/ff.c    **** 	res = chk_mounted(&path, &dj.fs, 0);
 4589              	 .loc 1 3111 0
 4590 0008 0022     	 movs r2,#0
 4591 000a 05A9     	 add r1,sp,#20
 4592              	.LVL601:
 4593 000c 01A8     	 add r0,sp,#4
 4594              	.LVL602:
 4595 000e 0B4B     	 ldr r3,.L541
 4596 0010 9847     	 blx r3
 4597              	.LVL603:
3112:fatfs/ff.c    **** 	if (res == FR_OK) {
 4598              	 .loc 1 3112 0
 4599 0012 0446     	 mov r4,r0
 4600 0014 68B9     	 cbnz r0,.L539
3113:fatfs/ff.c    **** 		INIT_BUF(dj);
 4601              	 .loc 1 3113 0
 4602 0016 02AB     	 add r3,sp,#8
 4603 0018 0B93     	 str r3,[sp,#44]
3114:fatfs/ff.c    **** 		res = follow_path(&dj, path);	/* Follow the file path */
 4604              	 .loc 1 3114 0
 4605 001a 0199     	 ldr r1,[sp,#4]
 4606 001c 05A8     	 add r0,sp,#20
 4607              	.LVL604:
 4608 001e 084B     	 ldr r3,.L541+4
 4609 0020 9847     	 blx r3
 4610              	.LVL605:
3115:fatfs/ff.c    **** 		if (res == FR_OK) {				/* Follow completed */
 4611              	 .loc 1 3115 0
 4612 0022 0446     	 mov r4,r0
 4613 0024 28B9     	 cbnz r0,.L539
3116:fatfs/ff.c    **** 			if (dj.dir)		/* Found an object */
 4614              	 .loc 1 3116 0
 4615 0026 0A9B     	 ldr r3,[sp,#40]
 4616 0028 33B1     	 cbz r3,.L540
3117:fatfs/ff.c    **** 				get_fileinfo(&dj, fno);
 4617              	 .loc 1 3117 0
 4618 002a 2946     	 mov r1,r5
 4619 002c 05A8     	 add r0,sp,#20
 4620              	.LVL606:
 4621 002e 054B     	 ldr r3,.L541+8
 4622 0030 9847     	 blx r3
 4623              	.LVL607:
 4624              	.L539:
3118:fatfs/ff.c    **** 			else			/* It is root dir */
3119:fatfs/ff.c    **** 				res = FR_INVALID_NAME;
3120:fatfs/ff.c    **** 		}
3121:fatfs/ff.c    **** 		FREE_BUF();
3122:fatfs/ff.c    **** 	}
3123:fatfs/ff.c    **** 
3124:fatfs/ff.c    **** 	LEAVE_FF(dj.fs, res);
3125:fatfs/ff.c    **** }
 4625              	 .loc 1 3125 0
 4626 0032 2046     	 mov r0,r4
 4627 0034 0DB0     	 add sp,sp,#52
 4628              	 .cfi_remember_state
 4629              	 .cfi_def_cfa_offset 12
 4630              	 
 4631 0036 30BD     	 pop {r4,r5,pc}
 4632              	.LVL608:
 4633              	.L540:
 4634              	 .cfi_restore_state
3119:fatfs/ff.c    **** 		}
 4635              	 .loc 1 3119 0
 4636 0038 0624     	 movs r4,#6
 4637 003a FAE7     	 b .L539
 4638              	.L542:
 4639              	 .align 2
 4640              	.L541:
 4641 003c 00000000 	 .word chk_mounted
 4642 0040 00000000 	 .word follow_path
 4643 0044 00000000 	 .word get_fileinfo
 4644              	 .cfi_endproc
 4645              	.LFE34:
 4647              	 .section .text.f_getfree,"ax",%progbits
 4648              	 .align 1
 4649              	 .global f_getfree
 4650              	 .syntax unified
 4651              	 .thumb
 4652              	 .thumb_func
 4653              	 .fpu softvfp
 4655              	f_getfree:
 4656              	.LFB35:
3126:fatfs/ff.c    **** 
3127:fatfs/ff.c    **** 
3128:fatfs/ff.c    **** 
3129:fatfs/ff.c    **** #if !_FS_READONLY
3130:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3131:fatfs/ff.c    **** /* Get Number of Free Clusters                                           */
3132:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3133:fatfs/ff.c    **** 
3134:fatfs/ff.c    **** FRESULT f_getfree (
3135:fatfs/ff.c    **** 	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
3136:fatfs/ff.c    **** 	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
3137:fatfs/ff.c    **** 	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
3138:fatfs/ff.c    **** )
3139:fatfs/ff.c    **** {
 4657              	 .loc 1 3139 0
 4658              	 .cfi_startproc
 4659              	 
 4660              	 
 4661              	.LVL609:
 4662 0000 2DE9F74F 	 push {r0,r1,r2,r4,r5,r6,r7,r8,r9,r10,fp,lr}
 4663              	 .cfi_def_cfa_offset 48
 4664              	 .cfi_offset 4,-36
 4665              	 .cfi_offset 5,-32
 4666              	 .cfi_offset 6,-28
 4667              	 .cfi_offset 7,-24
 4668              	 .cfi_offset 8,-20
 4669              	 .cfi_offset 9,-16
 4670              	 .cfi_offset 10,-12
 4671              	 .cfi_offset 11,-8
 4672              	 .cfi_offset 14,-4
 4673              	 .loc 1 3139 0
 4674 0004 1446     	 mov r4,r2
 4675 0006 02AB     	 add r3,sp,#8
 4676 0008 43F8040D 	 str r0,[r3,#-4]!
3140:fatfs/ff.c    **** 	FRESULT res;
3141:fatfs/ff.c    **** 	FATFS *fs;
3142:fatfs/ff.c    **** 	DWORD n, clst, sect, stat;
3143:fatfs/ff.c    **** 	UINT i;
3144:fatfs/ff.c    **** 	BYTE fat, *p;
3145:fatfs/ff.c    **** 
3146:fatfs/ff.c    **** 
3147:fatfs/ff.c    **** 	/* Get drive number */
3148:fatfs/ff.c    **** 	res = chk_mounted(&path, fatfs, 0);
 4677              	 .loc 1 3148 0
 4678 000c 1846     	 mov r0,r3
 4679              	.LVL610:
3139:fatfs/ff.c    **** 	FRESULT res;
 4680              	 .loc 1 3139 0
 4681 000e 8846     	 mov r8,r1
 4682              	 .loc 1 3148 0
 4683 0010 0022     	 movs r2,#0
 4684              	.LVL611:
 4685 0012 2146     	 mov r1,r4
 4686              	.LVL612:
 4687 0014 314B     	 ldr r3,.L562
 4688 0016 9847     	 blx r3
 4689              	.LVL613:
3149:fatfs/ff.c    **** 	fs = *fatfs;
3150:fatfs/ff.c    **** 	if (res == FR_OK) {
 4690              	 .loc 1 3150 0
 4691 0018 0546     	 mov r5,r0
 4692 001a 48B9     	 cbnz r0,.L544
3149:fatfs/ff.c    **** 	fs = *fatfs;
 4693              	 .loc 1 3149 0
 4694 001c 2468     	 ldr r4,[r4]
 4695              	.LVL614:
3151:fatfs/ff.c    **** 		/* If free_clust is valid, return it without full cluster scan */
3152:fatfs/ff.c    **** 		if (fs->free_clust <= fs->n_fatent - 2) {
 4696              	 .loc 1 3152 0
 4697 001e D4F81670 	 ldr r7,[r4,#22]
 4698 0022 D4F80E30 	 ldr r3,[r4,#14]
 4699 0026 BA1E     	 subs r2,r7,#2
 4700 0028 9342     	 cmp r3,r2
 4701 002a 05D8     	 bhi .L545
3153:fatfs/ff.c    **** 			*nclst = fs->free_clust;
 4702              	 .loc 1 3153 0
 4703 002c C8F80030 	 str r3,[r8]
 4704              	.LVL615:
 4705              	.L544:
3154:fatfs/ff.c    **** 		} else {
3155:fatfs/ff.c    **** 			/* Get number of free clusters */
3156:fatfs/ff.c    **** 			fat = fs->fs_type;
3157:fatfs/ff.c    **** 			n = 0;
3158:fatfs/ff.c    **** 			if (fat == FS_FAT12) {
3159:fatfs/ff.c    **** 				clst = 2;
3160:fatfs/ff.c    **** 				do {
3161:fatfs/ff.c    **** 					stat = get_fat(fs, clst);
3162:fatfs/ff.c    **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
3163:fatfs/ff.c    **** 					if (stat == 1) { res = FR_INT_ERR; break; }
3164:fatfs/ff.c    **** 					if (stat == 0) n++;
3165:fatfs/ff.c    **** 				} while (++clst < fs->n_fatent);
3166:fatfs/ff.c    **** 			} else {
3167:fatfs/ff.c    **** 				clst = fs->n_fatent;
3168:fatfs/ff.c    **** 				sect = fs->fatbase;
3169:fatfs/ff.c    **** 				i = 0; p = 0;
3170:fatfs/ff.c    **** 				do {
3171:fatfs/ff.c    **** 					if (!i) {
3172:fatfs/ff.c    **** 						res = move_window(fs, sect++);
3173:fatfs/ff.c    **** 						if (res != FR_OK) break;
3174:fatfs/ff.c    **** 						p = fs->win;
3175:fatfs/ff.c    **** 						i = SS(fs);
3176:fatfs/ff.c    **** 					}
3177:fatfs/ff.c    **** 					if (fat == FS_FAT16) {
3178:fatfs/ff.c    **** 						if (LD_WORD(p) == 0) n++;
3179:fatfs/ff.c    **** 						p += 2; i -= 2;
3180:fatfs/ff.c    **** 					} else {
3181:fatfs/ff.c    **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
3182:fatfs/ff.c    **** 						p += 4; i -= 4;
3183:fatfs/ff.c    **** 					}
3184:fatfs/ff.c    **** 				} while (--clst);
3185:fatfs/ff.c    **** 			}
3186:fatfs/ff.c    **** 			fs->free_clust = n;
3187:fatfs/ff.c    **** 			if (fat == FS_FAT32) fs->fsi_flag = 1;
3188:fatfs/ff.c    **** 			*nclst = n;
3189:fatfs/ff.c    **** 		}
3190:fatfs/ff.c    **** 	}
3191:fatfs/ff.c    **** 	LEAVE_FF(fs, res);
3192:fatfs/ff.c    **** }
 4706              	 .loc 1 3192 0
 4707 0030 2846     	 mov r0,r5
 4708 0032 03B0     	 add sp,sp,#12
 4709              	 .cfi_remember_state
 4710              	 .cfi_def_cfa_offset 36
 4711              	 
 4712 0034 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 4713              	.LVL616:
 4714              	.L545:
 4715              	 .cfi_restore_state
3156:fatfs/ff.c    **** 			n = 0;
 4716              	 .loc 1 3156 0
 4717 0038 94F80090 	 ldrb r9,[r4]
 4718              	.LVL617:
3158:fatfs/ff.c    **** 				clst = 2;
 4719              	 .loc 1 3158 0
 4720 003c B9F1010F 	 cmp r9,#1
 4721 0040 1CD1     	 bne .L546
 4722 0042 0227     	 movs r7,#2
 4723 0044 0646     	 mov r6,r0
3161:fatfs/ff.c    **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 4724              	 .loc 1 3161 0
 4725 0046 DFF898A0 	 ldr r10,.L562+4
 4726              	.LVL618:
 4727              	.L549:
 4728 004a 3946     	 mov r1,r7
 4729 004c 2046     	 mov r0,r4
 4730 004e D047     	 blx r10
 4731              	.LVL619:
3162:fatfs/ff.c    **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 4732              	 .loc 1 3162 0
 4733 0050 431C     	 adds r3,r0,#1
 4734 0052 3CD0     	 beq .L557
3163:fatfs/ff.c    **** 					if (stat == 0) n++;
 4735              	 .loc 1 3163 0
 4736 0054 0128     	 cmp r0,#1
 4737 0056 3CD0     	 beq .L558
3164:fatfs/ff.c    **** 				} while (++clst < fs->n_fatent);
 4738              	 .loc 1 3164 0
 4739 0058 00B9     	 cbnz r0,.L548
3164:fatfs/ff.c    **** 				} while (++clst < fs->n_fatent);
 4740              	 .loc 1 3164 0 is_stmt 0 discriminator 1
 4741 005a 0136     	 adds r6,r6,#1
 4742              	.LVL620:
 4743              	.L548:
3165:fatfs/ff.c    **** 			} else {
 4744              	 .loc 1 3165 0 is_stmt 1
 4745 005c D4F81630 	 ldr r3,[r4,#22]
 4746 0060 0137     	 adds r7,r7,#1
 4747              	.LVL621:
 4748 0062 9F42     	 cmp r7,r3
 4749 0064 F1D3     	 bcc .L549
 4750              	.LVL622:
 4751              	.L547:
3187:fatfs/ff.c    **** 			*nclst = n;
 4752              	 .loc 1 3187 0
 4753 0066 B9F1030F 	 cmp r9,#3
 4754 006a 08BF     	 it eq
 4755 006c 0123     	 moveq r3,#1
3186:fatfs/ff.c    **** 			if (fat == FS_FAT32) fs->fsi_flag = 1;
 4756              	 .loc 1 3186 0
 4757 006e C4F80E60 	 str r6,[r4,#14]
3187:fatfs/ff.c    **** 			*nclst = n;
 4758              	 .loc 1 3187 0
 4759 0072 08BF     	 it eq
 4760 0074 6371     	 strbeq r3,[r4,#5]
3188:fatfs/ff.c    **** 		}
 4761              	 .loc 1 3188 0
 4762 0076 C8F80060 	 str r6,[r8]
 4763 007a D9E7     	 b .L544
 4764              	.LVL623:
 4765              	.L546:
3169:fatfs/ff.c    **** 				do {
 4766              	 .loc 1 3169 0
 4767 007c 0346     	 mov r3,r0
 4768 007e 0246     	 mov r2,r0
3157:fatfs/ff.c    **** 			if (fat == FS_FAT12) {
 4769              	 .loc 1 3157 0
 4770 0080 0646     	 mov r6,r0
3168:fatfs/ff.c    **** 				i = 0; p = 0;
 4771              	 .loc 1 3168 0
 4772 0082 D4F81E10 	 ldr r1,[r4,#30]
 4773              	.LVL624:
3172:fatfs/ff.c    **** 						if (res != FR_OK) break;
 4774              	 .loc 1 3172 0
 4775 0086 DFF85CA0 	 ldr r10,.L562+8
 4776              	.LVL625:
 4777              	.L555:
3171:fatfs/ff.c    **** 						res = move_window(fs, sect++);
 4778              	 .loc 1 3171 0
 4779 008a 4AB9     	 cbnz r2,.L550
 4780              	.LVL626:
3172:fatfs/ff.c    **** 						if (res != FR_OK) break;
 4781              	 .loc 1 3172 0
 4782 008c 2046     	 mov r0,r4
 4783 008e 01F1010B 	 add fp,r1,#1
 4784              	.LVL627:
 4785 0092 D047     	 blx r10
 4786              	.LVL628:
3173:fatfs/ff.c    **** 						p = fs->win;
 4787              	 .loc 1 3173 0
 4788 0094 F8B9     	 cbnz r0,.L559
 4789              	.LVL629:
3172:fatfs/ff.c    **** 						if (res != FR_OK) break;
 4790              	 .loc 1 3172 0
 4791 0096 5946     	 mov r1,fp
3175:fatfs/ff.c    **** 					}
 4792              	 .loc 1 3175 0
 4793 0098 4FF40072 	 mov r2,#512
3174:fatfs/ff.c    **** 						i = SS(fs);
 4794              	 .loc 1 3174 0
 4795 009c 04F12E03 	 add r3,r4,#46
 4796              	.LVL630:
 4797              	.L550:
3177:fatfs/ff.c    **** 						if (LD_WORD(p) == 0) n++;
 4798              	 .loc 1 3177 0
 4799 00a0 B9F1020F 	 cmp r9,#2
 4800 00a4 0BD1     	 bne .L551
3178:fatfs/ff.c    **** 						p += 2; i -= 2;
 4801              	 .loc 1 3178 0
 4802 00a6 93F801E0 	 ldrb lr,[r3,#1]
 4803 00aa 1878     	 ldrb r0,[r3]
3179:fatfs/ff.c    **** 					} else {
 4804              	 .loc 1 3179 0
 4805 00ac 023A     	 subs r2,r2,#2
 4806              	.LVL631:
3178:fatfs/ff.c    **** 						p += 2; i -= 2;
 4807              	 .loc 1 3178 0
 4808 00ae 50EA0E20 	 orrs r0,r0,lr,lsl#8
 4809 00b2 08BF     	 it eq
 4810 00b4 0136     	 addeq r6,r6,#1
 4811              	.LVL632:
3179:fatfs/ff.c    **** 					} else {
 4812              	 .loc 1 3179 0
 4813 00b6 0233     	 adds r3,r3,#2
 4814              	.LVL633:
 4815              	.L553:
3184:fatfs/ff.c    **** 			}
 4816              	 .loc 1 3184 0
 4817 00b8 013F     	 subs r7,r7,#1
 4818              	.LVL634:
 4819 00ba E6D1     	 bne .L555
 4820 00bc D3E7     	 b .L547
 4821              	.LVL635:
 4822              	.L551:
3181:fatfs/ff.c    **** 						p += 4; i -= 4;
 4823              	 .loc 1 3181 0
 4824 00be 1868     	 ldr r0,[r3]
3182:fatfs/ff.c    **** 					}
 4825              	 .loc 1 3182 0
 4826 00c0 043A     	 subs r2,r2,#4
 4827              	.LVL636:
3181:fatfs/ff.c    **** 						p += 4; i -= 4;
 4828              	 .loc 1 3181 0
 4829 00c2 30F07040 	 bics r0,r0,#-268435456
 4830 00c6 08BF     	 it eq
 4831 00c8 0136     	 addeq r6,r6,#1
 4832              	.LVL637:
3182:fatfs/ff.c    **** 					}
 4833              	 .loc 1 3182 0
 4834 00ca 0433     	 adds r3,r3,#4
 4835              	.LVL638:
 4836 00cc F4E7     	 b .L553
 4837              	.LVL639:
 4838              	.L557:
3162:fatfs/ff.c    **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 4839              	 .loc 1 3162 0
 4840 00ce 0125     	 movs r5,#1
 4841 00d0 C9E7     	 b .L547
 4842              	.L558:
3163:fatfs/ff.c    **** 					if (stat == 0) n++;
 4843              	 .loc 1 3163 0
 4844 00d2 0225     	 movs r5,#2
 4845 00d4 C7E7     	 b .L547
 4846              	.LVL640:
 4847              	.L559:
3172:fatfs/ff.c    **** 						if (res != FR_OK) break;
 4848              	 .loc 1 3172 0
 4849 00d6 0546     	 mov r5,r0
 4850 00d8 C5E7     	 b .L547
 4851              	.L563:
 4852 00da 00BF     	 .align 2
 4853              	.L562:
 4854 00dc 00000000 	 .word chk_mounted
 4855 00e0 00000000 	 .word get_fat
 4856 00e4 00000000 	 .word move_window
 4857              	 .cfi_endproc
 4858              	.LFE35:
 4860              	 .section .text.f_truncate,"ax",%progbits
 4861              	 .align 1
 4862              	 .global f_truncate
 4863              	 .syntax unified
 4864              	 .thumb
 4865              	 .thumb_func
 4866              	 .fpu softvfp
 4868              	f_truncate:
 4869              	.LFB36:
3193:fatfs/ff.c    **** 
3194:fatfs/ff.c    **** 
3195:fatfs/ff.c    **** 
3196:fatfs/ff.c    **** 
3197:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3198:fatfs/ff.c    **** /* Truncate File                                                         */
3199:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3200:fatfs/ff.c    **** 
3201:fatfs/ff.c    **** FRESULT f_truncate (
3202:fatfs/ff.c    **** 	FIL *fp		/* Pointer to the file object */
3203:fatfs/ff.c    **** )
3204:fatfs/ff.c    **** {
 4870              	 .loc 1 3204 0
 4871              	 .cfi_startproc
 4872              	 
 4873              	 
 4874              	.LVL641:
 4875 0000 70B5     	 push {r4,r5,r6,lr}
 4876              	 .cfi_def_cfa_offset 16
 4877              	 .cfi_offset 4,-16
 4878              	 .cfi_offset 5,-12
 4879              	 .cfi_offset 6,-8
 4880              	 .cfi_offset 14,-4
3205:fatfs/ff.c    **** 	FRESULT res;
3206:fatfs/ff.c    **** 	DWORD ncl;
3207:fatfs/ff.c    **** 
3208:fatfs/ff.c    **** 
3209:fatfs/ff.c    **** 	if (!fp) return FR_INVALID_OBJECT;
 4881              	 .loc 1 3209 0
 4882 0002 0446     	 mov r4,r0
 4883 0004 68B3     	 cbz r0,.L574
3210:fatfs/ff.c    **** 
3211:fatfs/ff.c    **** 	res = validate(fp);						/* Check validity of the object */
 4884              	 .loc 1 3211 0
 4885 0006 224B     	 ldr r3,.L582
 4886 0008 9847     	 blx r3
 4887              	.LVL642:
3212:fatfs/ff.c    **** 	if (res == FR_OK) {
 4888              	 .loc 1 3212 0
 4889 000a 0546     	 mov r5,r0
 4890 000c B0B9     	 cbnz r0,.L579
3213:fatfs/ff.c    **** 		if (fp->flag & FA__ERROR) {			/* Check abort flag */
 4891              	 .loc 1 3213 0
 4892 000e A379     	 ldrb r3,[r4,#6]
 4893 0010 1906     	 lsls r1,r3,#24
 4894 0012 28D4     	 bmi .L575
3214:fatfs/ff.c    **** 			res = FR_INT_ERR;
3215:fatfs/ff.c    **** 		} else {
3216:fatfs/ff.c    **** 			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 4895              	 .loc 1 3216 0
 4896 0014 9A07     	 lsls r2,r3,#30
 4897 0016 28D5     	 bpl .L576
 4898              	.LVL643:
3217:fatfs/ff.c    **** 				res = FR_DENIED;
3218:fatfs/ff.c    **** 		}
3219:fatfs/ff.c    **** 	}
3220:fatfs/ff.c    **** 	if (res == FR_OK) {
3221:fatfs/ff.c    **** 		if (fp->fsize > fp->fptr) {
 4899              	 .loc 1 3221 0
 4900 0018 A268     	 ldr r2,[r4,#8]
 4901 001a E168     	 ldr r1,[r4,#12]
 4902 001c 9142     	 cmp r1,r2
 4903 001e 0DD9     	 bls .L579
3222:fatfs/ff.c    **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
3223:fatfs/ff.c    **** 			fp->flag |= FA__WRITTEN;
 4904              	 .loc 1 3223 0
 4905 0020 43F02003 	 orr r3,r3,#32
3222:fatfs/ff.c    **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 4906              	 .loc 1 3222 0
 4907 0024 E260     	 str r2,[r4,#12]
 4908              	 .loc 1 3223 0
 4909 0026 A371     	 strb r3,[r4,#6]
 4910 0028 2068     	 ldr r0,[r4]
3224:fatfs/ff.c    **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 4911              	 .loc 1 3224 0
 4912 002a 4AB9     	 cbnz r2,.L567
3225:fatfs/ff.c    **** 				res = remove_chain(fp->fs, fp->sclust);
 4913              	 .loc 1 3225 0
 4914 002c 2169     	 ldr r1,[r4,#16]
 4915 002e 194B     	 ldr r3,.L582+4
 4916 0030 9847     	 blx r3
 4917              	.LVL644:
3226:fatfs/ff.c    **** 				fp->sclust = 0;
 4918              	 .loc 1 3226 0
 4919 0032 2574     	 strb r5,[r4,#16]
 4920 0034 6574     	 strb r5,[r4,#17]
 4921 0036 A574     	 strb r5,[r4,#18]
 4922 0038 E574     	 strb r5,[r4,#19]
 4923              	.L568:
3227:fatfs/ff.c    **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
3228:fatfs/ff.c    **** 				ncl = get_fat(fp->fs, fp->clust);
3229:fatfs/ff.c    **** 				res = FR_OK;
3230:fatfs/ff.c    **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
3231:fatfs/ff.c    **** 				if (ncl == 1) res = FR_INT_ERR;
3232:fatfs/ff.c    **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
3233:fatfs/ff.c    **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
3234:fatfs/ff.c    **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
3235:fatfs/ff.c    **** 				}
3236:fatfs/ff.c    **** 			}
3237:fatfs/ff.c    **** 		}
3238:fatfs/ff.c    **** 		if (res != FR_OK) fp->flag |= FA__ERROR;
 4924              	 .loc 1 3238 0
 4925 003a 60B9     	 cbnz r0,.L569
 4926              	.LVL645:
 4927              	.L579:
3239:fatfs/ff.c    **** 	}
3240:fatfs/ff.c    **** 
3241:fatfs/ff.c    **** 	LEAVE_FF(fp->fs, res);
3242:fatfs/ff.c    **** }
 4928              	 .loc 1 3242 0
 4929 003c 2846     	 mov r0,r5
 4930 003e 70BD     	 pop {r4,r5,r6,pc}
 4931              	.LVL646:
 4932              	.L567:
3228:fatfs/ff.c    **** 				res = FR_OK;
 4933              	 .loc 1 3228 0
 4934 0040 154B     	 ldr r3,.L582+8
 4935 0042 6169     	 ldr r1,[r4,#20]
 4936 0044 9847     	 blx r3
 4937              	.LVL647:
3230:fatfs/ff.c    **** 				if (ncl == 1) res = FR_INT_ERR;
 4938              	 .loc 1 3230 0
 4939 0046 431C     	 adds r3,r0,#1
3228:fatfs/ff.c    **** 				res = FR_OK;
 4940              	 .loc 1 3228 0
 4941 0048 0646     	 mov r6,r0
 4942              	.LVL648:
3230:fatfs/ff.c    **** 				if (ncl == 1) res = FR_INT_ERR;
 4943              	 .loc 1 3230 0
 4944 004a 03D0     	 beq .L577
3231:fatfs/ff.c    **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 4945              	 .loc 1 3231 0
 4946 004c 0128     	 cmp r0,#1
 4947 004e 0ED1     	 bne .L581
 4948 0050 0220     	 movs r0,#2
 4949              	.LVL649:
 4950 0052 00E0     	 b .L569
 4951              	.LVL650:
 4952              	.L577:
3230:fatfs/ff.c    **** 				if (ncl == 1) res = FR_INT_ERR;
 4953              	 .loc 1 3230 0
 4954 0054 0120     	 movs r0,#1
 4955              	.LVL651:
 4956              	.L569:
3238:fatfs/ff.c    **** 	}
 4957              	 .loc 1 3238 0 discriminator 1
 4958 0056 A379     	 ldrb r3,[r4,#6]
 4959 0058 0546     	 mov r5,r0
 4960 005a 63F07F03 	 orn r3,r3,#127
 4961 005e A371     	 strb r3,[r4,#6]
 4962 0060 ECE7     	 b .L579
 4963              	.LVL652:
 4964              	.L574:
3209:fatfs/ff.c    **** 
 4965              	 .loc 1 3209 0
 4966 0062 0925     	 movs r5,#9
 4967 0064 EAE7     	 b .L579
 4968              	.LVL653:
 4969              	.L575:
3214:fatfs/ff.c    **** 		} else {
 4970              	 .loc 1 3214 0
 4971 0066 0225     	 movs r5,#2
 4972 0068 E8E7     	 b .L579
 4973              	.L576:
3217:fatfs/ff.c    **** 		}
 4974              	 .loc 1 3217 0
 4975 006a 0725     	 movs r5,#7
 4976 006c E6E7     	 b .L579
 4977              	.LVL654:
 4978              	.L581:
3232:fatfs/ff.c    **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 4979              	 .loc 1 3232 0
 4980 006e 2068     	 ldr r0,[r4]
 4981              	.LVL655:
 4982 0070 D0F81630 	 ldr r3,[r0,#22]
 4983 0074 9E42     	 cmp r6,r3
 4984 0076 E1D2     	 bcs .L579
3233:fatfs/ff.c    **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 4985              	 .loc 1 3233 0
 4986 0078 6FF07042 	 mvn r2,#-268435456
 4987 007c 6169     	 ldr r1,[r4,#20]
 4988 007e 074B     	 ldr r3,.L582+12
 4989 0080 9847     	 blx r3
 4990              	.LVL656:
3234:fatfs/ff.c    **** 				}
 4991              	 .loc 1 3234 0
 4992 0082 0028     	 cmp r0,#0
 4993 0084 E7D1     	 bne .L569
3234:fatfs/ff.c    **** 				}
 4994              	 .loc 1 3234 0 is_stmt 0 discriminator 1
 4995 0086 3146     	 mov r1,r6
 4996 0088 2068     	 ldr r0,[r4]
 4997              	.LVL657:
 4998 008a 024B     	 ldr r3,.L582+4
 4999 008c 9847     	 blx r3
 5000              	.LVL658:
 5001 008e D4E7     	 b .L568
 5002              	.L583:
 5003              	 .align 2
 5004              	.L582:
 5005 0090 00000000 	 .word validate
 5006 0094 00000000 	 .word remove_chain
 5007 0098 00000000 	 .word get_fat
 5008 009c 00000000 	 .word put_fat
 5009              	 .cfi_endproc
 5010              	.LFE36:
 5012              	 .section .text.f_unlink,"ax",%progbits
 5013              	 .align 1
 5014              	 .global f_unlink
 5015              	 .syntax unified
 5016              	 .thumb
 5017              	 .thumb_func
 5018              	 .fpu softvfp
 5020              	f_unlink:
 5021              	.LFB37:
3243:fatfs/ff.c    **** 
3244:fatfs/ff.c    **** 
3245:fatfs/ff.c    **** 
3246:fatfs/ff.c    **** 
3247:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3248:fatfs/ff.c    **** /* Delete a File or Directory                                            */
3249:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3250:fatfs/ff.c    **** 
3251:fatfs/ff.c    **** FRESULT f_unlink (
3252:fatfs/ff.c    **** 	const TCHAR *path		/* Pointer to the file or directory path */
3253:fatfs/ff.c    **** )
3254:fatfs/ff.c    **** {
 5022              	 .loc 1 3254 0 is_stmt 1
 5023              	 .cfi_startproc
 5024              	 
 5025              	 
 5026              	.LVL659:
 5027 0000 70B5     	 push {r4,r5,r6,lr}
 5028              	 .cfi_def_cfa_offset 16
 5029              	 .cfi_offset 4,-16
 5030              	 .cfi_offset 5,-12
 5031              	 .cfi_offset 6,-8
 5032              	 .cfi_offset 14,-4
 5033 0002 94B0     	 sub sp,sp,#80
 5034              	 .cfi_def_cfa_offset 96
 5035              	 .loc 1 3254 0
 5036 0004 0190     	 str r0,[sp,#4]
3255:fatfs/ff.c    **** 	FRESULT res;
3256:fatfs/ff.c    **** 	DIR dj, sdj;
3257:fatfs/ff.c    **** 	BYTE *dir;
3258:fatfs/ff.c    **** 	DWORD dclst;
3259:fatfs/ff.c    **** 	DEF_NAMEBUF;
3260:fatfs/ff.c    **** 
3261:fatfs/ff.c    **** 
3262:fatfs/ff.c    **** 	res = chk_mounted(&path, &dj.fs, 1);
 5037              	 .loc 1 3262 0
 5038 0006 0122     	 movs r2,#1
 5039 0008 06A9     	 add r1,sp,#24
 5040 000a 01A8     	 add r0,sp,#4
 5041              	.LVL660:
 5042 000c 284B     	 ldr r3,.L606
 5043 000e 9847     	 blx r3
 5044              	.LVL661:
3263:fatfs/ff.c    **** 	if (res == FR_OK) {
 5045              	 .loc 1 3263 0
 5046 0010 0446     	 mov r4,r0
 5047 0012 0028     	 cmp r0,#0
 5048 0014 2DD1     	 bne .L594
3264:fatfs/ff.c    **** 		INIT_BUF(dj);
 5049              	 .loc 1 3264 0
 5050 0016 03AB     	 add r3,sp,#12
 5051 0018 0C93     	 str r3,[sp,#48]
3265:fatfs/ff.c    **** 		res = follow_path(&dj, path);		/* Follow the file path */
 5052              	 .loc 1 3265 0
 5053 001a 0199     	 ldr r1,[sp,#4]
 5054 001c 06A8     	 add r0,sp,#24
 5055              	.LVL662:
 5056 001e 254B     	 ldr r3,.L606+4
 5057 0020 9847     	 blx r3
 5058              	.LVL663:
3266:fatfs/ff.c    **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
3267:fatfs/ff.c    **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
3268:fatfs/ff.c    **** #if _FS_LOCK
3269:fatfs/ff.c    **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
3270:fatfs/ff.c    **** #endif
3271:fatfs/ff.c    **** 		if (res == FR_OK) {					/* The object is accessible */
 5059              	 .loc 1 3271 0
 5060 0022 0446     	 mov r4,r0
 5061 0024 28BB     	 cbnz r0,.L594
3272:fatfs/ff.c    **** 			dir = dj.dir;
 5062              	 .loc 1 3272 0
 5063 0026 0B9E     	 ldr r6,[sp,#44]
 5064              	.LVL664:
3273:fatfs/ff.c    **** 			if (!dir) {
 5065              	 .loc 1 3273 0
 5066 0028 36B3     	 cbz r6,.L591
3274:fatfs/ff.c    **** 				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
3275:fatfs/ff.c    **** 			} else {
3276:fatfs/ff.c    **** 				if (dir[DIR_Attr] & AM_RDO)
 5067              	 .loc 1 3276 0
 5068 002a F37A     	 ldrb r3,[r6,#11]
3277:fatfs/ff.c    **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 5069              	 .loc 1 3277 0
 5070 002c 13F0010F 	 tst r3,#1
 5071 0030 18BF     	 it ne
 5072 0032 0724     	 movne r4,#7
 5073              	.L586:
 5074              	.LVL665:
3278:fatfs/ff.c    **** 			}
3279:fatfs/ff.c    **** 			dclst = ld_clust(dj.fs, dir);
 5075              	 .loc 1 3279 0
 5076 0034 069B     	 ldr r3,[sp,#24]
 5077 0036 3146     	 mov r1,r6
 5078 0038 1878     	 ldrb r0,[r3]
 5079 003a 1F4B     	 ldr r3,.L606+8
 5080 003c 9847     	 blx r3
 5081              	.LVL666:
 5082 003e 0546     	 mov r5,r0
 5083              	.LVL667:
3280:fatfs/ff.c    **** 			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 5084              	 .loc 1 3280 0
 5085 0040 BCB9     	 cbnz r4,.L594
 5086              	.LVL668:
 5087              	 .loc 1 3280 0 is_stmt 0 discriminator 1
 5088 0042 F37A     	 ldrb r3,[r6,#11]
 5089 0044 DB06     	 lsls r3,r3,#27
 5090 0046 25D5     	 bpl .L587
3281:fatfs/ff.c    **** 				if (dclst < 2) {
 5091              	 .loc 1 3281 0 is_stmt 1
 5092 0048 0128     	 cmp r0,#1
 5093 004a 1FD9     	 bls .L592
3282:fatfs/ff.c    **** 					res = FR_INT_ERR;
3283:fatfs/ff.c    **** 				} else {
3284:fatfs/ff.c    **** 					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
 5094              	 .loc 1 3284 0
 5095 004c 1C22     	 movs r2,#28
 5096 004e 06A9     	 add r1,sp,#24
 5097              	.LVL669:
 5098 0050 0DA8     	 add r0,sp,#52
 5099              	.LVL670:
 5100 0052 1A4B     	 ldr r3,.L606+12
 5101 0054 9847     	 blx r3
 5102              	.LVL671:
3285:fatfs/ff.c    **** 					sdj.sclust = dclst;
3286:fatfs/ff.c    **** 					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 5103              	 .loc 1 3286 0
 5104 0056 0221     	 movs r1,#2
 5105 0058 0DA8     	 add r0,sp,#52
 5106 005a 194B     	 ldr r3,.L606+16
3285:fatfs/ff.c    **** 					sdj.sclust = dclst;
 5107              	 .loc 1 3285 0
 5108 005c 0F95     	 str r5,[sp,#60]
 5109              	 .loc 1 3286 0
 5110 005e 9847     	 blx r3
 5111              	.LVL672:
3287:fatfs/ff.c    **** 					if (res == FR_OK) {
 5112              	 .loc 1 3287 0
 5113 0060 0446     	 mov r4,r0
 5114 0062 30B9     	 cbnz r0,.L594
3288:fatfs/ff.c    **** 						res = dir_read(&sdj);
 5115              	 .loc 1 3288 0
 5116 0064 0DA8     	 add r0,sp,#52
 5117              	.LVL673:
 5118 0066 174B     	 ldr r3,.L606+20
 5119 0068 9847     	 blx r3
 5120              	.LVL674:
3289:fatfs/ff.c    **** 						if (res == FR_OK		/* Not empty dir */
 5121              	 .loc 1 3289 0
 5122 006a 0446     	 mov r4,r0
 5123 006c 80B1     	 cbz r0,.L593
3290:fatfs/ff.c    **** #if _FS_RPATH
3291:fatfs/ff.c    **** 						|| dclst == dj.fs->cdir	/* Current dir */
3292:fatfs/ff.c    **** #endif
3293:fatfs/ff.c    **** 						) res = FR_DENIED;
3294:fatfs/ff.c    **** 						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
 5124              	 .loc 1 3294 0
 5125 006e 0428     	 cmp r0,#4
 5126 0070 10D0     	 beq .L587
 5127              	.LVL675:
 5128              	.L594:
3295:fatfs/ff.c    **** 					}
3296:fatfs/ff.c    **** 				}
3297:fatfs/ff.c    **** 			}
3298:fatfs/ff.c    **** 			if (res == FR_OK) {
3299:fatfs/ff.c    **** 				res = dir_remove(&dj);		/* Remove the directory entry */
3300:fatfs/ff.c    **** 				if (res == FR_OK) {
3301:fatfs/ff.c    **** 					if (dclst)				/* Remove the cluster chain if exist */
3302:fatfs/ff.c    **** 						res = remove_chain(dj.fs, dclst);
3303:fatfs/ff.c    **** 					if (res == FR_OK) res = sync(dj.fs);
3304:fatfs/ff.c    **** 				}
3305:fatfs/ff.c    **** 			}
3306:fatfs/ff.c    **** 		}
3307:fatfs/ff.c    **** 		FREE_BUF();
3308:fatfs/ff.c    **** 	}
3309:fatfs/ff.c    **** 	LEAVE_FF(dj.fs, res);
3310:fatfs/ff.c    **** }
 5129              	 .loc 1 3310 0
 5130 0072 2046     	 mov r0,r4
 5131 0074 14B0     	 add sp,sp,#80
 5132              	 .cfi_remember_state
 5133              	 .cfi_def_cfa_offset 16
 5134              	 
 5135 0076 70BD     	 pop {r4,r5,r6,pc}
 5136              	.LVL676:
 5137              	.L591:
 5138              	 .cfi_restore_state
3274:fatfs/ff.c    **** 			} else {
 5139              	 .loc 1 3274 0
 5140 0078 0624     	 movs r4,#6
 5141 007a DBE7     	 b .L586
 5142              	.LVL677:
 5143              	.L588:
3302:fatfs/ff.c    **** 					if (res == FR_OK) res = sync(dj.fs);
 5144              	 .loc 1 3302 0
 5145 007c 2946     	 mov r1,r5
 5146 007e 0698     	 ldr r0,[sp,#24]
 5147              	.LVL678:
 5148 0080 114B     	 ldr r3,.L606+24
 5149 0082 9847     	 blx r3
 5150              	.LVL679:
3303:fatfs/ff.c    **** 				}
 5151              	 .loc 1 3303 0
 5152 0084 0446     	 mov r4,r0
 5153 0086 0028     	 cmp r0,#0
 5154 0088 F3D1     	 bne .L594
 5155 008a 0BE0     	 b .L589
 5156              	.LVL680:
 5157              	.L592:
3282:fatfs/ff.c    **** 				} else {
 5158              	 .loc 1 3282 0
 5159 008c 0224     	 movs r4,#2
 5160 008e F0E7     	 b .L594
 5161              	.LVL681:
 5162              	.L593:
3293:fatfs/ff.c    **** 						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
 5163              	 .loc 1 3293 0
 5164 0090 0724     	 movs r4,#7
 5165 0092 EEE7     	 b .L594
 5166              	.LVL682:
 5167              	.L587:
3299:fatfs/ff.c    **** 				if (res == FR_OK) {
 5168              	 .loc 1 3299 0
 5169 0094 06A8     	 add r0,sp,#24
 5170 0096 0D4B     	 ldr r3,.L606+28
 5171 0098 9847     	 blx r3
 5172              	.LVL683:
3300:fatfs/ff.c    **** 					if (dclst)				/* Remove the cluster chain if exist */
 5173              	 .loc 1 3300 0
 5174 009a 0446     	 mov r4,r0
 5175 009c 0028     	 cmp r0,#0
 5176 009e E8D1     	 bne .L594
3301:fatfs/ff.c    **** 						res = remove_chain(dj.fs, dclst);
 5177              	 .loc 1 3301 0
 5178 00a0 002D     	 cmp r5,#0
 5179 00a2 EBD1     	 bne .L588
 5180              	.L589:
 5181              	.LVL684:
3303:fatfs/ff.c    **** 				}
 5182              	 .loc 1 3303 0
 5183 00a4 0698     	 ldr r0,[sp,#24]
 5184 00a6 0A4B     	 ldr r3,.L606+32
 5185 00a8 9847     	 blx r3
 5186              	.LVL685:
 5187 00aa 0446     	 mov r4,r0
 5188              	.LVL686:
 5189 00ac E1E7     	 b .L594
 5190              	.L607:
 5191 00ae 00BF     	 .align 2
 5192              	.L606:
 5193 00b0 00000000 	 .word chk_mounted
 5194 00b4 00000000 	 .word follow_path
 5195 00b8 00000000 	 .word ld_clust.isra.0
 5196 00bc 00000000 	 .word mem_cpy
 5197 00c0 00000000 	 .word dir_sdi
 5198 00c4 00000000 	 .word dir_read
 5199 00c8 00000000 	 .word remove_chain
 5200 00cc 00000000 	 .word dir_remove
 5201 00d0 00000000 	 .word sync
 5202              	 .cfi_endproc
 5203              	.LFE37:
 5205              	 .section .text.f_mkdir,"ax",%progbits
 5206              	 .align 1
 5207              	 .global f_mkdir
 5208              	 .syntax unified
 5209              	 .thumb
 5210              	 .thumb_func
 5211              	 .fpu softvfp
 5213              	f_mkdir:
 5214              	.LFB38:
3311:fatfs/ff.c    **** 
3312:fatfs/ff.c    **** 
3313:fatfs/ff.c    **** 
3314:fatfs/ff.c    **** 
3315:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3316:fatfs/ff.c    **** /* Create a Directory                                                    */
3317:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3318:fatfs/ff.c    **** 
3319:fatfs/ff.c    **** FRESULT f_mkdir (
3320:fatfs/ff.c    **** 	const TCHAR *path		/* Pointer to the directory path */
3321:fatfs/ff.c    **** )
3322:fatfs/ff.c    **** {
 5215              	 .loc 1 3322 0
 5216              	 .cfi_startproc
 5217              	 
 5218              	 
 5219              	.LVL687:
 5220 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
 5221              	 .cfi_def_cfa_offset 36
 5222              	 .cfi_offset 4,-36
 5223              	 .cfi_offset 5,-32
 5224              	 .cfi_offset 6,-28
 5225              	 .cfi_offset 7,-24
 5226              	 .cfi_offset 8,-20
 5227              	 .cfi_offset 9,-16
 5228              	 .cfi_offset 10,-12
 5229              	 .cfi_offset 11,-8
 5230              	 .cfi_offset 14,-4
3323:fatfs/ff.c    **** 	FRESULT res;
3324:fatfs/ff.c    **** 	DIR dj;
3325:fatfs/ff.c    **** 	BYTE *dir, n;
3326:fatfs/ff.c    **** 	DWORD dsc, dcl, pcl, tim = get_fattime();
 5231              	 .loc 1 3326 0
 5232 0004 7B4B     	 ldr r3,.L633
3322:fatfs/ff.c    **** 	FRESULT res;
 5233              	 .loc 1 3322 0
 5234 0006 95B0     	 sub sp,sp,#84
 5235              	 .cfi_def_cfa_offset 120
3322:fatfs/ff.c    **** 	FRESULT res;
 5236              	 .loc 1 3322 0
 5237 0008 0990     	 str r0,[sp,#36]
 5238              	 .loc 1 3326 0
 5239 000a 9847     	 blx r3
 5240              	.LVL688:
3327:fatfs/ff.c    **** 	DEF_NAMEBUF;
3328:fatfs/ff.c    **** 
3329:fatfs/ff.c    **** 
3330:fatfs/ff.c    **** 	res = chk_mounted(&path, &dj.fs, 1);
 5241              	 .loc 1 3330 0
 5242 000c 0122     	 movs r2,#1
3326:fatfs/ff.c    **** 	DEF_NAMEBUF;
 5243              	 .loc 1 3326 0
 5244 000e 0646     	 mov r6,r0
 5245              	.LVL689:
 5246              	 .loc 1 3330 0
 5247 0010 0DA9     	 add r1,sp,#52
 5248 0012 09A8     	 add r0,sp,#36
 5249              	.LVL690:
 5250 0014 784B     	 ldr r3,.L633+4
 5251 0016 9847     	 blx r3
 5252              	.LVL691:
 5253 0018 8146     	 mov r9,r0
 5254 001a 0446     	 mov r4,r0
 5255              	.LVL692:
3331:fatfs/ff.c    **** 	if (res == FR_OK) {
 5256              	 .loc 1 3331 0
 5257 001c 0028     	 cmp r0,#0
 5258 001e 40F0DC80 	 bne .L628
3332:fatfs/ff.c    **** 		INIT_BUF(dj);
 5259              	 .loc 1 3332 0
 5260 0022 0AAB     	 add r3,sp,#40
 5261 0024 1393     	 str r3,[sp,#76]
3333:fatfs/ff.c    **** 		res = follow_path(&dj, path);			/* Follow the file path */
 5262              	 .loc 1 3333 0
 5263 0026 0999     	 ldr r1,[sp,#36]
 5264 0028 0DA8     	 add r0,sp,#52
 5265              	.LVL693:
 5266 002a 744B     	 ldr r3,.L633+8
 5267 002c 9847     	 blx r3
 5268              	.LVL694:
3334:fatfs/ff.c    **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 5269              	 .loc 1 3334 0
 5270 002e 8146     	 mov r9,r0
 5271 0030 0028     	 cmp r0,#0
 5272 0032 00F0DC80 	 beq .L624
3335:fatfs/ff.c    **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
3336:fatfs/ff.c    **** 			res = FR_INVALID_NAME;
3337:fatfs/ff.c    **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
 5273              	 .loc 1 3337 0
 5274 0036 0428     	 cmp r0,#4
 5275 0038 40F0CF80 	 bne .L628
3338:fatfs/ff.c    **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 5276              	 .loc 1 3338 0
 5277 003c 2146     	 mov r1,r4
 5278 003e 0D98     	 ldr r0,[sp,#52]
 5279              	.LVL695:
 5280 0040 6F4B     	 ldr r3,.L633+12
 5281 0042 9847     	 blx r3
 5282              	.LVL696:
3339:fatfs/ff.c    **** 			res = FR_OK;
3340:fatfs/ff.c    **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 5283              	 .loc 1 3340 0
 5284 0044 0546     	 mov r5,r0
 5285 0046 0028     	 cmp r0,#0
 5286 0048 00F0C180 	 beq .L625
3341:fatfs/ff.c    **** 			if (dcl == 1) res = FR_INT_ERR;
 5287              	 .loc 1 3341 0
 5288 004c 0128     	 cmp r0,#1
 5289 004e 00F0C880 	 beq .L626
3342:fatfs/ff.c    **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 5290              	 .loc 1 3342 0
 5291 0052 431C     	 adds r3,r0,#1
 5292 0054 00F0C880 	 beq .L627
3343:fatfs/ff.c    **** 			if (res == FR_OK)					/* Flush FAT */
3344:fatfs/ff.c    **** 				res = move_window(dj.fs, 0);
 5293              	 .loc 1 3344 0
 5294 0058 2146     	 mov r1,r4
 5295 005a 0D98     	 ldr r0,[sp,#52]
 5296              	.LVL697:
 5297 005c 694B     	 ldr r3,.L633+16
 5298 005e 9847     	 blx r3
 5299              	.LVL698:
 5300 0060 0246     	 mov r2,r0
 5301 0062 8146     	 mov r9,r0
 5302              	.LVL699:
3345:fatfs/ff.c    **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 5303              	 .loc 1 3345 0
 5304 0064 0028     	 cmp r0,#0
 5305 0066 40F0B480 	 bne .L610
3346:fatfs/ff.c    **** 				dsc = clust2sect(dj.fs, dcl);
 5306              	 .loc 1 3346 0
 5307 006a 0D9C     	 ldr r4,[sp,#52]
 5308 006c 664B     	 ldr r3,.L633+20
 5309 006e 2946     	 mov r1,r5
 5310 0070 2046     	 mov r0,r4
 5311              	.LVL700:
 5312 0072 9847     	 blx r3
 5313              	.LVL701:
3347:fatfs/ff.c    **** 				dir = dj.fs->win;
 5314              	 .loc 1 3347 0
 5315 0074 04F12E07 	 add r7,r4,#46
3346:fatfs/ff.c    **** 				dsc = clust2sect(dj.fs, dcl);
 5316              	 .loc 1 3346 0
 5317 0078 8146     	 mov r9,r0
 5318              	.LVL702:
 5319              	.LBB119:
 5320              	.LBB120:
 548:fatfs/ff.c    **** 
 5321              	 .loc 1 548 0
 5322 007a B846     	 mov r8,r7
 5323 007c 04F22E23 	 addw r3,r4,#558
 5324              	.LVL703:
 5325              	.L612:
 550:fatfs/ff.c    **** 		*d++ = (BYTE)val;
 5326              	 .loc 1 550 0
 5327 0080 9845     	 cmp r8,r3
 5328 0082 40F08580 	 bne .L613
 5329 0086 3B46     	 mov r3,r7
 5330              	.LBE120:
 5331              	.LBE119:
 5332              	.LBB122:
 5333              	.LBB123:
 551:fatfs/ff.c    **** }
 5334              	 .loc 1 551 0
 5335 0088 2021     	 movs r1,#32
 5336 008a 04F13902 	 add r2,r4,#57
 5337              	.L614:
 5338              	.LVL704:
 550:fatfs/ff.c    **** 		*d++ = (BYTE)val;
 5339              	 .loc 1 550 0
 5340 008e 9342     	 cmp r3,r2
 5341 0090 40F08180 	 bne .L615
 5342              	.LVL705:
 5343              	.LBE123:
 5344              	.LBE122:
3348:fatfs/ff.c    **** 				mem_set(dir, 0, SS(dj.fs));
3349:fatfs/ff.c    **** 				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
3350:fatfs/ff.c    **** 				dir[DIR_Name] = '.';
3351:fatfs/ff.c    **** 				dir[DIR_Attr] = AM_DIR;
 5345              	 .loc 1 3351 0
 5346 0094 1023     	 movs r3,#16
3350:fatfs/ff.c    **** 				dir[DIR_Attr] = AM_DIR;
 5347              	 .loc 1 3350 0
 5348 0096 4FF02E0B 	 mov fp,#46
 5349              	 .loc 1 3351 0
 5350 009a 84F83930 	 strb r3,[r4,#57]
3352:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5351              	 .loc 1 3352 0
 5352 009e F3B2     	 uxtb r3,r6
 5353 00a0 0193     	 str r3,[sp,#4]
 5354 00a2 9DF80430 	 ldrb r3,[sp,#4]
3353:fatfs/ff.c    **** 				st_clust(dir, dcl);
3354:fatfs/ff.c    **** 				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
 5355              	 .loc 1 3354 0
 5356 00a6 2022     	 movs r2,#32
3352:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5357              	 .loc 1 3352 0
 5358 00a8 84F84430 	 strb r3,[r4,#68]
 5359 00ac C6F30723 	 ubfx r3,r6,#8,#8
 5360 00b0 0293     	 str r3,[sp,#8]
 5361 00b2 9DF80830 	 ldrb r3,[sp,#8]
 5362              	 .loc 1 3354 0
 5363 00b6 3946     	 mov r1,r7
3352:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5364              	 .loc 1 3352 0
 5365 00b8 84F84530 	 strb r3,[r4,#69]
 5366 00bc C6F30743 	 ubfx r3,r6,#16,#8
 5367 00c0 0393     	 str r3,[sp,#12]
 5368 00c2 9DF80C30 	 ldrb r3,[sp,#12]
3350:fatfs/ff.c    **** 				dir[DIR_Attr] = AM_DIR;
 5369              	 .loc 1 3350 0
 5370 00c6 84F82EB0 	 strb fp,[r4,#46]
3352:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5371              	 .loc 1 3352 0
 5372 00ca 84F84630 	 strb r3,[r4,#70]
 5373 00ce 330E     	 lsrs r3,r6,#24
 5374 00d0 0493     	 str r3,[sp,#16]
 5375 00d2 9DF81030 	 ldrb r3,[sp,#16]
 5376              	.LBB125:
 5377              	.LBB126:
1206:fatfs/ff.c    **** }
 5378              	 .loc 1 1206 0
 5379 00d6 2E0C     	 lsrs r6,r5,#16
 5380              	.LVL706:
 5381              	.LBE126:
 5382              	.LBE125:
3352:fatfs/ff.c    **** 				st_clust(dir, dcl);
 5383              	 .loc 1 3352 0
 5384 00d8 84F84730 	 strb r3,[r4,#71]
 5385              	.LVL707:
 5386              	.LBB129:
 5387              	.LBB127:
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 5388              	 .loc 1 1205 0
 5389 00dc EBB2     	 uxtb r3,r5
 5390 00de 0593     	 str r3,[sp,#20]
 5391 00e0 9DF81430 	 ldrb r3,[sp,#20]
1206:fatfs/ff.c    **** }
 5392              	 .loc 1 1206 0
 5393 00e4 5FFA86FA 	 uxtb r10,r6
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 5394              	 .loc 1 1205 0
 5395 00e8 84F84830 	 strb r3,[r4,#72]
 5396 00ec C5F30723 	 ubfx r3,r5,#8,#8
 5397 00f0 0693     	 str r3,[sp,#24]
 5398 00f2 9DF81830 	 ldrb r3,[sp,#24]
1206:fatfs/ff.c    **** }
 5399              	 .loc 1 1206 0
 5400 00f6 360A     	 lsrs r6,r6,#8
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 5401              	 .loc 1 1205 0
 5402 00f8 84F84930 	 strb r3,[r4,#73]
1206:fatfs/ff.c    **** }
 5403              	 .loc 1 1206 0
 5404 00fc 84F842A0 	 strb r10,[r4,#66]
 5405              	.LBE127:
 5406              	.LBE129:
 5407              	 .loc 1 3354 0
 5408 0100 424B     	 ldr r3,.L633+24
 5409              	.LBB130:
 5410              	.LBB128:
1206:fatfs/ff.c    **** }
 5411              	 .loc 1 1206 0
 5412 0102 84F84360 	 strb r6,[r4,#67]
 5413              	.LVL708:
 5414              	.LBE128:
 5415              	.LBE130:
 5416              	 .loc 1 3354 0
 5417 0106 04F14E00 	 add r0,r4,#78
 5418              	.LVL709:
 5419 010a 9847     	 blx r3
 5420              	.LVL710:
3355:fatfs/ff.c    **** 				dir[33] = '.'; pcl = dj.sclust;
3356:fatfs/ff.c    **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 5421              	 .loc 1 3356 0
 5422 010c 0D9A     	 ldr r2,[sp,#52]
3355:fatfs/ff.c    **** 				dir[33] = '.'; pcl = dj.sclust;
 5423              	 .loc 1 3355 0
 5424 010e 84F84FB0 	 strb fp,[r4,#79]
 5425              	 .loc 1 3356 0
 5426 0112 1178     	 ldrb r1,[r2]
3355:fatfs/ff.c    **** 				dir[33] = '.'; pcl = dj.sclust;
 5427              	 .loc 1 3355 0
 5428 0114 0F9B     	 ldr r3,[sp,#60]
 5429              	.LVL711:
 5430              	 .loc 1 3356 0
 5431 0116 0329     	 cmp r1,#3
 5432 0118 04D1     	 bne .L616
 5433              	 .loc 1 3356 0 is_stmt 0 discriminator 1
 5434 011a D2F82210 	 ldr r1,[r2,#34]
3357:fatfs/ff.c    **** 					pcl = 0;
 5435              	 .loc 1 3357 0 is_stmt 1 discriminator 1
 5436 011e 8B42     	 cmp r3,r1
 5437 0120 08BF     	 it eq
 5438 0122 0023     	 moveq r3,#0
 5439              	.LVL712:
 5440              	.L616:
3358:fatfs/ff.c    **** 				st_clust(dir+SZ_DIR, pcl);
3359:fatfs/ff.c    **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
3360:fatfs/ff.c    **** 					dj.fs->winsect = dsc++;
3361:fatfs/ff.c    **** 					dj.fs->wflag = 1;
3362:fatfs/ff.c    **** 					res = move_window(dj.fs, 0);
 5441              	 .loc 1 3362 0
 5442 0124 4FF0000B 	 mov fp,#0
 5443              	.LBB131:
 5444              	.LBB132:
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 5445              	 .loc 1 1205 0
 5446 0128 84F86830 	 strb r3,[r4,#104]
 5447 012c C3F30721 	 ubfx r1,r3,#8,#8
1206:fatfs/ff.c    **** }
 5448              	 .loc 1 1206 0
 5449 0130 1B0C     	 lsrs r3,r3,#16
 5450              	.LVL713:
 5451 0132 84F86230 	 strb r3,[r4,#98]
 5452 0136 1B0A     	 lsrs r3,r3,#8
 5453 0138 84F86330 	 strb r3,[r4,#99]
 5454              	.LVL714:
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 5455              	 .loc 1 1205 0
 5456 013c 84F86910 	 strb r1,[r4,#105]
 5457              	.LBE132:
 5458              	.LBE131:
3359:fatfs/ff.c    **** 					dj.fs->winsect = dsc++;
 5459              	 .loc 1 3359 0
 5460 0140 9478     	 ldrb r4,[r2,#2]
 5461              	.LVL715:
 5462              	 .loc 1 3362 0
 5463 0142 304B     	 ldr r3,.L633+16
 5464              	.LVL716:
 5465              	.L617:
3359:fatfs/ff.c    **** 					dj.fs->winsect = dsc++;
 5466              	 .loc 1 3359 0 discriminator 1
 5467 0144 54BB     	 cbnz r4,.L620
3363:fatfs/ff.c    **** 					if (res != FR_OK) break;
3364:fatfs/ff.c    **** 					mem_set(dir, 0, SS(dj.fs));
3365:fatfs/ff.c    **** 				}
3366:fatfs/ff.c    **** 			}
3367:fatfs/ff.c    **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 5468              	 .loc 1 3367 0
 5469 0146 0DA8     	 add r0,sp,#52
 5470 0148 314B     	 ldr r3,.L633+28
 5471 014a 9847     	 blx r3
 5472              	.LVL717:
3368:fatfs/ff.c    **** 			if (res != FR_OK) {
 5473              	 .loc 1 3368 0
 5474 014c 8146     	 mov r9,r0
 5475              	.LVL718:
 5476 014e 0028     	 cmp r0,#0
 5477 0150 3FD1     	 bne .L610
3369:fatfs/ff.c    **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
3370:fatfs/ff.c    **** 			} else {
3371:fatfs/ff.c    **** 				dir = dj.dir;
3372:fatfs/ff.c    **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 5478              	 .loc 1 3372 0
 5479 0152 1022     	 movs r2,#16
3371:fatfs/ff.c    **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 5480              	 .loc 1 3371 0
 5481 0154 129B     	 ldr r3,[sp,#72]
 5482              	.LVL719:
 5483              	 .loc 1 3372 0
 5484 0156 DA72     	 strb r2,[r3,#11]
3373:fatfs/ff.c    **** 				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
 5485              	 .loc 1 3373 0
 5486 0158 9DF80420 	 ldrb r2,[sp,#4]
 5487              	.LBB133:
 5488              	.LBB134:
1206:fatfs/ff.c    **** }
 5489              	 .loc 1 1206 0
 5490 015c 83F814A0 	 strb r10,[r3,#20]
 5491              	.LBE134:
 5492              	.LBE133:
 5493              	 .loc 1 3373 0
 5494 0160 9A75     	 strb r2,[r3,#22]
 5495 0162 9DF80820 	 ldrb r2,[sp,#8]
 5496              	.LBB137:
 5497              	.LBB135:
1206:fatfs/ff.c    **** }
 5498              	 .loc 1 1206 0
 5499 0166 5E75     	 strb r6,[r3,#21]
 5500              	.LBE135:
 5501              	.LBE137:
 5502              	 .loc 1 3373 0
 5503 0168 DA75     	 strb r2,[r3,#23]
 5504 016a 9DF80C20 	 ldrb r2,[sp,#12]
 5505 016e 1A76     	 strb r2,[r3,#24]
 5506 0170 9DF81020 	 ldrb r2,[sp,#16]
 5507 0174 5A76     	 strb r2,[r3,#25]
 5508              	.LVL720:
 5509              	.LBB138:
 5510              	.LBB136:
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 5511              	 .loc 1 1205 0
 5512 0176 9DF81420 	 ldrb r2,[sp,#20]
 5513 017a 9A76     	 strb r2,[r3,#26]
 5514 017c 9DF81820 	 ldrb r2,[sp,#24]
 5515 0180 DA76     	 strb r2,[r3,#27]
 5516              	.LBE136:
 5517              	.LBE138:
3374:fatfs/ff.c    **** 				st_clust(dir, dcl);					/* Table start cluster */
3375:fatfs/ff.c    **** 				dj.fs->wflag = 1;
 5518              	 .loc 1 3375 0
 5519 0182 0123     	 movs r3,#1
 5520              	.LVL721:
 5521 0184 0D98     	 ldr r0,[sp,#52]
 5522              	.LVL722:
 5523 0186 0371     	 strb r3,[r0,#4]
3376:fatfs/ff.c    **** 				res = sync(dj.fs);
 5524              	 .loc 1 3376 0
 5525 0188 224B     	 ldr r3,.L633+32
 5526 018a 9847     	 blx r3
 5527              	.LVL723:
 5528 018c 8146     	 mov r9,r0
 5529              	.LVL724:
 5530 018e 24E0     	 b .L628
 5531              	.LVL725:
 5532              	.L613:
 5533              	.LBB139:
 5534              	.LBB121:
 551:fatfs/ff.c    **** }
 5535              	 .loc 1 551 0
 5536 0190 08F8012B 	 strb r2,[r8],#1
 5537              	.LVL726:
 5538 0194 74E7     	 b .L612
 5539              	.LVL727:
 5540              	.L615:
 5541              	.LBE121:
 5542              	.LBE139:
 5543              	.LBB140:
 5544              	.LBB124:
 5545 0196 03F8011B 	 strb r1,[r3],#1
 5546              	.LVL728:
 5547 019a 78E7     	 b .L614
 5548              	.LVL729:
 5549              	.L620:
 5550              	.LBE124:
 5551              	.LBE140:
3361:fatfs/ff.c    **** 					res = move_window(dj.fs, 0);
 5552              	 .loc 1 3361 0
 5553 019c 0121     	 movs r1,#1
3360:fatfs/ff.c    **** 					dj.fs->wflag = 1;
 5554              	 .loc 1 3360 0
 5555 019e 0D98     	 ldr r0,[sp,#52]
 5556 01a0 09F10102 	 add r2,r9,#1
 5557 01a4 C0F82A90 	 str r9,[r0,#42]
3361:fatfs/ff.c    **** 					res = move_window(dj.fs, 0);
 5558              	 .loc 1 3361 0
 5559 01a8 0171     	 strb r1,[r0,#4]
3362:fatfs/ff.c    **** 					if (res != FR_OK) break;
 5560              	 .loc 1 3362 0
 5561 01aa 0021     	 movs r1,#0
3360:fatfs/ff.c    **** 					dj.fs->wflag = 1;
 5562              	 .loc 1 3360 0
 5563 01ac 0892     	 str r2,[sp,#32]
 5564              	.LVL730:
3362:fatfs/ff.c    **** 					if (res != FR_OK) break;
 5565              	 .loc 1 3362 0
 5566 01ae 0793     	 str r3,[sp,#28]
 5567 01b0 9847     	 blx r3
 5568              	.LVL731:
 5569 01b2 8146     	 mov r9,r0
 5570              	.LVL732:
3363:fatfs/ff.c    **** 					mem_set(dir, 0, SS(dj.fs));
 5571              	 .loc 1 3363 0
 5572 01b4 68B9     	 cbnz r0,.L610
 5573 01b6 3946     	 mov r1,r7
 5574 01b8 079B     	 ldr r3,[sp,#28]
 5575 01ba 089A     	 ldr r2,[sp,#32]
 5576              	.L618:
 5577              	.LVL733:
 5578              	.LBB141:
 5579              	.LBB142:
 550:fatfs/ff.c    **** 		*d++ = (BYTE)val;
 5580              	 .loc 1 550 0
 5581 01bc 8845     	 cmp r8,r1
 5582 01be 03D1     	 bne .L619
 5583              	.LVL734:
 5584              	.LBE142:
 5585              	.LBE141:
3359:fatfs/ff.c    **** 					dj.fs->winsect = dsc++;
 5586              	 .loc 1 3359 0 discriminator 2
 5587 01c0 013C     	 subs r4,r4,#1
 5588              	.LVL735:
 5589 01c2 E4B2     	 uxtb r4,r4
 5590              	.LVL736:
3360:fatfs/ff.c    **** 					dj.fs->wflag = 1;
 5591              	 .loc 1 3360 0 discriminator 2
 5592 01c4 9146     	 mov r9,r2
 5593 01c6 BDE7     	 b .L617
 5594              	.LVL737:
 5595              	.L619:
 5596              	.LBB144:
 5597              	.LBB143:
 551:fatfs/ff.c    **** }
 5598              	 .loc 1 551 0
 5599 01c8 01F801BB 	 strb fp,[r1],#1
 5600              	.LVL738:
 5601 01cc F6E7     	 b .L618
 5602              	.LVL739:
 5603              	.L625:
 5604              	.LBE143:
 5605              	.LBE144:
3340:fatfs/ff.c    **** 			if (dcl == 1) res = FR_INT_ERR;
 5606              	 .loc 1 3340 0
 5607 01ce 4FF00709 	 mov r9,#7
 5608              	.LVL740:
 5609              	.L610:
3369:fatfs/ff.c    **** 			} else {
 5610              	 .loc 1 3369 0
 5611 01d2 2946     	 mov r1,r5
 5612 01d4 0D98     	 ldr r0,[sp,#52]
 5613 01d6 104B     	 ldr r3,.L633+36
 5614 01d8 9847     	 blx r3
 5615              	.LVL741:
 5616              	.L628:
3377:fatfs/ff.c    **** 			}
3378:fatfs/ff.c    **** 		}
3379:fatfs/ff.c    **** 		FREE_BUF();
3380:fatfs/ff.c    **** 	}
3381:fatfs/ff.c    **** 
3382:fatfs/ff.c    **** 	LEAVE_FF(dj.fs, res);
3383:fatfs/ff.c    **** }
 5617              	 .loc 1 3383 0
 5618 01da 4846     	 mov r0,r9
 5619 01dc 15B0     	 add sp,sp,#84
 5620              	 .cfi_remember_state
 5621              	 .cfi_def_cfa_offset 36
 5622              	 
 5623 01de BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 5624              	.LVL742:
 5625              	.L626:
 5626              	 .cfi_restore_state
3341:fatfs/ff.c    **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 5627              	 .loc 1 3341 0
 5628 01e2 4FF00209 	 mov r9,#2
 5629 01e6 F4E7     	 b .L610
 5630              	.L627:
3342:fatfs/ff.c    **** 			if (res == FR_OK)					/* Flush FAT */
 5631              	 .loc 1 3342 0
 5632 01e8 4FF00109 	 mov r9,#1
 5633 01ec F1E7     	 b .L610
 5634              	.LVL743:
 5635              	.L624:
3334:fatfs/ff.c    **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
 5636              	 .loc 1 3334 0
 5637 01ee 4FF00809 	 mov r9,#8
3382:fatfs/ff.c    **** }
 5638              	 .loc 1 3382 0
 5639 01f2 F2E7     	 b .L628
 5640              	.L634:
 5641              	 .align 2
 5642              	.L633:
 5643 01f4 00000000 	 .word get_fattime
 5644 01f8 00000000 	 .word chk_mounted
 5645 01fc 00000000 	 .word follow_path
 5646 0200 00000000 	 .word create_chain
 5647 0204 00000000 	 .word move_window
 5648 0208 00000000 	 .word clust2sect
 5649 020c 00000000 	 .word mem_cpy
 5650 0210 00000000 	 .word dir_register
 5651 0214 00000000 	 .word sync
 5652 0218 00000000 	 .word remove_chain
 5653              	 .cfi_endproc
 5654              	.LFE38:
 5656              	 .section .text.f_chmod,"ax",%progbits
 5657              	 .align 1
 5658              	 .global f_chmod
 5659              	 .syntax unified
 5660              	 .thumb
 5661              	 .thumb_func
 5662              	 .fpu softvfp
 5664              	f_chmod:
 5665              	.LFB39:
3384:fatfs/ff.c    **** 
3385:fatfs/ff.c    **** 
3386:fatfs/ff.c    **** 
3387:fatfs/ff.c    **** 
3388:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3389:fatfs/ff.c    **** /* Change Attribute                                                      */
3390:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3391:fatfs/ff.c    **** 
3392:fatfs/ff.c    **** FRESULT f_chmod (
3393:fatfs/ff.c    **** 	const TCHAR *path,	/* Pointer to the file path */
3394:fatfs/ff.c    **** 	BYTE value,			/* Attribute bits */
3395:fatfs/ff.c    **** 	BYTE mask			/* Attribute mask to change */
3396:fatfs/ff.c    **** )
3397:fatfs/ff.c    **** {
 5666              	 .loc 1 3397 0
 5667              	 .cfi_startproc
 5668              	 
 5669              	 
 5670              	.LVL744:
 5671 0000 30B5     	 push {r4,r5,lr}
 5672              	 .cfi_def_cfa_offset 12
 5673              	 .cfi_offset 4,-12
 5674              	 .cfi_offset 5,-8
 5675              	 .cfi_offset 14,-4
 5676 0002 8DB0     	 sub sp,sp,#52
 5677              	 .cfi_def_cfa_offset 64
 5678              	 .loc 1 3397 0
 5679 0004 0190     	 str r0,[sp,#4]
 5680 0006 0D46     	 mov r5,r1
 5681 0008 1446     	 mov r4,r2
3398:fatfs/ff.c    **** 	FRESULT res;
3399:fatfs/ff.c    **** 	DIR dj;
3400:fatfs/ff.c    **** 	BYTE *dir;
3401:fatfs/ff.c    **** 	DEF_NAMEBUF;
3402:fatfs/ff.c    **** 
3403:fatfs/ff.c    **** 
3404:fatfs/ff.c    **** 	res = chk_mounted(&path, &dj.fs, 1);
 5682              	 .loc 1 3404 0
 5683 000a 05A9     	 add r1,sp,#20
 5684              	.LVL745:
 5685 000c 0122     	 movs r2,#1
 5686              	.LVL746:
 5687 000e 01A8     	 add r0,sp,#4
 5688              	.LVL747:
 5689 0010 0D4B     	 ldr r3,.L638
 5690 0012 9847     	 blx r3
 5691              	.LVL748:
3405:fatfs/ff.c    **** 	if (res == FR_OK) {
 5692              	 .loc 1 3405 0
 5693 0014 A0B9     	 cbnz r0,.L636
3406:fatfs/ff.c    **** 		INIT_BUF(dj);
 5694              	 .loc 1 3406 0
 5695 0016 02AB     	 add r3,sp,#8
 5696 0018 0B93     	 str r3,[sp,#44]
3407:fatfs/ff.c    **** 		res = follow_path(&dj, path);		/* Follow the file path */
 5697              	 .loc 1 3407 0
 5698 001a 0199     	 ldr r1,[sp,#4]
 5699 001c 05A8     	 add r0,sp,#20
 5700              	.LVL749:
 5701 001e 0B4B     	 ldr r3,.L638+4
 5702 0020 9847     	 blx r3
 5703              	.LVL750:
3408:fatfs/ff.c    **** 		FREE_BUF();
3409:fatfs/ff.c    **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
3410:fatfs/ff.c    **** 			res = FR_INVALID_NAME;
3411:fatfs/ff.c    **** 		if (res == FR_OK) {
 5704              	 .loc 1 3411 0
 5705 0022 68B9     	 cbnz r0,.L636
3412:fatfs/ff.c    **** 			dir = dj.dir;
 5706              	 .loc 1 3412 0
 5707 0024 0A9A     	 ldr r2,[sp,#40]
 5708              	.LVL751:
3413:fatfs/ff.c    **** 			if (!dir) {						/* Is it a root directory? */
 5709              	 .loc 1 3413 0
 5710 0026 6AB1     	 cbz r2,.L637
 5711              	.LVL752:
3414:fatfs/ff.c    **** 				res = FR_INVALID_NAME;
3415:fatfs/ff.c    **** 			} else {						/* File or sub directory */
3416:fatfs/ff.c    **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
3417:fatfs/ff.c    **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 5712              	 .loc 1 3417 0
 5713 0028 D37A     	 ldrb r3,[r2,#11]
 5714 002a 5D40     	 eors r5,r5,r3
 5715 002c 2C40     	 ands r4,r4,r5
 5716              	.LVL753:
 5717 002e 04F02704 	 and r4,r4,#39
 5718 0032 5C40     	 eors r4,r4,r3
3418:fatfs/ff.c    **** 				dj.fs->wflag = 1;
 5719              	 .loc 1 3418 0
 5720 0034 0123     	 movs r3,#1
3417:fatfs/ff.c    **** 				dj.fs->wflag = 1;
 5721              	 .loc 1 3417 0
 5722 0036 D472     	 strb r4,[r2,#11]
 5723              	 .loc 1 3418 0
 5724 0038 0598     	 ldr r0,[sp,#20]
 5725              	.LVL754:
 5726 003a 0371     	 strb r3,[r0,#4]
3419:fatfs/ff.c    **** 				res = sync(dj.fs);
 5727              	 .loc 1 3419 0
 5728 003c 044B     	 ldr r3,.L638+8
 5729 003e 9847     	 blx r3
 5730              	.LVL755:
 5731              	.L636:
3420:fatfs/ff.c    **** 			}
3421:fatfs/ff.c    **** 		}
3422:fatfs/ff.c    **** 	}
3423:fatfs/ff.c    **** 
3424:fatfs/ff.c    **** 	LEAVE_FF(dj.fs, res);
3425:fatfs/ff.c    **** }
 5732              	 .loc 1 3425 0
 5733 0040 0DB0     	 add sp,sp,#52
 5734              	 .cfi_remember_state
 5735              	 .cfi_def_cfa_offset 12
 5736              	 
 5737 0042 30BD     	 pop {r4,r5,pc}
 5738              	.LVL756:
 5739              	.L637:
 5740              	 .cfi_restore_state
3414:fatfs/ff.c    **** 			} else {						/* File or sub directory */
 5741              	 .loc 1 3414 0
 5742 0044 0620     	 movs r0,#6
 5743              	.LVL757:
 5744 0046 FBE7     	 b .L636
 5745              	.L639:
 5746              	 .align 2
 5747              	.L638:
 5748 0048 00000000 	 .word chk_mounted
 5749 004c 00000000 	 .word follow_path
 5750 0050 00000000 	 .word sync
 5751              	 .cfi_endproc
 5752              	.LFE39:
 5754              	 .section .text.f_utime,"ax",%progbits
 5755              	 .align 1
 5756              	 .global f_utime
 5757              	 .syntax unified
 5758              	 .thumb
 5759              	 .thumb_func
 5760              	 .fpu softvfp
 5762              	f_utime:
 5763              	.LFB40:
3426:fatfs/ff.c    **** 
3427:fatfs/ff.c    **** 
3428:fatfs/ff.c    **** 
3429:fatfs/ff.c    **** 
3430:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3431:fatfs/ff.c    **** /* Change Timestamp                                                      */
3432:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3433:fatfs/ff.c    **** 
3434:fatfs/ff.c    **** FRESULT f_utime (
3435:fatfs/ff.c    **** 	const TCHAR *path,	/* Pointer to the file/directory name */
3436:fatfs/ff.c    **** 	const FILINFO *fno	/* Pointer to the time stamp to be set */
3437:fatfs/ff.c    **** )
3438:fatfs/ff.c    **** {
 5764              	 .loc 1 3438 0
 5765              	 .cfi_startproc
 5766              	 
 5767              	 
 5768              	.LVL758:
 5769 0000 10B5     	 push {r4,lr}
 5770              	 .cfi_def_cfa_offset 8
 5771              	 .cfi_offset 4,-8
 5772              	 .cfi_offset 14,-4
 5773 0002 8CB0     	 sub sp,sp,#48
 5774              	 .cfi_def_cfa_offset 56
 5775              	 .loc 1 3438 0
 5776 0004 0190     	 str r0,[sp,#4]
 5777 0006 0C46     	 mov r4,r1
3439:fatfs/ff.c    **** 	FRESULT res;
3440:fatfs/ff.c    **** 	DIR dj;
3441:fatfs/ff.c    **** 	BYTE *dir;
3442:fatfs/ff.c    **** 	DEF_NAMEBUF;
3443:fatfs/ff.c    **** 
3444:fatfs/ff.c    **** 
3445:fatfs/ff.c    **** 	res = chk_mounted(&path, &dj.fs, 1);
 5778              	 .loc 1 3445 0
 5779 0008 0122     	 movs r2,#1
 5780 000a 05A9     	 add r1,sp,#20
 5781              	.LVL759:
 5782 000c 01A8     	 add r0,sp,#4
 5783              	.LVL760:
 5784 000e 0F4B     	 ldr r3,.L643
 5785 0010 9847     	 blx r3
 5786              	.LVL761:
3446:fatfs/ff.c    **** 	if (res == FR_OK) {
 5787              	 .loc 1 3446 0
 5788 0012 B8B9     	 cbnz r0,.L641
3447:fatfs/ff.c    **** 		INIT_BUF(dj);
 5789              	 .loc 1 3447 0
 5790 0014 02AB     	 add r3,sp,#8
 5791 0016 0B93     	 str r3,[sp,#44]
3448:fatfs/ff.c    **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5792              	 .loc 1 3448 0
 5793 0018 0199     	 ldr r1,[sp,#4]
 5794 001a 05A8     	 add r0,sp,#20
 5795              	.LVL762:
 5796 001c 0C4B     	 ldr r3,.L643+4
 5797 001e 9847     	 blx r3
 5798              	.LVL763:
3449:fatfs/ff.c    **** 		FREE_BUF();
3450:fatfs/ff.c    **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
3451:fatfs/ff.c    **** 			res = FR_INVALID_NAME;
3452:fatfs/ff.c    **** 		if (res == FR_OK) {
 5799              	 .loc 1 3452 0
 5800 0020 80B9     	 cbnz r0,.L641
3453:fatfs/ff.c    **** 			dir = dj.dir;
 5801              	 .loc 1 3453 0
 5802 0022 0A9B     	 ldr r3,[sp,#40]
 5803              	.LVL764:
3454:fatfs/ff.c    **** 			if (!dir) {					/* Root directory */
 5804              	 .loc 1 3454 0
 5805 0024 83B1     	 cbz r3,.L642
3455:fatfs/ff.c    **** 				res = FR_INVALID_NAME;
3456:fatfs/ff.c    **** 			} else {					/* File or sub-directory */
3457:fatfs/ff.c    **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 5806              	 .loc 1 3457 0
 5807 0026 E288     	 ldrh r2,[r4,#6]
 5808 0028 9A75     	 strb r2,[r3,#22]
 5809 002a E288     	 ldrh r2,[r4,#6]
 5810 002c 120A     	 lsrs r2,r2,#8
 5811 002e DA75     	 strb r2,[r3,#23]
3458:fatfs/ff.c    **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 5812              	 .loc 1 3458 0
 5813 0030 A288     	 ldrh r2,[r4,#4]
 5814 0032 1A76     	 strb r2,[r3,#24]
 5815 0034 A288     	 ldrh r2,[r4,#4]
 5816 0036 120A     	 lsrs r2,r2,#8
 5817 0038 5A76     	 strb r2,[r3,#25]
3459:fatfs/ff.c    **** 				dj.fs->wflag = 1;
 5818              	 .loc 1 3459 0
 5819 003a 0123     	 movs r3,#1
 5820              	.LVL765:
 5821 003c 0598     	 ldr r0,[sp,#20]
 5822              	.LVL766:
 5823 003e 0371     	 strb r3,[r0,#4]
3460:fatfs/ff.c    **** 				res = sync(dj.fs);
 5824              	 .loc 1 3460 0
 5825 0040 044B     	 ldr r3,.L643+8
 5826 0042 9847     	 blx r3
 5827              	.LVL767:
 5828              	.L641:
3461:fatfs/ff.c    **** 			}
3462:fatfs/ff.c    **** 		}
3463:fatfs/ff.c    **** 	}
3464:fatfs/ff.c    **** 
3465:fatfs/ff.c    **** 	LEAVE_FF(dj.fs, res);
3466:fatfs/ff.c    **** }
 5829              	 .loc 1 3466 0
 5830 0044 0CB0     	 add sp,sp,#48
 5831              	 .cfi_remember_state
 5832              	 .cfi_def_cfa_offset 8
 5833              	 
 5834 0046 10BD     	 pop {r4,pc}
 5835              	.LVL768:
 5836              	.L642:
 5837              	 .cfi_restore_state
3455:fatfs/ff.c    **** 			} else {					/* File or sub-directory */
 5838              	 .loc 1 3455 0
 5839 0048 0620     	 movs r0,#6
 5840              	.LVL769:
 5841 004a FBE7     	 b .L641
 5842              	.L644:
 5843              	 .align 2
 5844              	.L643:
 5845 004c 00000000 	 .word chk_mounted
 5846 0050 00000000 	 .word follow_path
 5847 0054 00000000 	 .word sync
 5848              	 .cfi_endproc
 5849              	.LFE40:
 5851              	 .section .text.f_rename,"ax",%progbits
 5852              	 .align 1
 5853              	 .global f_rename
 5854              	 .syntax unified
 5855              	 .thumb
 5856              	 .thumb_func
 5857              	 .fpu softvfp
 5859              	f_rename:
 5860              	.LFB41:
3467:fatfs/ff.c    **** 
3468:fatfs/ff.c    **** 
3469:fatfs/ff.c    **** 
3470:fatfs/ff.c    **** 
3471:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3472:fatfs/ff.c    **** /* Rename File/Directory                                                 */
3473:fatfs/ff.c    **** /*-----------------------------------------------------------------------*/
3474:fatfs/ff.c    **** 
3475:fatfs/ff.c    **** FRESULT f_rename (
3476:fatfs/ff.c    **** 	const TCHAR *path_old,	/* Pointer to the old name */
3477:fatfs/ff.c    **** 	const TCHAR *path_new	/* Pointer to the new name */
3478:fatfs/ff.c    **** )
3479:fatfs/ff.c    **** {
 5861              	 .loc 1 3479 0
 5862              	 .cfi_startproc
 5863              	 
 5864              	 
 5865              	.LVL770:
 5866 0000 70B5     	 push {r4,r5,r6,lr}
 5867              	 .cfi_def_cfa_offset 16
 5868              	 .cfi_offset 4,-16
 5869              	 .cfi_offset 5,-12
 5870              	 .cfi_offset 6,-8
 5871              	 .cfi_offset 14,-4
 5872 0002 9AB0     	 sub sp,sp,#104
 5873              	 .cfi_def_cfa_offset 120
 5874              	 .loc 1 3479 0
 5875 0004 0190     	 str r0,[sp,#4]
 5876 0006 0E46     	 mov r6,r1
3480:fatfs/ff.c    **** 	FRESULT res;
3481:fatfs/ff.c    **** 	DIR djo, djn;
3482:fatfs/ff.c    **** 	BYTE buf[21], *dir;
3483:fatfs/ff.c    **** 	DWORD dw;
3484:fatfs/ff.c    **** 	DEF_NAMEBUF;
3485:fatfs/ff.c    **** 
3486:fatfs/ff.c    **** 
3487:fatfs/ff.c    **** 	res = chk_mounted(&path_old, &djo.fs, 1);
 5877              	 .loc 1 3487 0
 5878 0008 0122     	 movs r2,#1
 5879 000a 0CA9     	 add r1,sp,#48
 5880              	.LVL771:
 5881 000c 01A8     	 add r0,sp,#4
 5882              	.LVL772:
 5883 000e 3A4B     	 ldr r3,.L660
 5884 0010 9847     	 blx r3
 5885              	.LVL773:
3488:fatfs/ff.c    **** 	if (res == FR_OK) {
 5886              	 .loc 1 3488 0
 5887 0012 0028     	 cmp r0,#0
 5888 0014 68D1     	 bne .L656
3489:fatfs/ff.c    **** 		djn.fs = djo.fs;
 5889              	 .loc 1 3489 0
 5890 0016 0C9B     	 ldr r3,[sp,#48]
3490:fatfs/ff.c    **** 		INIT_BUF(djo);
3491:fatfs/ff.c    **** 		res = follow_path(&djo, path_old);		/* Check old object */
 5891              	 .loc 1 3491 0
 5892 0018 0199     	 ldr r1,[sp,#4]
3489:fatfs/ff.c    **** 		djn.fs = djo.fs;
 5893              	 .loc 1 3489 0
 5894 001a 1393     	 str r3,[sp,#76]
 5895              	 .loc 1 3491 0
 5896 001c 0CA8     	 add r0,sp,#48
 5897              	.LVL774:
3490:fatfs/ff.c    **** 		INIT_BUF(djo);
 5898              	 .loc 1 3490 0
 5899 001e 03AB     	 add r3,sp,#12
 5900              	 .loc 1 3491 0
 5901 0020 364D     	 ldr r5,.L660+4
3490:fatfs/ff.c    **** 		INIT_BUF(djo);
 5902              	 .loc 1 3490 0
 5903 0022 1293     	 str r3,[sp,#72]
 5904              	 .loc 1 3491 0
 5905 0024 A847     	 blx r5
 5906              	.LVL775:
3492:fatfs/ff.c    **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
3493:fatfs/ff.c    **** 			res = FR_INVALID_NAME;
3494:fatfs/ff.c    **** #if _FS_LOCK
3495:fatfs/ff.c    **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
3496:fatfs/ff.c    **** #endif
3497:fatfs/ff.c    **** 		if (res == FR_OK) {						/* Old object is found */
 5907              	 .loc 1 3497 0
 5908 0026 0028     	 cmp r0,#0
 5909 0028 5ED1     	 bne .L656
3498:fatfs/ff.c    **** 			if (!djo.dir) {						/* Is root dir? */
 5910              	 .loc 1 3498 0
 5911 002a 1199     	 ldr r1,[sp,#68]
 5912 002c 0029     	 cmp r1,#0
 5913 002e 5DD0     	 beq .L652
3499:fatfs/ff.c    **** 				res = FR_NO_FILE;
3500:fatfs/ff.c    **** 			} else {
3501:fatfs/ff.c    **** 				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
 5914              	 .loc 1 3501 0
 5915 0030 1522     	 movs r2,#21
 5916 0032 0B31     	 adds r1,r1,#11
 5917 0034 06A8     	 add r0,sp,#24
 5918              	.LVL776:
 5919 0036 324C     	 ldr r4,.L660+8
 5920 0038 A047     	 blx r4
 5921              	.LVL777:
3502:fatfs/ff.c    **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
 5922              	 .loc 1 3502 0
 5923 003a 0CA9     	 add r1,sp,#48
 5924 003c 13A8     	 add r0,sp,#76
 5925 003e 1C22     	 movs r2,#28
 5926 0040 A047     	 blx r4
 5927              	.LVL778:
3503:fatfs/ff.c    **** 				res = follow_path(&djn, path_new);
 5928              	 .loc 1 3503 0
 5929 0042 3146     	 mov r1,r6
 5930 0044 13A8     	 add r0,sp,#76
 5931 0046 A847     	 blx r5
 5932              	.LVL779:
3504:fatfs/ff.c    **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 5933              	 .loc 1 3504 0
 5934 0048 0028     	 cmp r0,#0
 5935 004a 51D0     	 beq .L653
3505:fatfs/ff.c    **** 				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
 5936              	 .loc 1 3505 0
 5937 004c 0428     	 cmp r0,#4
 5938 004e 4BD1     	 bne .L656
3506:fatfs/ff.c    **** /* Start critical section that an interruption or error can cause cross-link */
3507:fatfs/ff.c    **** 					res = dir_register(&djn);			/* Register the new entry */
 5939              	 .loc 1 3507 0
 5940 0050 13A8     	 add r0,sp,#76
 5941              	.LVL780:
 5942 0052 2C4B     	 ldr r3,.L660+12
 5943 0054 9847     	 blx r3
 5944              	.LVL781:
3508:fatfs/ff.c    **** 					if (res == FR_OK) {
 5945              	 .loc 1 3508 0
 5946 0056 0028     	 cmp r0,#0
 5947 0058 46D1     	 bne .L656
3509:fatfs/ff.c    **** 						dir = djn.dir;					/* Copy object information except for name */
 5948              	 .loc 1 3509 0
 5949 005a 189D     	 ldr r5,[sp,#96]
 5950              	.LVL782:
3510:fatfs/ff.c    **** 						mem_cpy(dir+13, buf+2, 19);
 5951              	 .loc 1 3510 0
 5952 005c 1322     	 movs r2,#19
 5953 005e 0DF11A01 	 add r1,sp,#26
 5954 0062 05F10D00 	 add r0,r5,#13
 5955              	.LVL783:
 5956 0066 A047     	 blx r4
 5957              	.LVL784:
3511:fatfs/ff.c    **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 5958              	 .loc 1 3511 0
 5959 0068 9DF81830 	 ldrb r3,[sp,#24]
 5960 006c 43F02003 	 orr r3,r3,#32
 5961 0070 EB72     	 strb r3,[r5,#11]
3512:fatfs/ff.c    **** 						djo.fs->wflag = 1;
 5962              	 .loc 1 3512 0
 5963 0072 0123     	 movs r3,#1
 5964 0074 0C9C     	 ldr r4,[sp,#48]
 5965 0076 2371     	 strb r3,[r4,#4]
3513:fatfs/ff.c    **** 						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the direct
 5966              	 .loc 1 3513 0
 5967 0078 159B     	 ldr r3,[sp,#84]
 5968 007a 0E9A     	 ldr r2,[sp,#56]
 5969 007c 9A42     	 cmp r2,r3
 5970 007e 2CD0     	 beq .L650
 5971              	 .loc 1 3513 0 is_stmt 0 discriminator 1
 5972 0080 EB7A     	 ldrb r3,[r5,#11]
 5973 0082 DB06     	 lsls r3,r3,#27
 5974 0084 29D5     	 bpl .L650
3514:fatfs/ff.c    **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
 5975              	 .loc 1 3514 0 is_stmt 1
 5976 0086 2946     	 mov r1,r5
 5977 0088 1F4B     	 ldr r3,.L660+16
 5978 008a 2078     	 ldrb r0,[r4]
 5979 008c 9847     	 blx r3
 5980              	.LVL785:
 5981 008e 1F4B     	 ldr r3,.L660+20
 5982 0090 0146     	 mov r1,r0
 5983 0092 2046     	 mov r0,r4
 5984 0094 9847     	 blx r3
 5985              	.LVL786:
3515:fatfs/ff.c    **** 							if (!dw) {
 5986              	 .loc 1 3515 0
 5987 0096 0146     	 mov r1,r0
 5988 0098 60B3     	 cbz r0,.L654
3516:fatfs/ff.c    **** 								res = FR_INT_ERR;
3517:fatfs/ff.c    **** 							} else {
3518:fatfs/ff.c    **** 								res = move_window(djo.fs, dw);
 5989              	 .loc 1 3518 0
 5990 009a 2046     	 mov r0,r4
 5991              	.LVL787:
 5992 009c 1C4B     	 ldr r3,.L660+24
 5993 009e 9847     	 blx r3
 5994              	.LVL788:
3519:fatfs/ff.c    **** 								dir = djo.fs->win+SZ_DIR;	/* .. entry */
3520:fatfs/ff.c    **** 								if (res == FR_OK && dir[1] == '.') {
 5995              	 .loc 1 3520 0
 5996 00a0 10BB     	 cbnz r0,.L656
3519:fatfs/ff.c    **** 								dir = djo.fs->win+SZ_DIR;	/* .. entry */
 5997              	 .loc 1 3519 0 discriminator 1
 5998 00a2 0C9A     	 ldr r2,[sp,#48]
 5999              	 .loc 1 3520 0 discriminator 1
 6000 00a4 92F84F30 	 ldrb r3,[r2,#79]
 6001 00a8 2E2B     	 cmp r3,#46
 6002 00aa 16D1     	 bne .L650
3521:fatfs/ff.c    **** 									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
 6003              	 .loc 1 3521 0
 6004 00ac 1378     	 ldrb r3,[r2]
 6005 00ae 032B     	 cmp r3,#3
 6006 00b0 159B     	 ldr r3,[sp,#84]
 6007 00b2 04D1     	 bne .L649
 6008              	 .loc 1 3521 0 is_stmt 0 discriminator 2
 6009 00b4 D2F82210 	 ldr r1,[r2,#34]
 6010 00b8 8B42     	 cmp r3,r1
 6011 00ba 08BF     	 it eq
 6012 00bc 0023     	 moveq r3,#0
 6013              	.L649:
 6014              	.LVL789:
 6015              	.LBB147:
 6016              	.LBB148:
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 6017              	 .loc 1 1205 0 is_stmt 1 discriminator 6
 6018 00be C3F30721 	 ubfx r1,r3,#8,#8
 6019 00c2 82F86830 	 strb r3,[r2,#104]
1206:fatfs/ff.c    **** }
 6020              	 .loc 1 1206 0 discriminator 6
 6021 00c6 1B0C     	 lsrs r3,r3,#16
 6022              	.LVL790:
 6023 00c8 82F86230 	 strb r3,[r2,#98]
 6024 00cc 1B0A     	 lsrs r3,r3,#8
 6025 00ce 82F86330 	 strb r3,[r2,#99]
 6026              	.LVL791:
 6027              	.LBE148:
 6028              	.LBE147:
3522:fatfs/ff.c    **** 									st_clust(dir, dw);
3523:fatfs/ff.c    **** 									djo.fs->wflag = 1;
 6029              	 .loc 1 3523 0 discriminator 6
 6030 00d2 0123     	 movs r3,#1
 6031              	.LBB150:
 6032              	.LBB149:
1205:fatfs/ff.c    **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 6033              	 .loc 1 1205 0 discriminator 6
 6034 00d4 82F86910 	 strb r1,[r2,#105]
 6035              	.LBE149:
 6036              	.LBE150:
 6037              	 .loc 1 3523 0 discriminator 6
 6038 00d8 1371     	 strb r3,[r2,#4]
 6039              	.LVL792:
 6040              	.L650:
3524:fatfs/ff.c    **** 								}
3525:fatfs/ff.c    **** 							}
3526:fatfs/ff.c    **** 						}
3527:fatfs/ff.c    **** 						if (res == FR_OK) {
3528:fatfs/ff.c    **** 							res = dir_remove(&djo);		/* Remove old entry */
 6041              	 .loc 1 3528 0
 6042 00da 0CA8     	 add r0,sp,#48
 6043 00dc 0D4B     	 ldr r3,.L660+28
 6044 00de 9847     	 blx r3
 6045              	.LVL793:
3529:fatfs/ff.c    **** 							if (res == FR_OK)
 6046              	 .loc 1 3529 0
 6047 00e0 10B9     	 cbnz r0,.L656
3530:fatfs/ff.c    **** 								res = sync(djo.fs);
 6048              	 .loc 1 3530 0
 6049 00e2 0C98     	 ldr r0,[sp,#48]
 6050              	.LVL794:
 6051 00e4 0C4B     	 ldr r3,.L660+32
 6052 00e6 9847     	 blx r3
 6053              	.LVL795:
 6054              	.L656:
3531:fatfs/ff.c    **** 						}
3532:fatfs/ff.c    **** 					}
3533:fatfs/ff.c    **** /* End critical section */
3534:fatfs/ff.c    **** 				}
3535:fatfs/ff.c    **** 			}
3536:fatfs/ff.c    **** 		}
3537:fatfs/ff.c    **** 		FREE_BUF();
3538:fatfs/ff.c    **** 	}
3539:fatfs/ff.c    **** 	LEAVE_FF(djo.fs, res);
3540:fatfs/ff.c    **** }
 6055              	 .loc 1 3540 0
 6056 00e8 1AB0     	 add sp,sp,#104
 6057              	 .cfi_remember_state
 6058              	 .cfi_def_cfa_offset 16
 6059              	 
 6060 00ea 70BD     	 pop {r4,r5,r6,pc}
 6061              	.LVL796:
 6062              	.L652:
 6063              	 .cfi_restore_state
3499:fatfs/ff.c    **** 			} else {
 6064              	 .loc 1 3499 0
 6065 00ec 0420     	 movs r0,#4
 6066              	.LVL797:
 6067 00ee FBE7     	 b .L656
 6068              	.LVL798:
 6069              	.L653:
3504:fatfs/ff.c    **** 				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
 6070              	 .loc 1 3504 0
 6071 00f0 0820     	 movs r0,#8
 6072              	.LVL799:
 6073 00f2 F9E7     	 b .L656
 6074              	.LVL800:
 6075              	.L654:
3516:fatfs/ff.c    **** 							} else {
 6076              	 .loc 1 3516 0
 6077 00f4 0220     	 movs r0,#2
 6078              	.LVL801:
 6079 00f6 F7E7     	 b .L656
 6080              	.L661:
 6081              	 .align 2
 6082              	.L660:
 6083 00f8 00000000 	 .word chk_mounted
 6084 00fc 00000000 	 .word follow_path
 6085 0100 00000000 	 .word mem_cpy
 6086 0104 00000000 	 .word dir_register
 6087 0108 00000000 	 .word ld_clust.isra.0
 6088 010c 00000000 	 .word clust2sect
 6089 0110 00000000 	 .word move_window
 6090 0114 00000000 	 .word dir_remove
 6091 0118 00000000 	 .word sync
 6092              	 .cfi_endproc
 6093              	.LFE41:
 6095              	 .section .bss.FatFs,"aw",%nobits
 6096              	 .align 2
 6097              	 .set .LANCHOR0,.+0
 6100              	FatFs:
 6101 0000 00000000 	 .space 4
 6102              	 .section .bss.Fsid,"aw",%nobits
 6103              	 .align 1
 6104              	 .set .LANCHOR1,.+0
 6107              	Fsid:
 6108 0000 0000     	 .space 2
 6109              	 .section .rodata.excvt.4468,"a",%progbits
 6110              	 .set .LANCHOR2,.+0
 6113              	excvt.4468:
 6114 0000 80       	 .byte -128
 6115 0001 9A       	 .byte -102
 6116 0002 90       	 .byte -112
 6117 0003 41       	 .byte 65
 6118 0004 8E       	 .byte -114
 6119 0005 41       	 .byte 65
 6120 0006 8F       	 .byte -113
 6121 0007 80       	 .byte -128
 6122 0008 45       	 .byte 69
 6123 0009 45       	 .byte 69
 6124 000a 45       	 .byte 69
 6125 000b 49       	 .byte 73
 6126 000c 49       	 .byte 73
 6127 000d 49       	 .byte 73
 6128 000e 8E       	 .byte -114
 6129 000f 8F       	 .byte -113
 6130 0010 90       	 .byte -112
 6131 0011 92       	 .byte -110
 6132 0012 92       	 .byte -110
 6133 0013 4F       	 .byte 79
 6134 0014 99       	 .byte -103
 6135 0015 4F       	 .byte 79
 6136 0016 55       	 .byte 85
 6137 0017 55       	 .byte 85
 6138 0018 59       	 .byte 89
 6139 0019 99       	 .byte -103
 6140 001a 9A       	 .byte -102
 6141 001b 9B       	 .byte -101
 6142 001c 9C       	 .byte -100
 6143 001d 9D       	 .byte -99
 6144 001e 9E       	 .byte -98
 6145 001f 9F       	 .byte -97
 6146 0020 41       	 .byte 65
 6147 0021 49       	 .byte 73
 6148 0022 4F       	 .byte 79
 6149 0023 55       	 .byte 85
 6150 0024 A5       	 .byte -91
 6151 0025 A5       	 .byte -91
 6152 0026 A6       	 .byte -90
 6153 0027 A7       	 .byte -89
 6154 0028 A8       	 .byte -88
 6155 0029 A9       	 .byte -87
 6156 002a AA       	 .byte -86
 6157 002b AB       	 .byte -85
 6158 002c AC       	 .byte -84
 6159 002d 21       	 .byte 33
 6160 002e AE       	 .byte -82
 6161 002f AF       	 .byte -81
 6162 0030 B0       	 .byte -80
 6163 0031 B1       	 .byte -79
 6164 0032 B2       	 .byte -78
 6165 0033 B3       	 .byte -77
 6166 0034 B4       	 .byte -76
 6167 0035 B5       	 .byte -75
 6168 0036 B6       	 .byte -74
 6169 0037 B7       	 .byte -73
 6170 0038 B8       	 .byte -72
 6171 0039 B9       	 .byte -71
 6172 003a BA       	 .byte -70
 6173 003b BB       	 .byte -69
 6174 003c BC       	 .byte -68
 6175 003d BD       	 .byte -67
 6176 003e BE       	 .byte -66
 6177 003f BF       	 .byte -65
 6178 0040 C0       	 .byte -64
 6179 0041 C1       	 .byte -63
 6180 0042 C2       	 .byte -62
 6181 0043 C3       	 .byte -61
 6182 0044 C4       	 .byte -60
 6183 0045 C5       	 .byte -59
 6184 0046 C6       	 .byte -58
 6185 0047 C7       	 .byte -57
 6186 0048 C8       	 .byte -56
 6187 0049 C9       	 .byte -55
 6188 004a CA       	 .byte -54
 6189 004b CB       	 .byte -53
 6190 004c CC       	 .byte -52
 6191 004d CD       	 .byte -51
 6192 004e CE       	 .byte -50
 6193 004f CF       	 .byte -49
 6194 0050 D0       	 .byte -48
 6195 0051 D1       	 .byte -47
 6196 0052 D2       	 .byte -46
 6197 0053 D3       	 .byte -45
 6198 0054 D4       	 .byte -44
 6199 0055 D5       	 .byte -43
 6200 0056 D6       	 .byte -42
 6201 0057 D7       	 .byte -41
 6202 0058 D8       	 .byte -40
 6203 0059 D9       	 .byte -39
 6204 005a DA       	 .byte -38
 6205 005b DB       	 .byte -37
 6206 005c DC       	 .byte -36
 6207 005d DD       	 .byte -35
 6208 005e DE       	 .byte -34
 6209 005f DF       	 .byte -33
 6210 0060 E0       	 .byte -32
 6211 0061 E1       	 .byte -31
 6212 0062 E2       	 .byte -30
 6213 0063 E3       	 .byte -29
 6214 0064 E4       	 .byte -28
 6215 0065 E5       	 .byte -27
 6216 0066 E6       	 .byte -26
 6217 0067 E7       	 .byte -25
 6218 0068 E8       	 .byte -24
 6219 0069 E9       	 .byte -23
 6220 006a EA       	 .byte -22
 6221 006b EB       	 .byte -21
 6222 006c EC       	 .byte -20
 6223 006d ED       	 .byte -19
 6224 006e EE       	 .byte -18
 6225 006f EF       	 .byte -17
 6226 0070 F0       	 .byte -16
 6227 0071 F1       	 .byte -15
 6228 0072 F2       	 .byte -14
 6229 0073 F3       	 .byte -13
 6230 0074 F4       	 .byte -12
 6231 0075 F5       	 .byte -11
 6232 0076 F6       	 .byte -10
 6233 0077 F7       	 .byte -9
 6234 0078 F8       	 .byte -8
 6235 0079 F9       	 .byte -7
 6236 007a FA       	 .byte -6
 6237 007b FB       	 .byte -5
 6238 007c FC       	 .byte -4
 6239 007d FD       	 .byte -3
 6240 007e FE       	 .byte -2
 6241 007f FF       	 .byte -1
 6242              	 .section .rodata.follow_path.str1.1,"aMS",%progbits,1
 6243              	.LC0:
 6244 0000 222A2B2C 	 .ascii "\"*+,:;<=>?[]|\177\000"
 6244      3A3B3C3D 
 6244      3E3F5B5D 
 6244      7C7F00
 6245              	 .text
 6246              	.Letext0:
 6247              	 .file 2 "fatfs/integer.h"
 6248              	 .file 3 "fatfs/ff.h"
 6249              	 .file 4 "fatfs/diskio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ff.c
    {standard input}:16     .text.mem_cpy:0000000000000000 $t
    {standard input}:22     .text.mem_cpy:0000000000000000 mem_cpy
    {standard input}:52     .text.get_fileinfo:0000000000000000 $t
    {standard input}:58     .text.get_fileinfo:0000000000000000 get_fileinfo
    {standard input}:158    .text.move_window:0000000000000000 $t
    {standard input}:164    .text.move_window:0000000000000000 move_window
    {standard input}:284    .text.move_window:000000000000007c $d
    {standard input}:291    .text.validate:0000000000000000 $t
    {standard input}:297    .text.validate:0000000000000000 validate
    {standard input}:341    .text.validate:0000000000000028 $d
    {standard input}:346    .text.ld_clust.isra.0:0000000000000000 $t
    {standard input}:352    .text.ld_clust.isra.0:0000000000000000 ld_clust.isra.0
    {standard input}:382    .text.check_fs:0000000000000000 $t
    {standard input}:388    .text.check_fs:0000000000000000 check_fs
    {standard input}:456    .text.check_fs:000000000000004c $d
    {standard input}:462    .text.chk_mounted:0000000000000000 $t
    {standard input}:468    .text.chk_mounted:0000000000000000 chk_mounted
    {standard input}:913    .text.chk_mounted:000000000000024c $d
    {standard input}:924    .text.sync:0000000000000000 $t
    {standard input}:930    .text.sync:0000000000000000 sync
    {standard input}:1071   .text.sync:00000000000000d0 $d
    {standard input}:1080   .text.clust2sect:0000000000000000 $t
    {standard input}:1087   .text.clust2sect:0000000000000000 clust2sect
    {standard input}:1117   .text.get_fat:0000000000000000 $t
    {standard input}:1124   .text.get_fat:0000000000000000 get_fat
    {standard input}:1287   .text.get_fat:00000000000000e0 $d
    {standard input}:1292   .text.dir_sdi:0000000000000000 $t
    {standard input}:1298   .text.dir_sdi:0000000000000000 dir_sdi
    {standard input}:1435   .text.dir_sdi:0000000000000090 $d
    {standard input}:1441   .text.dir_remove:0000000000000000 $t
    {standard input}:1447   .text.dir_remove:0000000000000000 dir_remove
    {standard input}:1498   .text.dir_remove:0000000000000024 $d
    {standard input}:1504   .text.put_fat:0000000000000000 $t
    {standard input}:1511   .text.put_fat:0000000000000000 put_fat
    {standard input}:1702   .text.put_fat:0000000000000108 $d
    {standard input}:1707   .text.create_chain:0000000000000000 $t
    {standard input}:1713   .text.create_chain:0000000000000000 create_chain
    {standard input}:1881   .text.create_chain:00000000000000ac $d
    {standard input}:1887   .text.dir_next:0000000000000000 $t
    {standard input}:1893   .text.dir_next:0000000000000000 dir_next
    {standard input}:2127   .text.dir_next:000000000000010c $d
    {standard input}:2135   .text.follow_path:0000000000000000 $t
    {standard input}:2141   .text.follow_path:0000000000000000 follow_path
    {standard input}:2528   .text.follow_path:00000000000001a4 $d
    {standard input}:2538   .text.dir_register:0000000000000000 $t
    {standard input}:2544   .text.dir_register:0000000000000000 dir_register
    {standard input}:2664   .text.dir_register:0000000000000070 $d
    {standard input}:2674   .text.dir_read:0000000000000000 $t
    {standard input}:2680   .text.dir_read:0000000000000000 dir_read
    {standard input}:2774   .text.dir_read:000000000000004c $d
    {standard input}:2780   .text.remove_chain:0000000000000000 $t
    {standard input}:2786   .text.remove_chain:0000000000000000 remove_chain
    {standard input}:2899   .text.remove_chain:0000000000000068 $d
    {standard input}:2905   .text.f_mount:0000000000000000 $t
    {standard input}:2912   .text.f_mount:0000000000000000 f_mount
    {standard input}:2955   .text.f_mount:000000000000001c $d
    {standard input}:2960   .text.f_open:0000000000000000 $t
    {standard input}:2967   .text.f_open:0000000000000000 f_open
    {standard input}:3248   .text.f_open:0000000000000134 $d
    {standard input}:3260   .text.f_read:0000000000000000 $t
    {standard input}:3267   .text.f_read:0000000000000000 f_read
    {standard input}:3514   .text.f_read:0000000000000134 $d
    {standard input}:3524   .text.f_write:0000000000000000 $t
    {standard input}:3531   .text.f_write:0000000000000000 f_write
    {standard input}:3846   .text.f_write:0000000000000190 $d
    {standard input}:3856   .text.f_sync:0000000000000000 $t
    {standard input}:3863   .text.f_sync:0000000000000000 f_sync
    {standard input}:3995   .text.f_sync:0000000000000084 $d
    {standard input}:4003   .text.f_close:0000000000000000 $t
    {standard input}:4010   .text.f_close:0000000000000000 f_close
    {standard input}:4042   .text.f_close:0000000000000014 $d
    {standard input}:4047   .text.f_lseek:0000000000000000 $t
    {standard input}:4054   .text.f_lseek:0000000000000000 f_lseek
    {standard input}:4312   .text.f_lseek:0000000000000114 $d
    {standard input}:4321   .text.f_opendir:0000000000000000 $t
    {standard input}:4328   .text.f_opendir:0000000000000000 f_opendir
    {standard input}:4444   .text.f_opendir:0000000000000068 $d
    {standard input}:4452   .text.f_readdir:0000000000000000 $t
    {standard input}:4459   .text.f_readdir:0000000000000000 f_readdir
    {standard input}:4556   .text.f_readdir:000000000000005c $d
    {standard input}:4565   .text.f_stat:0000000000000000 $t
    {standard input}:4572   .text.f_stat:0000000000000000 f_stat
    {standard input}:4641   .text.f_stat:000000000000003c $d
    {standard input}:4648   .text.f_getfree:0000000000000000 $t
    {standard input}:4655   .text.f_getfree:0000000000000000 f_getfree
    {standard input}:4854   .text.f_getfree:00000000000000dc $d
    {standard input}:4861   .text.f_truncate:0000000000000000 $t
    {standard input}:4868   .text.f_truncate:0000000000000000 f_truncate
    {standard input}:5005   .text.f_truncate:0000000000000090 $d
    {standard input}:5013   .text.f_unlink:0000000000000000 $t
    {standard input}:5020   .text.f_unlink:0000000000000000 f_unlink
    {standard input}:5193   .text.f_unlink:00000000000000b0 $d
    {standard input}:5206   .text.f_mkdir:0000000000000000 $t
    {standard input}:5213   .text.f_mkdir:0000000000000000 f_mkdir
    {standard input}:5643   .text.f_mkdir:00000000000001f4 $d
    {standard input}:5657   .text.f_chmod:0000000000000000 $t
    {standard input}:5664   .text.f_chmod:0000000000000000 f_chmod
    {standard input}:5748   .text.f_chmod:0000000000000048 $d
    {standard input}:5755   .text.f_utime:0000000000000000 $t
    {standard input}:5762   .text.f_utime:0000000000000000 f_utime
    {standard input}:5845   .text.f_utime:000000000000004c $d
    {standard input}:5852   .text.f_rename:0000000000000000 $t
    {standard input}:5859   .text.f_rename:0000000000000000 f_rename
    {standard input}:6083   .text.f_rename:00000000000000f8 $d
    {standard input}:6096   .bss.FatFs:0000000000000000 $d
    {standard input}:6100   .bss.FatFs:0000000000000000 FatFs
    {standard input}:6103   .bss.Fsid:0000000000000000 $d
    {standard input}:6107   .bss.Fsid:0000000000000000 Fsid
    {standard input}:6113   .rodata.excvt.4468:0000000000000000 excvt.4468
    {standard input}:6243   .rodata.follow_path.str1.1:0000000000000000 .LC0
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
disk_read
disk_write
disk_status
disk_initialize
disk_ioctl
get_fattime
