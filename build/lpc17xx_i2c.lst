   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,4
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "lpc17xx_i2c.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.I2C_getNum,"ax",%progbits
  16              	 .align 1
  17              	 .syntax unified
  18              	 .thumb
  19              	 .thumb_func
  20              	 .fpu softvfp
  22              	I2C_getNum:
  23              	.LFB55:
  24              	 .file 1 "LPC17xxLib/src/lpc17xx_i2c.c"
   1:LPC17xxLib/src/lpc17xx_i2c.c **** #ifdef __LPC17XX__
   2:LPC17xxLib/src/lpc17xx_i2c.c **** 
   3:LPC17xxLib/src/lpc17xx_i2c.c **** /**********************************************************************
   4:LPC17xxLib/src/lpc17xx_i2c.c **** * $Id$		lpc17xx_gpio.c				2011-03-31
   5:LPC17xxLib/src/lpc17xx_i2c.c **** *//**
   6:LPC17xxLib/src/lpc17xx_i2c.c **** * @file		lpc17xx_gpio.c
   7:LPC17xxLib/src/lpc17xx_i2c.c **** * @brief	Contains all functions support for I2C firmware
   8:LPC17xxLib/src/lpc17xx_i2c.c **** * 			library on LPC17xx
   9:LPC17xxLib/src/lpc17xx_i2c.c **** * @version	2.1
  10:LPC17xxLib/src/lpc17xx_i2c.c **** * @date		31. Mar. 2011
  11:LPC17xxLib/src/lpc17xx_i2c.c **** * @author	NXP MCU SW Application Team
  12:LPC17xxLib/src/lpc17xx_i2c.c **** *
  13:LPC17xxLib/src/lpc17xx_i2c.c **** * Copyright(C) 2010, NXP Semiconductor
  14:LPC17xxLib/src/lpc17xx_i2c.c **** * All rights reserved.
  15:LPC17xxLib/src/lpc17xx_i2c.c **** *
  16:LPC17xxLib/src/lpc17xx_i2c.c **** ***********************************************************************
  17:LPC17xxLib/src/lpc17xx_i2c.c **** * Software that is described herein is for illustrative purposes only
  18:LPC17xxLib/src/lpc17xx_i2c.c **** * which provides customers with programming information regarding the
  19:LPC17xxLib/src/lpc17xx_i2c.c **** * products. This software is supplied "AS IS" without any warranties.
  20:LPC17xxLib/src/lpc17xx_i2c.c **** * NXP Semiconductors assumes no responsibility or liability for the
  21:LPC17xxLib/src/lpc17xx_i2c.c **** * use of the software, conveys no license or title under any patent,
  22:LPC17xxLib/src/lpc17xx_i2c.c **** * copyright, or mask work right to the product. NXP Semiconductors
  23:LPC17xxLib/src/lpc17xx_i2c.c **** * reserves the right to make changes in the software without
  24:LPC17xxLib/src/lpc17xx_i2c.c **** * notification. NXP Semiconductors also make no representation or
  25:LPC17xxLib/src/lpc17xx_i2c.c **** * warranty that such application will be suitable for the specified
  26:LPC17xxLib/src/lpc17xx_i2c.c **** * use without further testing or modification.
  27:LPC17xxLib/src/lpc17xx_i2c.c **** **********************************************************************/
  28:LPC17xxLib/src/lpc17xx_i2c.c **** 
  29:LPC17xxLib/src/lpc17xx_i2c.c **** /* Peripheral group ----------------------------------------------------------- */
  30:LPC17xxLib/src/lpc17xx_i2c.c **** /** @addtogroup I2C
  31:LPC17xxLib/src/lpc17xx_i2c.c ****  * @{
  32:LPC17xxLib/src/lpc17xx_i2c.c ****  */
  33:LPC17xxLib/src/lpc17xx_i2c.c **** 
  34:LPC17xxLib/src/lpc17xx_i2c.c **** /* Includes ------------------------------------------------------------------- */
  35:LPC17xxLib/src/lpc17xx_i2c.c **** #include "lpc17xx_i2c.h"
  36:LPC17xxLib/src/lpc17xx_i2c.c **** #include "lpc17xx_clkpwr.h"
  37:LPC17xxLib/src/lpc17xx_i2c.c **** #include "lpc17xx_pinsel.h"
  38:LPC17xxLib/src/lpc17xx_i2c.c **** 
  39:LPC17xxLib/src/lpc17xx_i2c.c **** 
  40:LPC17xxLib/src/lpc17xx_i2c.c **** /* If this source file built with example, the LPC17xx FW library configuration
  41:LPC17xxLib/src/lpc17xx_i2c.c ****  * file in each example directory ("lpc17xx_libcfg.h") must be included,
  42:LPC17xxLib/src/lpc17xx_i2c.c ****  * otherwise the default FW library configuration file must be included instead
  43:LPC17xxLib/src/lpc17xx_i2c.c ****  */
  44:LPC17xxLib/src/lpc17xx_i2c.c **** #ifdef __BUILD_WITH_EXAMPLE__
  45:LPC17xxLib/src/lpc17xx_i2c.c **** #include "lpc17xx_libcfg.h"
  46:LPC17xxLib/src/lpc17xx_i2c.c **** #else
  47:LPC17xxLib/src/lpc17xx_i2c.c **** #include "lpc17xx_libcfg_default.h"
  48:LPC17xxLib/src/lpc17xx_i2c.c **** #endif /* __BUILD_WITH_EXAMPLE__ */
  49:LPC17xxLib/src/lpc17xx_i2c.c **** 
  50:LPC17xxLib/src/lpc17xx_i2c.c **** 
  51:LPC17xxLib/src/lpc17xx_i2c.c **** #ifdef _I2C
  52:LPC17xxLib/src/lpc17xx_i2c.c **** 
  53:LPC17xxLib/src/lpc17xx_i2c.c **** 
  54:LPC17xxLib/src/lpc17xx_i2c.c **** /* Private Types -------------------------------------------------------------- */
  55:LPC17xxLib/src/lpc17xx_i2c.c **** /** @defgroup I2C_Private_Types I2C Private Types
  56:LPC17xxLib/src/lpc17xx_i2c.c ****  * @{
  57:LPC17xxLib/src/lpc17xx_i2c.c ****  */
  58:LPC17xxLib/src/lpc17xx_i2c.c **** 
  59:LPC17xxLib/src/lpc17xx_i2c.c **** /**
  60:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief I2C device configuration structure type
  61:LPC17xxLib/src/lpc17xx_i2c.c ****  */
  62:LPC17xxLib/src/lpc17xx_i2c.c **** typedef struct
  63:LPC17xxLib/src/lpc17xx_i2c.c **** {
  64:LPC17xxLib/src/lpc17xx_i2c.c ****   uint32_t      txrx_setup; 						/* Transmission setup */
  65:LPC17xxLib/src/lpc17xx_i2c.c ****   int32_t		dir;								/* Current direction phase, 0 - write, 1 - read */
  66:LPC17xxLib/src/lpc17xx_i2c.c **** } I2C_CFG_T;
  67:LPC17xxLib/src/lpc17xx_i2c.c **** 
  68:LPC17xxLib/src/lpc17xx_i2c.c **** /**
  69:LPC17xxLib/src/lpc17xx_i2c.c ****  * @}
  70:LPC17xxLib/src/lpc17xx_i2c.c ****  */
  71:LPC17xxLib/src/lpc17xx_i2c.c **** 
  72:LPC17xxLib/src/lpc17xx_i2c.c **** /* Private Variables ---------------------------------------------------------- */
  73:LPC17xxLib/src/lpc17xx_i2c.c **** /**
  74:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief II2C driver data for I2C0, I2C1 and I2C2
  75:LPC17xxLib/src/lpc17xx_i2c.c ****  */
  76:LPC17xxLib/src/lpc17xx_i2c.c **** static I2C_CFG_T i2cdat[3];
  77:LPC17xxLib/src/lpc17xx_i2c.c **** 
  78:LPC17xxLib/src/lpc17xx_i2c.c **** static uint32_t I2C_MasterComplete[3];
  79:LPC17xxLib/src/lpc17xx_i2c.c **** static uint32_t I2C_SlaveComplete[3];
  80:LPC17xxLib/src/lpc17xx_i2c.c **** 
  81:LPC17xxLib/src/lpc17xx_i2c.c **** static uint32_t I2C_MonitorBufferIndex;
  82:LPC17xxLib/src/lpc17xx_i2c.c **** 
  83:LPC17xxLib/src/lpc17xx_i2c.c **** /* Private Functions ---------------------------------------------------------- */
  84:LPC17xxLib/src/lpc17xx_i2c.c **** 
  85:LPC17xxLib/src/lpc17xx_i2c.c **** /* Get I2C number */
  86:LPC17xxLib/src/lpc17xx_i2c.c **** static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx);
  87:LPC17xxLib/src/lpc17xx_i2c.c **** 
  88:LPC17xxLib/src/lpc17xx_i2c.c **** /* Generate a start condition on I2C bus (in master mode only) */
  89:LPC17xxLib/src/lpc17xx_i2c.c **** static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx);
  90:LPC17xxLib/src/lpc17xx_i2c.c **** 
  91:LPC17xxLib/src/lpc17xx_i2c.c **** /* Generate a stop condition on I2C bus (in master mode only) */
  92:LPC17xxLib/src/lpc17xx_i2c.c **** static void I2C_Stop (LPC_I2C_TypeDef *I2Cx);
  93:LPC17xxLib/src/lpc17xx_i2c.c **** 
  94:LPC17xxLib/src/lpc17xx_i2c.c **** /* I2C send byte subroutine */
  95:LPC17xxLib/src/lpc17xx_i2c.c **** static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte);
  96:LPC17xxLib/src/lpc17xx_i2c.c **** 
  97:LPC17xxLib/src/lpc17xx_i2c.c **** /* I2C get byte subroutine */
  98:LPC17xxLib/src/lpc17xx_i2c.c **** static uint32_t I2C_GetByte (LPC_I2C_TypeDef *I2Cx, uint8_t *retdat, Bool ack);
  99:LPC17xxLib/src/lpc17xx_i2c.c **** 
 100:LPC17xxLib/src/lpc17xx_i2c.c **** /* I2C set clock (hz) */
 101:LPC17xxLib/src/lpc17xx_i2c.c **** static void I2C_SetClock (LPC_I2C_TypeDef *I2Cx, uint32_t target_clock);
 102:LPC17xxLib/src/lpc17xx_i2c.c **** 
 103:LPC17xxLib/src/lpc17xx_i2c.c **** /*--------------------------------------------------------------------------------*/
 104:LPC17xxLib/src/lpc17xx_i2c.c **** /********************************************************************//**
 105:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Convert from I2C peripheral to number
 106:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 107:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 108:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 109:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 110:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		I2C number, could be: 0..2
 111:LPC17xxLib/src/lpc17xx_i2c.c ****  *********************************************************************/
 112:LPC17xxLib/src/lpc17xx_i2c.c **** static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx){
  25              	 .loc 1 112 0
  26              	 .cfi_startproc
  27              	 
  28              	 
  29              	 
  30              	.LVL0:
 113:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (I2Cx == LPC_I2C0) {
  31              	 .loc 1 113 0
  32 0000 094B     	 ldr r3,.L6
  33 0002 9842     	 cmp r0,r3
  34 0004 0BD0     	 beq .L3
 114:LPC17xxLib/src/lpc17xx_i2c.c **** 		return (0);
 115:LPC17xxLib/src/lpc17xx_i2c.c **** 	} else if (I2Cx == LPC_I2C1) {
  35              	 .loc 1 115 0
  36 0006 03F58023 	 add r3,r3,#262144
  37 000a 9842     	 cmp r0,r3
  38 000c 09D0     	 beq .L4
 116:LPC17xxLib/src/lpc17xx_i2c.c **** 		return (1);
 117:LPC17xxLib/src/lpc17xx_i2c.c **** 	} else if (I2Cx == LPC_I2C2) {
 118:LPC17xxLib/src/lpc17xx_i2c.c **** 		return (2);
 119:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 120:LPC17xxLib/src/lpc17xx_i2c.c **** 	return (-1);
  39              	 .loc 1 120 0
  40 000e 03F58823 	 add r3,r3,#278528
  41 0012 9842     	 cmp r0,r3
  42 0014 0CBF     	 ite eq
  43 0016 0220     	 moveq r0,#2
  44 0018 4FF0FF30 	 movne r0,#-1
  45              	.LVL1:
  46 001c 7047     	 bx lr
  47              	.LVL2:
  48              	.L3:
 114:LPC17xxLib/src/lpc17xx_i2c.c **** 		return (0);
  49              	 .loc 1 114 0
  50 001e 0020     	 movs r0,#0
  51              	.LVL3:
  52 0020 7047     	 bx lr
  53              	.LVL4:
  54              	.L4:
 116:LPC17xxLib/src/lpc17xx_i2c.c **** 		return (1);
  55              	 .loc 1 116 0
  56 0022 0120     	 movs r0,#1
  57              	.LVL5:
 121:LPC17xxLib/src/lpc17xx_i2c.c **** }
  58              	 .loc 1 121 0
  59 0024 7047     	 bx lr
  60              	.L7:
  61 0026 00BF     	 .align 2
  62              	.L6:
  63 0028 00C00140 	 .word 1073856512
  64              	 .cfi_endproc
  65              	.LFE55:
  67              	 .section .text.I2C_SendByte,"ax",%progbits
  68              	 .align 1
  69              	 .syntax unified
  70              	 .thumb
  71              	 .thumb_func
  72              	 .fpu softvfp
  74              	I2C_SendByte:
  75              	.LFB58:
 122:LPC17xxLib/src/lpc17xx_i2c.c **** 
 123:LPC17xxLib/src/lpc17xx_i2c.c **** /********************************************************************//**
 124:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Generate a start condition on I2C bus (in master mode only)
 125:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 126:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 127:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 128:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 129:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		value of I2C status register after generate a start condition
 130:LPC17xxLib/src/lpc17xx_i2c.c ****  *********************************************************************/
 131:LPC17xxLib/src/lpc17xx_i2c.c **** static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
 132:LPC17xxLib/src/lpc17xx_i2c.c **** {
 133:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STA;
 134:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 135:LPC17xxLib/src/lpc17xx_i2c.c **** 
 136:LPC17xxLib/src/lpc17xx_i2c.c **** 	// Wait for complete
 137:LPC17xxLib/src/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 138:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 139:LPC17xxLib/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 140:LPC17xxLib/src/lpc17xx_i2c.c **** }
 141:LPC17xxLib/src/lpc17xx_i2c.c **** 
 142:LPC17xxLib/src/lpc17xx_i2c.c **** /********************************************************************//**
 143:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Generate a stop condition on I2C bus (in master mode only)
 144:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 145:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 146:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 147:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 148:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		None
 149:LPC17xxLib/src/lpc17xx_i2c.c ****  *********************************************************************/
 150:LPC17xxLib/src/lpc17xx_i2c.c **** static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
 151:LPC17xxLib/src/lpc17xx_i2c.c **** {
 152:LPC17xxLib/src/lpc17xx_i2c.c **** 
 153:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Make sure start bit is not active */
 154:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
 155:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 156:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 157:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 158:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STO;
 159:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 160:LPC17xxLib/src/lpc17xx_i2c.c **** }
 161:LPC17xxLib/src/lpc17xx_i2c.c **** 
 162:LPC17xxLib/src/lpc17xx_i2c.c **** /********************************************************************//**
 163:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Send a byte
 164:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 165:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 166:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 167:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 168:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	databyte: number of byte
 169:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		value of I2C status register after sending
 170:LPC17xxLib/src/lpc17xx_i2c.c ****  *********************************************************************/
 171:LPC17xxLib/src/lpc17xx_i2c.c **** static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte)
 172:LPC17xxLib/src/lpc17xx_i2c.c **** {
  76              	 .loc 1 172 0
  77              	 .cfi_startproc
  78              	 
  79              	 
  80              	 
  81              	.LVL6:
 173:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Make sure start bit is not active */
 174:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
  82              	 .loc 1 174 0
  83 0000 0368     	 ldr r3,[r0]
  84 0002 9A06     	 lsls r2,r3,#26
  85 0004 09D5     	 bpl .L9
 175:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 176:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
  86              	 .loc 1 176 0
  87 0006 2022     	 movs r2,#32
  88 0008 037E     	 ldrb r3,[r0,#24]
  89 000a 0023     	 movs r3,#0
  90 000c 0276     	 strb r2,[r0,#24]
  91 000e 427E     	 ldrb r2,[r0,#25]
  92 0010 4376     	 strb r3,[r0,#25]
  93 0012 827E     	 ldrb r2,[r0,#26]
  94 0014 8376     	 strb r3,[r0,#26]
  95 0016 C27E     	 ldrb r2,[r0,#27]
  96 0018 C376     	 strb r3,[r0,#27]
  97              	.L9:
 177:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 178:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2DAT = databyte & I2C_I2DAT_BITMASK;
  98              	 .loc 1 178 0
  99 001a 8160     	 str r1,[r0,#8]
 179:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 100              	 .loc 1 179 0
 101 001c 0822     	 movs r2,#8
 102 001e 037E     	 ldrb r3,[r0,#24]
 103 0020 0023     	 movs r3,#0
 104 0022 0276     	 strb r2,[r0,#24]
 105 0024 427E     	 ldrb r2,[r0,#25]
 106 0026 4376     	 strb r3,[r0,#25]
 107 0028 827E     	 ldrb r2,[r0,#26]
 108 002a 8376     	 strb r3,[r0,#26]
 109 002c C27E     	 ldrb r2,[r0,#27]
 110 002e C376     	 strb r3,[r0,#27]
 111              	.L10:
 180:LPC17xxLib/src/lpc17xx_i2c.c **** 
 181:LPC17xxLib/src/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 112              	 .loc 1 181 0 discriminator 1
 113 0030 0368     	 ldr r3,[r0]
 114 0032 1B07     	 lsls r3,r3,#28
 115 0034 FCD5     	 bpl .L10
 182:LPC17xxLib/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 116              	 .loc 1 182 0
 117 0036 4068     	 ldr r0,[r0,#4]
 118              	.LVL7:
 183:LPC17xxLib/src/lpc17xx_i2c.c **** }
 119              	 .loc 1 183 0
 120 0038 00F0F800 	 and r0,r0,#248
 121 003c 7047     	 bx lr
 122              	 .cfi_endproc
 123              	.LFE58:
 125              	 .section .text.I2C_Init,"ax",%progbits
 126              	 .align 1
 127              	 .global I2C_Init
 128              	 .syntax unified
 129              	 .thumb
 130              	 .thumb_func
 131              	 .fpu softvfp
 133              	I2C_Init:
 134              	.LFB61:
 184:LPC17xxLib/src/lpc17xx_i2c.c **** 
 185:LPC17xxLib/src/lpc17xx_i2c.c **** /********************************************************************//**
 186:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Get a byte
 187:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 188:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 189:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 190:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 191:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[out]	retdat	pointer to return data
 192:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	ack		assert acknowledge or not, should be: TRUE/FALSE
 193:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		value of I2C status register after sending
 194:LPC17xxLib/src/lpc17xx_i2c.c ****  *********************************************************************/
 195:LPC17xxLib/src/lpc17xx_i2c.c **** static uint32_t I2C_GetByte (LPC_I2C_TypeDef *I2Cx, uint8_t *retdat, Bool ack)
 196:LPC17xxLib/src/lpc17xx_i2c.c **** {
 197:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (ack == TRUE)
 198:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 199:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 200:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 201:LPC17xxLib/src/lpc17xx_i2c.c **** 	else
 202:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 203:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
 204:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 205:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 206:LPC17xxLib/src/lpc17xx_i2c.c **** 
 207:LPC17xxLib/src/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 208:LPC17xxLib/src/lpc17xx_i2c.c **** 	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 209:LPC17xxLib/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 210:LPC17xxLib/src/lpc17xx_i2c.c **** }
 211:LPC17xxLib/src/lpc17xx_i2c.c **** 
 212:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
 213:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief 		Setup clock rate for I2C peripheral
 214:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in] 	I2Cx	I2C peripheral selected, should be:
 215:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 216:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 217:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 218:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	target_clock : clock of SSP (Hz)
 219:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		None
 220:LPC17xxLib/src/lpc17xx_i2c.c ****  ***********************************************************************/
 221:LPC17xxLib/src/lpc17xx_i2c.c **** static void I2C_SetClock (LPC_I2C_TypeDef *I2Cx, uint32_t target_clock)
 222:LPC17xxLib/src/lpc17xx_i2c.c **** {
 223:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint32_t temp;
 224:LPC17xxLib/src/lpc17xx_i2c.c **** 
 225:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 226:LPC17xxLib/src/lpc17xx_i2c.c **** 
 227:LPC17xxLib/src/lpc17xx_i2c.c **** 	// Get PCLK of I2C controller
 228:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (I2Cx == LPC_I2C0)
 229:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 230:LPC17xxLib/src/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
 231:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 232:LPC17xxLib/src/lpc17xx_i2c.c **** 	else if (I2Cx == LPC_I2C1)
 233:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 234:LPC17xxLib/src/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
 235:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 236:LPC17xxLib/src/lpc17xx_i2c.c **** 	else if (I2Cx == LPC_I2C2)
 237:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 238:LPC17xxLib/src/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
 239:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 240:LPC17xxLib/src/lpc17xx_i2c.c **** 
 241:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Set the I2C clock value to register */
 242:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2SCLH = (uint32_t)(temp / 2);
 243:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
 244:LPC17xxLib/src/lpc17xx_i2c.c **** }
 245:LPC17xxLib/src/lpc17xx_i2c.c **** /* End of Private Functions --------------------------------------------------- */
 246:LPC17xxLib/src/lpc17xx_i2c.c **** 
 247:LPC17xxLib/src/lpc17xx_i2c.c **** 
 248:LPC17xxLib/src/lpc17xx_i2c.c **** /* Public Functions ----------------------------------------------------------- */
 249:LPC17xxLib/src/lpc17xx_i2c.c **** /** @addtogroup I2C_Public_Functions
 250:LPC17xxLib/src/lpc17xx_i2c.c ****  * @{
 251:LPC17xxLib/src/lpc17xx_i2c.c ****  */
 252:LPC17xxLib/src/lpc17xx_i2c.c **** 
 253:LPC17xxLib/src/lpc17xx_i2c.c **** /********************************************************************//**
 254:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Initializes the I2Cx peripheral with specified parameter.
 255:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
 256:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 257:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 258:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 259:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	clockrate Target clock rate value to initialized I2C
 260:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				peripheral (Hz)
 261:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		None
 262:LPC17xxLib/src/lpc17xx_i2c.c ****  *********************************************************************/
 263:LPC17xxLib/src/lpc17xx_i2c.c **** void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
 264:LPC17xxLib/src/lpc17xx_i2c.c **** {
 135              	 .loc 1 264 0
 136              	 .cfi_startproc
 137              	 
 138              	 
 139              	.LVL8:
 140 0000 38B5     	 push {r3,r4,r5,lr}
 141              	 .cfi_def_cfa_offset 16
 142              	 .cfi_offset 3,-16
 143              	 .cfi_offset 4,-12
 144              	 .cfi_offset 5,-8
 145              	 .cfi_offset 14,-4
 265:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 266:LPC17xxLib/src/lpc17xx_i2c.c **** 
 267:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (I2Cx==LPC_I2C0)
 146              	 .loc 1 267 0
 147 0002 1F4B     	 ldr r3,.L22
 264:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 148              	 .loc 1 264 0
 149 0004 0446     	 mov r4,r0
 150              	 .loc 1 267 0
 151 0006 9842     	 cmp r0,r3
 264:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 152              	 .loc 1 264 0
 153 0008 0D46     	 mov r5,r1
 154              	 .loc 1 267 0
 155 000a 1CD1     	 bne .L17
 268:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 269:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Set up clock and power for I2C0 module */
 270:LPC17xxLib/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
 156              	 .loc 1 270 0
 157 000c 0121     	 movs r1,#1
 158              	.LVL9:
 159 000e 8020     	 movs r0,#128
 160              	.LVL10:
 161 0010 1C4B     	 ldr r3,.L22+4
 162 0012 9847     	 blx r3
 163              	.LVL11:
 271:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* As default, peripheral clock for I2C0 module
 272:LPC17xxLib/src/lpc17xx_i2c.c **** 		 * is set to FCCLK / 2 */
 273:LPC17xxLib/src/lpc17xx_i2c.c **** 		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
 164              	 .loc 1 273 0
 165 0014 0E20     	 movs r0,#14
 166 0016 0221     	 movs r1,#2
 167 0018 1B4B     	 ldr r3,.L22+8
 168 001a 9847     	 blx r3
 169              	.LVL12:
 170              	.LBB28:
 171              	.LBB29:
 230:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 172              	 .loc 1 230 0
 173 001c 0E20     	 movs r0,#14
 174              	.LVL13:
 175              	.L21:
 238:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 176              	 .loc 1 238 0
 177 001e 1B4B     	 ldr r3,.L22+12
 178 0020 9847     	 blx r3
 179              	.LVL14:
 180 0022 B0FBF5F0 	 udiv r0,r0,r5
 181              	.LVL15:
 242:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
 182              	 .loc 1 242 0
 183 0026 4308     	 lsrs r3,r0,#1
 184 0028 2361     	 str r3,[r4,#16]
 243:LPC17xxLib/src/lpc17xx_i2c.c **** }
 185              	 .loc 1 243 0
 186 002a 2369     	 ldr r3,[r4,#16]
 187              	.LBE29:
 188              	.LBE28:
 274:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 275:LPC17xxLib/src/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C1)
 276:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 277:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Set up clock and power for I2C1 module */
 278:LPC17xxLib/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
 279:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* As default, peripheral clock for I2C1 module
 280:LPC17xxLib/src/lpc17xx_i2c.c **** 		 * is set to FCCLK / 2 */
 281:LPC17xxLib/src/lpc17xx_i2c.c **** 		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
 282:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 283:LPC17xxLib/src/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C2)
 284:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 285:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Set up clock and power for I2C2 module */
 286:LPC17xxLib/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, ENABLE);
 287:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* As default, peripheral clock for I2C2 module
 288:LPC17xxLib/src/lpc17xx_i2c.c **** 		 * is set to FCCLK / 2 */
 289:LPC17xxLib/src/lpc17xx_i2c.c **** 		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C2, CLKPWR_PCLKSEL_CCLK_DIV_2);
 290:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 291:LPC17xxLib/src/lpc17xx_i2c.c **** 	else {
 292:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Up-Support this device
 293:LPC17xxLib/src/lpc17xx_i2c.c **** 		return;
 294:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 295:LPC17xxLib/src/lpc17xx_i2c.c **** 
 296:LPC17xxLib/src/lpc17xx_i2c.c ****     /* Set clock rate */
 297:LPC17xxLib/src/lpc17xx_i2c.c ****     I2C_SetClock(I2Cx, clockrate);
 298:LPC17xxLib/src/lpc17xx_i2c.c ****     /* Set I2C operation to default */
 299:LPC17xxLib/src/lpc17xx_i2c.c ****     I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
 189              	 .loc 1 299 0
 190 002c 6422     	 movs r2,#100
 191              	.LBB33:
 192              	.LBB30:
 243:LPC17xxLib/src/lpc17xx_i2c.c **** }
 193              	 .loc 1 243 0
 194 002e C01A     	 subs r0,r0,r3
 195              	.LVL16:
 196 0030 6061     	 str r0,[r4,#20]
 197              	.LVL17:
 198              	.LBE30:
 199              	.LBE33:
 200              	 .loc 1 299 0
 201 0032 237E     	 ldrb r3,[r4,#24]
 202 0034 0023     	 movs r3,#0
 203 0036 2276     	 strb r2,[r4,#24]
 204 0038 627E     	 ldrb r2,[r4,#25]
 205 003a 6376     	 strb r3,[r4,#25]
 206 003c A27E     	 ldrb r2,[r4,#26]
 207 003e A376     	 strb r3,[r4,#26]
 208 0040 E27E     	 ldrb r2,[r4,#27]
 209 0042 E376     	 strb r3,[r4,#27]
 210              	.L16:
 211 0044 38BD     	 pop {r3,r4,r5,pc}
 212              	.LVL18:
 213              	.L17:
 275:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 214              	 .loc 1 275 0
 215 0046 124B     	 ldr r3,.L22+16
 216 0048 9842     	 cmp r0,r3
 217 004a 0AD1     	 bne .L19
 278:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* As default, peripheral clock for I2C1 module
 218              	 .loc 1 278 0
 219 004c 0121     	 movs r1,#1
 220              	.LVL19:
 221 004e 4FF40020 	 mov r0,#524288
 222              	.LVL20:
 223 0052 0C4B     	 ldr r3,.L22+4
 224 0054 9847     	 blx r3
 225              	.LVL21:
 281:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 226              	 .loc 1 281 0
 227 0056 2620     	 movs r0,#38
 228 0058 0221     	 movs r1,#2
 229 005a 0B4B     	 ldr r3,.L22+8
 230 005c 9847     	 blx r3
 231              	.LVL22:
 232              	.LBB34:
 233              	.LBB31:
 234:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 234              	 .loc 1 234 0
 235 005e 2620     	 movs r0,#38
 236 0060 DDE7     	 b .L21
 237              	.LVL23:
 238              	.L19:
 239              	.LBE31:
 240              	.LBE34:
 283:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 241              	 .loc 1 283 0
 242 0062 0C4B     	 ldr r3,.L22+20
 243 0064 9842     	 cmp r0,r3
 244 0066 EDD1     	 bne .L16
 286:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* As default, peripheral clock for I2C2 module
 245              	 .loc 1 286 0
 246 0068 0121     	 movs r1,#1
 247              	.LVL24:
 248 006a 4FF08060 	 mov r0,#67108864
 249              	.LVL25:
 250 006e 054B     	 ldr r3,.L22+4
 251 0070 9847     	 blx r3
 252              	.LVL26:
 289:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 253              	 .loc 1 289 0
 254 0072 3420     	 movs r0,#52
 255 0074 0221     	 movs r1,#2
 256 0076 044B     	 ldr r3,.L22+8
 257 0078 9847     	 blx r3
 258              	.LVL27:
 259              	.LBB35:
 260              	.LBB32:
 238:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 261              	 .loc 1 238 0
 262 007a 3420     	 movs r0,#52
 263 007c CFE7     	 b .L21
 264              	.L23:
 265 007e 00BF     	 .align 2
 266              	.L22:
 267 0080 00C00140 	 .word 1073856512
 268 0084 00000000 	 .word CLKPWR_ConfigPPWR
 269 0088 00000000 	 .word CLKPWR_SetPCLKDiv
 270 008c 00000000 	 .word CLKPWR_GetPCLK
 271 0090 00C00540 	 .word 1074118656
 272 0094 00000A40 	 .word 1074397184
 273              	.LBE32:
 274              	.LBE35:
 275              	 .cfi_endproc
 276              	.LFE61:
 278              	 .section .text.I2C_DeInit,"ax",%progbits
 279              	 .align 1
 280              	 .global I2C_DeInit
 281              	 .syntax unified
 282              	 .thumb
 283              	 .thumb_func
 284              	 .fpu softvfp
 286              	I2C_DeInit:
 287              	.LFB62:
 300:LPC17xxLib/src/lpc17xx_i2c.c **** }
 301:LPC17xxLib/src/lpc17xx_i2c.c **** 
 302:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
 303:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		De-initializes the I2C peripheral registers to their
 304:LPC17xxLib/src/lpc17xx_i2c.c ****  *                  default reset values.
 305:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
 306:LPC17xxLib/src/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 307:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 308:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 309:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		None
 310:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
 311:LPC17xxLib/src/lpc17xx_i2c.c **** void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
 312:LPC17xxLib/src/lpc17xx_i2c.c **** {
 288              	 .loc 1 312 0
 289              	 .cfi_startproc
 290              	 
 291              	 
 292              	 
 293              	.LVL28:
 313:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 314:LPC17xxLib/src/lpc17xx_i2c.c **** 
 315:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Disable I2C control */
 316:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
 294              	 .loc 1 316 0
 295 0000 037E     	 ldrb r3,[r0,#24]
 296 0002 4023     	 movs r3,#64
 297 0004 0021     	 movs r1,#0
 298 0006 0376     	 strb r3,[r0,#24]
 299 0008 437E     	 ldrb r3,[r0,#25]
 300 000a 4176     	 strb r1,[r0,#25]
 301 000c 837E     	 ldrb r3,[r0,#26]
 302 000e 8176     	 strb r1,[r0,#26]
 303 0010 C37E     	 ldrb r3,[r0,#27]
 317:LPC17xxLib/src/lpc17xx_i2c.c **** 
 318:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (I2Cx==LPC_I2C0)
 304              	 .loc 1 318 0
 305 0012 0A4B     	 ldr r3,.L29
 316:LPC17xxLib/src/lpc17xx_i2c.c **** 
 306              	 .loc 1 316 0
 307 0014 C176     	 strb r1,[r0,#27]
 308              	 .loc 1 318 0
 309 0016 9842     	 cmp r0,r3
 310 0018 02D1     	 bne .L25
 319:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 320:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Disable power for I2C0 module */
 321:LPC17xxLib/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
 311              	 .loc 1 321 0
 312 001a 8020     	 movs r0,#128
 313              	.LVL29:
 314              	.L28:
 322:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 323:LPC17xxLib/src/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C1)
 324:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 325:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Disable power for I2C1 module */
 326:LPC17xxLib/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
 327:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 328:LPC17xxLib/src/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C2)
 329:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 330:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Disable power for I2C2 module */
 331:LPC17xxLib/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
 315              	 .loc 1 331 0
 316 001c 084B     	 ldr r3,.L29+4
 317 001e 1847     	 bx r3
 318              	.LVL30:
 319              	.L25:
 323:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 320              	 .loc 1 323 0
 321 0020 084B     	 ldr r3,.L29+8
 322 0022 9842     	 cmp r0,r3
 323 0024 02D1     	 bne .L26
 326:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 324              	 .loc 1 326 0
 325 0026 4FF40020 	 mov r0,#524288
 326              	.LVL31:
 327 002a F7E7     	 b .L28
 328              	.LVL32:
 329              	.L26:
 328:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 330              	 .loc 1 328 0
 331 002c 064B     	 ldr r3,.L29+12
 332 002e 9842     	 cmp r0,r3
 333 0030 02D1     	 bne .L24
 334              	 .loc 1 331 0
 335 0032 4FF08060 	 mov r0,#67108864
 336              	.LVL33:
 337 0036 F1E7     	 b .L28
 338              	.LVL34:
 339              	.L24:
 340 0038 7047     	 bx lr
 341              	.L30:
 342 003a 00BF     	 .align 2
 343              	.L29:
 344 003c 00C00140 	 .word 1073856512
 345 0040 00000000 	 .word CLKPWR_ConfigPPWR
 346 0044 00C00540 	 .word 1074118656
 347 0048 00000A40 	 .word 1074397184
 348              	 .cfi_endproc
 349              	.LFE62:
 351              	 .section .text.I2C_Cmd,"ax",%progbits
 352              	 .align 1
 353              	 .global I2C_Cmd
 354              	 .syntax unified
 355              	 .thumb
 356              	 .thumb_func
 357              	 .fpu softvfp
 359              	I2C_Cmd:
 360              	.LFB63:
 332:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 333:LPC17xxLib/src/lpc17xx_i2c.c **** }
 334:LPC17xxLib/src/lpc17xx_i2c.c **** 
 335:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
 336:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Enable or disable I2C peripheral's operation
 337:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx I2C peripheral selected, should be
 338:LPC17xxLib/src/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 339:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 340:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 341:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	NewState New State of I2Cx peripheral's operation
 342:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		none
 343:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
 344:LPC17xxLib/src/lpc17xx_i2c.c **** void I2C_Cmd(LPC_I2C_TypeDef* I2Cx, FunctionalState NewState)
 345:LPC17xxLib/src/lpc17xx_i2c.c **** {
 361              	 .loc 1 345 0
 362              	 .cfi_startproc
 363              	 
 364              	 
 365              	 
 366              	.LVL35:
 346:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
 347:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 348:LPC17xxLib/src/lpc17xx_i2c.c **** 
 349:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
 367              	 .loc 1 349 0
 368 0000 0129     	 cmp r1,#1
 369 0002 4FF00003 	 mov r3,#0
 370 0006 4FF04002 	 mov r2,#64
 371 000a 08D1     	 bne .L32
 350:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 351:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
 372              	 .loc 1 351 0
 373 000c 0178     	 ldrb r1,[r0]
 374              	.LVL36:
 375 000e 0270     	 strb r2,[r0]
 376 0010 4278     	 ldrb r2,[r0,#1]
 377 0012 4370     	 strb r3,[r0,#1]
 378 0014 8278     	 ldrb r2,[r0,#2]
 379 0016 8370     	 strb r3,[r0,#2]
 380 0018 C278     	 ldrb r2,[r0,#3]
 381 001a C370     	 strb r3,[r0,#3]
 382 001c 7047     	 bx lr
 383              	.LVL37:
 384              	.L32:
 352:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 353:LPC17xxLib/src/lpc17xx_i2c.c **** 	else
 354:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 355:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
 385              	 .loc 1 355 0
 386 001e 017E     	 ldrb r1,[r0,#24]
 387              	.LVL38:
 388 0020 0276     	 strb r2,[r0,#24]
 389 0022 427E     	 ldrb r2,[r0,#25]
 390 0024 4376     	 strb r3,[r0,#25]
 391 0026 827E     	 ldrb r2,[r0,#26]
 392 0028 8376     	 strb r3,[r0,#26]
 393 002a C27E     	 ldrb r2,[r0,#27]
 394 002c C376     	 strb r3,[r0,#27]
 395 002e 7047     	 bx lr
 396              	 .cfi_endproc
 397              	.LFE63:
 399              	 .section .text.I2C_IntCmd,"ax",%progbits
 400              	 .align 1
 401              	 .global I2C_IntCmd
 402              	 .syntax unified
 403              	 .thumb
 404              	 .thumb_func
 405              	 .fpu softvfp
 407              	I2C_IntCmd:
 408              	.LFB64:
 356:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 357:LPC17xxLib/src/lpc17xx_i2c.c **** }
 358:LPC17xxLib/src/lpc17xx_i2c.c **** 
 359:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
 360:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief 		Enable/Disable interrupt for I2C peripheral
 361:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
 362:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 363:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 364:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 365:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	NewState	New State of I2C peripheral interrupt in NVIC core
 366:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				should be:
 367:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- ENABLE: enable interrupt for this I2C peripheral
 368:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- DISABLE: disable interrupt for this I2C peripheral
 369:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		None
 370:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
 371:LPC17xxLib/src/lpc17xx_i2c.c **** void I2C_IntCmd (LPC_I2C_TypeDef *I2Cx, Bool NewState)
 372:LPC17xxLib/src/lpc17xx_i2c.c **** {
 409              	 .loc 1 372 0
 410              	 .cfi_startproc
 411              	 
 412              	 
 413              	 
 414              	.LVL39:
 415 0000 144B     	 ldr r3,.L43
 373:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (NewState)
 416              	 .loc 1 373 0
 417 0002 91B1     	 cbz r1,.L35
 374:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 375:LPC17xxLib/src/lpc17xx_i2c.c **** 		if(I2Cx == LPC_I2C0)
 418              	 .loc 1 375 0
 419 0004 9842     	 cmp r0,r3
 420 0006 04D1     	 bne .L36
 421              	.LVL40:
 422              	.LBB58:
 423              	.LBB59:
 424              	 .file 2 "CMSISv2p00_LPC17xx/inc/core_cm3.h"
   1:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /**************************************************************************//**
   2:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @file     core_cm3.h
   3:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @version  V2.01
   5:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @date     06. December 2010
   6:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *
   7:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @note
   8:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *
  10:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @par
  11:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *
  15:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @par
  16:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *
  22:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  ******************************************************************************/
  23:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if defined ( __ICCARM__ )
  24:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
  26:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  27:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #ifdef __cplusplus
  28:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  extern "C" {
  29:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
  30:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  31:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  34:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  35:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*******************************************************************************
  36:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *                 CMSIS definitions
  37:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  ******************************************************************************/
  38:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** @ingroup  CMSIS
  39:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  40:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  41:CMSISv2p00_LPC17xx/inc/core_cm3.h ****    - CMSIS version number
  42:CMSISv2p00_LPC17xx/inc/core_cm3.h ****    - Cortex-M core
  43:CMSISv2p00_LPC17xx/inc/core_cm3.h ****    - Cortex-M core Revision Number
  44:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
  45:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
  46:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  47:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*  CMSIS CM3 definitions */
  48:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  49:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  50:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  51:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  52:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  53:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  54:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  55:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if defined ( __CC_ARM   )
  56:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  57:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  58:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   
  59:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
  60:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  61:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  62:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  63:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #elif defined   (  __GNUC__  )
  64:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  65:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  66:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   
  67:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #elif defined   (  __TASKING__  )
  68:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  69:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  70:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  71:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
  72:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  73:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  74:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  75:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  76:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  77:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  78:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  79:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  80:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #ifndef __CMSIS_GENERIC
  81:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  82:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  83:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  84:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  85:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  86:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #ifdef __cplusplus
  87:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  88:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #else
  89:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  90:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
  91:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
  92:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
  93:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  94:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_core_definitions */
  95:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  96:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  97:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  98:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*******************************************************************************
  99:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *                 Register Abstraction
 100:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  ******************************************************************************/
 101:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 102:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** @ingroup  CMSIS
 103:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @addtogroup CMSIS_core_register CMSIS Core Register
 104:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Core Register contain:
 105:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core Register
 106:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core NVIC Register
 107:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core SCB Register
 108:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core SysTick Register
 109:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core Debug Register
 110:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core MPU Register
 111:CMSISv2p00_LPC17xx/inc/core_cm3.h **** */
 112:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 113:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 114:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 115:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 116:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 117:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 118:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 119:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 120:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 121:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef union
 122:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 123:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   struct
 124:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   {
 125:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 126:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 127:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #else
 128:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 129:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 130:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 131:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
 132:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 133:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 134:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 135:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 136:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 137:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 138:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 139:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } APSR_Type;
 140:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 141:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 142:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 143:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 144:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef union
 145:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 146:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   struct
 147:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   {
 148:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 149:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 150:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 151:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 152:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } IPSR_Type;
 153:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 154:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 155:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 156:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 157:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef union
 158:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 159:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   struct
 160:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   {
 161:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 162:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 163:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 164:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #else
 165:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 166:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 167:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 168:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
 169:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 170:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 171:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 172:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 173:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 174:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 175:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 176:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 177:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 178:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } xPSR_Type;
 179:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 180:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 181:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 182:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 183:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef union
 184:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 185:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   struct
 186:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   {
 187:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 188:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 189:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 190:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 191:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 192:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 193:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } CONTROL_Type;
 194:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 195:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_CORE */
 196:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 197:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 198:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 199:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 200:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 201:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 202:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 203:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 204:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 205:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 206:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 207:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 208:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 209:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED0[24];
 210:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 211:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RSERVED1[24];
 212:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 213:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED2[24];
 214:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 215:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED3[24];
 216:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 217:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED4[56];
 218:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 219:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED5[644];
 220:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 221:CMSISv2p00_LPC17xx/inc/core_cm3.h **** }  NVIC_Type;
 222:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 223:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 224:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 225:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 226:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 227:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 228:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 229:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 230:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 231:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 232:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 233:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 234:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 235:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 236:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 237:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 238:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 239:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 240:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 241:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 242:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 243:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 244:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 245:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 246:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 247:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 248:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 249:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 250:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 251:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 252:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 253:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 254:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 255:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } SCB_Type;
 256:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 257:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB CPUID Register Definitions */
 258:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 259:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 260:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 261:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 262:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 263:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 264:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 265:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 266:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 267:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 268:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 269:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 270:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 271:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 272:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 273:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 274:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 275:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 276:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 277:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 278:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 279:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 280:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 281:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 282:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 283:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 284:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 285:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 286:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 287:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 288:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 289:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 290:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 291:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 292:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 293:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 294:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 295:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 296:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 297:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 298:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 299:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 300:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 301:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 302:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 303:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 304:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 305:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 306:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 307:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 308:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 309:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 310:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 311:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 312:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 313:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 314:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 315:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 316:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 317:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 318:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 319:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 320:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 321:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 322:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 323:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 324:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 325:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 326:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 327:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 328:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 329:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 330:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB System Control Register Definitions */
 331:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 332:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 333:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 334:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 335:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 336:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 337:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 338:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 339:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 340:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 341:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 342:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 343:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 344:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 345:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 346:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 347:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 348:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 349:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 350:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 351:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 352:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 353:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 354:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 355:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 356:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 357:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 358:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 359:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 360:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 361:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 362:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 363:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 364:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 365:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 366:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 367:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 368:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 369:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 370:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 371:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 372:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 373:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 374:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 375:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 376:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 377:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 378:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 379:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 380:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 381:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 382:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 383:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 384:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 385:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 386:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 387:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 388:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 389:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 390:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 391:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 392:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 393:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 394:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 395:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 396:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 397:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 398:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 399:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 400:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 401:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 402:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 403:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 404:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 405:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 406:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 407:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 408:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 409:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 410:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 411:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 412:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 413:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 414:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 415:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 416:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 417:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 418:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 419:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 420:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 421:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 422:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 423:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 424:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 425:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 426:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 427:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 428:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 429:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 430:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 431:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 432:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 433:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 434:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 435:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 436:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 437:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 438:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_SCB */
 439:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 440:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 441:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 442:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 443:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 444:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 445:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 446:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 447:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 448:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 449:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 450:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 451:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 452:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 453:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 454:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 455:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } SysTick_Type;
 456:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 457:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 458:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 459:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 460:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 461:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 462:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 463:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 464:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 465:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 466:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 467:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 468:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 469:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 470:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SysTick Reload Register Definitions */
 471:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 472:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 473:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 474:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SysTick Current Register Definitions */
 475:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 476:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 477:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 478:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SysTick Calibration Register Definitions */
 479:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 480:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 481:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 482:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 483:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 484:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 485:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 486:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 487:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 488:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 489:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 490:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 491:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 492:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 493:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 494:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 495:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 496:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 497:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 498:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 499:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 500:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 501:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __O  union
 502:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   {
 503:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 504:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 505:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 506:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 507:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED0[864];
 508:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 509:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED1[15];
 510:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 511:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED2[15];
 512:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 513:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED3[29];
 514:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 515:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 516:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 517:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED4[43];
 518:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 519:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 520:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED5[6];
 521:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 522:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 523:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 524:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 525:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 526:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 527:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 528:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 529:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 530:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 531:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 532:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 533:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } ITM_Type;
 534:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 535:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 536:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 537:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 538:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 539:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Trace Control Register Definitions */
 540:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 541:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 542:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 543:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 544:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 545:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 546:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 547:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 548:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 549:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 550:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 551:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 552:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 553:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 554:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 555:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 556:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 557:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 558:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 559:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 560:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 561:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 562:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 563:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 564:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Integration Write Register Definitions */
 565:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 566:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 567:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 568:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Integration Read Register Definitions */
 569:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 570:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 571:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 572:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 573:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 574:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 575:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 576:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Lock Status Register Definitions */
 577:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 578:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 579:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 580:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 581:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 582:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 583:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 584:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 585:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 586:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 587:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 588:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 589:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 590:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 591:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 592:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 593:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 594:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 595:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 596:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 597:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 598:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 599:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED0;
 600:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 601:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 602:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 603:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #else
 604:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED1;
 605:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
 606:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } InterruptType_Type;
 607:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 608:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 609:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 610:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 611:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 612:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Auxiliary Control Register Definitions */
 613:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 614:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 615:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 616:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 617:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 618:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 619:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 620:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 621:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 622:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 623:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 624:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 625:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
 626:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 627:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 628:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 629:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 630:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 631:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 632:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 633:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 634:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 635:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 636:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 637:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 638:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 639:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 640:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 641:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 642:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 643:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 644:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 645:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 646:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 647:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } MPU_Type;
 648:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 649:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* MPU Type Register */
 650:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 651:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 652:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 653:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 654:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 655:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 656:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 657:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 658:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 659:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* MPU Control Register */
 660:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 661:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 662:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 663:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 664:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 665:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 666:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 667:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 668:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 669:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* MPU Region Number Register */
 670:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 671:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 672:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 673:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* MPU Region Base Address Register */
 674:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 675:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 676:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 677:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 678:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 679:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 680:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 681:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 682:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 683:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* MPU Region Attribute and Size Register */
 684:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 685:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 686:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 687:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 688:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 689:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 690:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 691:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 692:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 693:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 694:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 695:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 696:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 697:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 698:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 699:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 700:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 701:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 702:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 703:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 704:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 705:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 706:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 707:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 708:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 709:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 710:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 711:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_MPU */
 712:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
 713:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 714:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 715:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 716:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 717:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 718:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 719:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 720:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 721:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 722:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 723:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 724:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 725:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 726:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 727:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 728:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 729:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } CoreDebug_Type;
 730:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 731:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Debug Halting Control and Status Register */
 732:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 733:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 734:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 735:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 736:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 737:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 738:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 739:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 740:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 741:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 742:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 743:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 744:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 745:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 746:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 747:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 748:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 749:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 750:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 751:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 752:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 753:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 754:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 755:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 756:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 757:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 758:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 759:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 760:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 761:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 762:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 763:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 764:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 765:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 766:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 767:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 768:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Debug Core Register Selector Register */
 769:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 770:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 771:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 772:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 773:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 774:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 775:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 776:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 777:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 778:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 779:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 780:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 781:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 782:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 783:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 784:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 785:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 786:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 787:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 788:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 789:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 790:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 791:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 792:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 793:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 794:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 795:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 796:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 797:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 798:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 799:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 800:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 801:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 802:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 803:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 804:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 805:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 806:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 807:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 808:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 809:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 810:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 811:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 812:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 813:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 814:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 815:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 816:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 817:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 818:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 819:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 820:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 821:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 822:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 823:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 824:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 825:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 826:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 827:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 828:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 829:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 830:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 831:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 832:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 833:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 834:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 835:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 836:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 837:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
 838:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 839:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 840:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
 841:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 842:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} */
 843:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 844:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 845:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 846:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*******************************************************************************
 847:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *                Hardware Abstraction Layer
 848:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  ******************************************************************************/
 849:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS
 850:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 851:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Core Function Interface contains:
 852:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core NVIC Functions
 853:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core SysTick Functions
 854:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core Debug Functions
 855:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core Register Access Functions
 856:CMSISv2p00_LPC17xx/inc/core_cm3.h **** */
 857:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 858:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 859:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 860:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 861:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 862:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 863:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 864:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 865:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 866:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @{
 867:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 868:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Set Priority Grouping
 869:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 870:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 871:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 872:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Only values from 0..7 are used.
 873:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   In case of a conflict between priority grouping and available
 874:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 875:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 876:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 877:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 878:CMSISv2p00_LPC17xx/inc/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 879:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 880:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t reg_value;
 881:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 882:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 883:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 884:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 885:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   reg_value  =  (reg_value                       |
 886:CMSISv2p00_LPC17xx/inc/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 887:CMSISv2p00_LPC17xx/inc/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 888:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   SCB->AIRCR =  reg_value;
 889:CMSISv2p00_LPC17xx/inc/core_cm3.h **** }
 890:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 891:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 892:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Get Priority Grouping
 893:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 894:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 895:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 896:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 897:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \return                Priority grouping field
 898:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 899:CMSISv2p00_LPC17xx/inc/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 900:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 901:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 902:CMSISv2p00_LPC17xx/inc/core_cm3.h **** }
 903:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 904:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 905:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Enable External Interrupt
 906:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 907:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 908:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     The interrupt number cannot be a negative value.
 909:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 910:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 911:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 912:CMSISv2p00_LPC17xx/inc/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 913:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 914:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 425              	 .loc 2 914 0
 426 0008 4FF48062 	 mov r2,#1024
 427              	.LVL41:
 428              	.L41:
 429              	.LBE59:
 430              	.LBE58:
 431              	.LBB60:
 432              	.LBB61:
 433              	.LBB62:
 434              	.LBB63:
 435 000c 124B     	 ldr r3,.L43+4
 436 000e 1A60     	 str r2,[r3]
 437 0010 7047     	 bx lr
 438              	.L36:
 439              	.LVL42:
 440              	.LBE63:
 441              	.LBE62:
 376:LPC17xxLib/src/lpc17xx_i2c.c **** 		{
 377:LPC17xxLib/src/lpc17xx_i2c.c **** 			NVIC_EnableIRQ(I2C0_IRQn);
 378:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 379:LPC17xxLib/src/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C1)
 442              	 .loc 1 379 0
 443 0012 124B     	 ldr r3,.L43+8
 444 0014 9842     	 cmp r0,r3
 445 0016 02D1     	 bne .L38
 446              	.LVL43:
 447              	.LBB65:
 448              	.LBB64:
 449              	 .loc 2 914 0
 450 0018 4FF40062 	 mov r2,#2048
 451 001c F6E7     	 b .L41
 452              	.LVL44:
 453              	.L38:
 454              	.LBE64:
 455              	.LBE65:
 380:LPC17xxLib/src/lpc17xx_i2c.c **** 		{
 381:LPC17xxLib/src/lpc17xx_i2c.c **** 			NVIC_EnableIRQ(I2C1_IRQn);
 382:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 383:LPC17xxLib/src/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C2)
 456              	 .loc 1 383 0
 457 001e 104B     	 ldr r3,.L43+12
 458 0020 9842     	 cmp r0,r3
 459 0022 09D1     	 bne .L34
 460              	.LVL45:
 461              	.LBB66:
 462              	.LBB67:
 463              	 .loc 2 914 0
 464 0024 4FF48052 	 mov r2,#4096
 465 0028 F0E7     	 b .L41
 466              	.LVL46:
 467              	.L35:
 468              	.LBE67:
 469              	.LBE66:
 470              	.LBE61:
 471              	.LBE60:
 384:LPC17xxLib/src/lpc17xx_i2c.c **** 		{
 385:LPC17xxLib/src/lpc17xx_i2c.c **** 			NVIC_EnableIRQ(I2C2_IRQn);
 386:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 387:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 388:LPC17xxLib/src/lpc17xx_i2c.c **** 	else
 389:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 390:LPC17xxLib/src/lpc17xx_i2c.c **** 		if(I2Cx == LPC_I2C0)
 472              	 .loc 1 390 0
 473 002a 9842     	 cmp r0,r3
 474 002c 05D1     	 bne .L39
 475              	.LVL47:
 476              	.LBB68:
 477              	.LBB69:
 915:CMSISv2p00_LPC17xx/inc/core_cm3.h **** }
 916:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 917:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 918:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Disable External Interrupt
 919:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 920:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     This function disables a device specific interupt in the NVIC interrupt controller.
 921:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     The interrupt number cannot be a negative value.
 922:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 923:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 924:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 925:CMSISv2p00_LPC17xx/inc/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 926:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 927:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 478              	 .loc 2 927 0
 479 002e 4FF48062 	 mov r2,#1024
 480              	.LVL48:
 481              	.L42:
 482              	.LBE69:
 483              	.LBE68:
 484              	.LBB70:
 485              	.LBB71:
 486 0032 094B     	 ldr r3,.L43+4
 487 0034 C3F88020 	 str r2,[r3,#128]
 488              	.L34:
 489 0038 7047     	 bx lr
 490              	.L39:
 491              	.LBE71:
 492              	.LBE70:
 391:LPC17xxLib/src/lpc17xx_i2c.c **** 		{
 392:LPC17xxLib/src/lpc17xx_i2c.c **** 			NVIC_DisableIRQ(I2C0_IRQn);
 393:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 394:LPC17xxLib/src/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C1)
 493              	 .loc 1 394 0
 494 003a 084B     	 ldr r3,.L43+8
 495 003c 9842     	 cmp r0,r3
 496 003e 02D1     	 bne .L40
 497              	.LVL49:
 498              	.LBB73:
 499              	.LBB74:
 500              	 .loc 2 927 0
 501 0040 4FF40062 	 mov r2,#2048
 502 0044 F5E7     	 b .L42
 503              	.LVL50:
 504              	.L40:
 505              	.LBE74:
 506              	.LBE73:
 395:LPC17xxLib/src/lpc17xx_i2c.c **** 		{
 396:LPC17xxLib/src/lpc17xx_i2c.c **** 			NVIC_DisableIRQ(I2C1_IRQn);
 397:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 398:LPC17xxLib/src/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C2)
 507              	 .loc 1 398 0
 508 0046 064B     	 ldr r3,.L43+12
 509 0048 9842     	 cmp r0,r3
 510 004a F5D1     	 bne .L34
 511              	.LVL51:
 512              	.LBB75:
 513              	.LBB72:
 514              	 .loc 2 927 0
 515 004c 4FF48052 	 mov r2,#4096
 516 0050 EFE7     	 b .L42
 517              	.L44:
 518 0052 00BF     	 .align 2
 519              	.L43:
 520 0054 00C00140 	 .word 1073856512
 521 0058 00E100E0 	 .word -536813312
 522 005c 00C00540 	 .word 1074118656
 523 0060 00000A40 	 .word 1074397184
 524              	.LBE72:
 525              	.LBE75:
 526              	 .cfi_endproc
 527              	.LFE64:
 529              	 .section .text.I2C_MasterHandler,"ax",%progbits
 530              	 .align 1
 531              	 .global I2C_MasterHandler
 532              	 .syntax unified
 533              	 .thumb
 534              	 .thumb_func
 535              	 .fpu softvfp
 537              	I2C_MasterHandler:
 538              	.LFB65:
 399:LPC17xxLib/src/lpc17xx_i2c.c **** 		{
 400:LPC17xxLib/src/lpc17xx_i2c.c **** 			NVIC_DisableIRQ(I2C2_IRQn);
 401:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 402:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 403:LPC17xxLib/src/lpc17xx_i2c.c ****     return;
 404:LPC17xxLib/src/lpc17xx_i2c.c **** }
 405:LPC17xxLib/src/lpc17xx_i2c.c **** 
 406:LPC17xxLib/src/lpc17xx_i2c.c **** 
 407:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
 408:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief 		General Master Interrupt handler for I2C peripheral
 409:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
 410:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C
 411:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 412:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 413:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		None
 414:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
 415:LPC17xxLib/src/lpc17xx_i2c.c **** void I2C_MasterHandler (LPC_I2C_TypeDef  *I2Cx)
 416:LPC17xxLib/src/lpc17xx_i2c.c **** {
 539              	 .loc 1 416 0
 540              	 .cfi_startproc
 541              	 
 542              	 
 543              	.LVL52:
 544 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 545              	 .cfi_def_cfa_offset 24
 546              	 .cfi_offset 3,-24
 547              	 .cfi_offset 4,-20
 548              	 .cfi_offset 5,-16
 549              	 .cfi_offset 6,-12
 550              	 .cfi_offset 7,-8
 551              	 .cfi_offset 14,-4
 417:LPC17xxLib/src/lpc17xx_i2c.c **** 	int32_t tmp;
 418:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint8_t returnCode;
 419:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2C_M_SETUP_Type *txrx_setup;
 420:LPC17xxLib/src/lpc17xx_i2c.c **** 
 421:LPC17xxLib/src/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 552              	 .loc 1 421 0
 553 0002 984B     	 ldr r3,.L134
 416:LPC17xxLib/src/lpc17xx_i2c.c **** 	int32_t tmp;
 554              	 .loc 1 416 0
 555 0004 0446     	 mov r4,r0
 556              	 .loc 1 421 0
 557 0006 9847     	 blx r3
 558              	.LVL53:
 559 0008 0546     	 mov r5,r0
 560              	.LVL54:
 422:LPC17xxLib/src/lpc17xx_i2c.c **** 	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
 423:LPC17xxLib/src/lpc17xx_i2c.c **** 
 424:LPC17xxLib/src/lpc17xx_i2c.c **** 	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 561              	 .loc 1 424 0
 562 000a 6268     	 ldr r2,[r4,#4]
 422:LPC17xxLib/src/lpc17xx_i2c.c **** 	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
 563              	 .loc 1 422 0
 564 000c 9648     	 ldr r0,.L134+4
 565              	.LVL55:
 566              	 .loc 1 424 0
 567 000e 02F0F802 	 and r2,r2,#248
 422:LPC17xxLib/src/lpc17xx_i2c.c **** 	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
 568              	 .loc 1 422 0
 569 0012 50F83530 	 ldr r3,[r0,r5,lsl#3]
 570              	.LVL56:
 425:LPC17xxLib/src/lpc17xx_i2c.c **** 	// Save current status
 426:LPC17xxLib/src/lpc17xx_i2c.c **** 	txrx_setup->status = returnCode;
 427:LPC17xxLib/src/lpc17xx_i2c.c **** 	// there's no relevant information
 428:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (returnCode == I2C_I2STAT_NO_INF){
 571              	 .loc 1 428 0
 572 0016 F82A     	 cmp r2,#248
 426:LPC17xxLib/src/lpc17xx_i2c.c **** 	// there's no relevant information
 573              	 .loc 1 426 0
 574 0018 5A62     	 str r2,[r3,#36]
 575              	 .loc 1 428 0
 576 001a 0AD1     	 bne .L46
 577              	.LVL57:
 578              	.L72:
 429:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 430:LPC17xxLib/src/lpc17xx_i2c.c **** 		return;
 431:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 432:LPC17xxLib/src/lpc17xx_i2c.c **** 
 433:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* ----------------------------- TRANSMIT PHASE --------------------------*/
 434:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (i2cdat[tmp].dir == 0){
 435:LPC17xxLib/src/lpc17xx_i2c.c **** 		switch (returnCode)
 436:LPC17xxLib/src/lpc17xx_i2c.c **** 		{
 437:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* A start/repeat start condition has been transmitted -------------------*/
 438:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_START:
 439:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_RESTART:
 440:LPC17xxLib/src/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 441:LPC17xxLib/src/lpc17xx_i2c.c **** 			/*
 442:LPC17xxLib/src/lpc17xx_i2c.c **** 			 * If there's any transmit data, then start to
 443:LPC17xxLib/src/lpc17xx_i2c.c **** 			 * send SLA+W right now, otherwise check whether if there's
 444:LPC17xxLib/src/lpc17xx_i2c.c **** 			 * any receive data for next state.
 445:LPC17xxLib/src/lpc17xx_i2c.c **** 			 */
 446:LPC17xxLib/src/lpc17xx_i2c.c **** 			if ((txrx_setup->tx_data != NULL) && (txrx_setup->tx_length != 0)){
 447:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1);
 448:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 449:LPC17xxLib/src/lpc17xx_i2c.c **** 			} else {
 450:LPC17xxLib/src/lpc17xx_i2c.c **** 				goto next_stage;
 451:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 452:LPC17xxLib/src/lpc17xx_i2c.c **** 			break;
 453:LPC17xxLib/src/lpc17xx_i2c.c **** 
 454:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* SLA+W has been transmitted, ACK has been received ----------------------*/
 455:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_SLAW_ACK:
 456:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Data has been transmitted, ACK has been received */
 457:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_DAT_ACK:
 458:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* Send more data */
 459:LPC17xxLib/src/lpc17xx_i2c.c **** 			if ((txrx_setup->tx_count < txrx_setup->tx_length) \
 460:LPC17xxLib/src/lpc17xx_i2c.c **** 					&& (txrx_setup->tx_data != NULL)){
 461:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
 462:LPC17xxLib/src/lpc17xx_i2c.c **** 				txrx_setup->tx_count++;
 463:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 464:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 465:LPC17xxLib/src/lpc17xx_i2c.c **** 			// no more data, switch to next stage
 466:LPC17xxLib/src/lpc17xx_i2c.c **** 			else {
 467:LPC17xxLib/src/lpc17xx_i2c.c **** next_stage:
 468:LPC17xxLib/src/lpc17xx_i2c.c **** 				// change direction
 469:LPC17xxLib/src/lpc17xx_i2c.c **** 				i2cdat[tmp].dir = 1;
 470:LPC17xxLib/src/lpc17xx_i2c.c **** 				// Check if any data to receive
 471:LPC17xxLib/src/lpc17xx_i2c.c **** 				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL)){
 472:LPC17xxLib/src/lpc17xx_i2c.c **** 						// check whether if we need to issue an repeat start
 473:LPC17xxLib/src/lpc17xx_i2c.c **** 						if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL)){
 474:LPC17xxLib/src/lpc17xx_i2c.c **** 							// Send out an repeat start command
 475:LPC17xxLib/src/lpc17xx_i2c.c **** 							I2Cx->I2CONSET = I2C_I2CONSET_STA;
 476:LPC17xxLib/src/lpc17xx_i2c.c **** 							I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
 477:LPC17xxLib/src/lpc17xx_i2c.c **** 						}
 478:LPC17xxLib/src/lpc17xx_i2c.c **** 						// Don't need issue an repeat start, just goto send SLA+R
 479:LPC17xxLib/src/lpc17xx_i2c.c **** 						else {
 480:LPC17xxLib/src/lpc17xx_i2c.c **** 							goto send_slar;
 481:LPC17xxLib/src/lpc17xx_i2c.c **** 						}
 482:LPC17xxLib/src/lpc17xx_i2c.c **** 				}
 483:LPC17xxLib/src/lpc17xx_i2c.c **** 				// no more data send, the go to end stage now
 484:LPC17xxLib/src/lpc17xx_i2c.c **** 				else {
 485:LPC17xxLib/src/lpc17xx_i2c.c **** 					// success, goto end stage
 486:LPC17xxLib/src/lpc17xx_i2c.c **** 					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 487:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto end_stage;
 488:LPC17xxLib/src/lpc17xx_i2c.c **** 				}
 489:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 490:LPC17xxLib/src/lpc17xx_i2c.c **** 			break;
 491:LPC17xxLib/src/lpc17xx_i2c.c **** 
 492:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* SLA+W has been transmitted, NACK has been received ----------------------*/
 493:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_SLAW_NACK:
 494:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Data has been transmitted, NACK has been received -----------------------*/
 495:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_DAT_NACK:
 496:LPC17xxLib/src/lpc17xx_i2c.c **** 			// update status
 497:LPC17xxLib/src/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
 498:LPC17xxLib/src/lpc17xx_i2c.c **** 			goto retry;
 499:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Arbitration lost in SLA+R/W or Data bytes -------------------------------*/
 500:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_ARB_LOST:
 501:LPC17xxLib/src/lpc17xx_i2c.c **** 			// update status
 502:LPC17xxLib/src/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
 503:LPC17xxLib/src/lpc17xx_i2c.c **** 		default:
 504:LPC17xxLib/src/lpc17xx_i2c.c **** 			goto retry;
 505:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 506:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 507:LPC17xxLib/src/lpc17xx_i2c.c **** 
 508:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* ----------------------------- RECEIVE PHASE --------------------------*/
 509:LPC17xxLib/src/lpc17xx_i2c.c **** 	else if (i2cdat[tmp].dir == 1){
 510:LPC17xxLib/src/lpc17xx_i2c.c **** 		switch (returnCode){
 511:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* A start/repeat start condition has been transmitted ---------------------*/
 512:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_START:
 513:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_RESTART:
 514:LPC17xxLib/src/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 515:LPC17xxLib/src/lpc17xx_i2c.c **** 			/*
 516:LPC17xxLib/src/lpc17xx_i2c.c **** 			 * If there's any receive data, then start to
 517:LPC17xxLib/src/lpc17xx_i2c.c **** 			 * send SLA+R right now, otherwise check whether if there's
 518:LPC17xxLib/src/lpc17xx_i2c.c **** 			 * any receive data for end of state.
 519:LPC17xxLib/src/lpc17xx_i2c.c **** 			 */
 520:LPC17xxLib/src/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0)){
 521:LPC17xxLib/src/lpc17xx_i2c.c **** send_slar:
 522:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1) | 0x01;
 523:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 524:LPC17xxLib/src/lpc17xx_i2c.c **** 			} else {
 525:LPC17xxLib/src/lpc17xx_i2c.c **** 				// Success, goto end stage
 526:LPC17xxLib/src/lpc17xx_i2c.c **** 				txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 527:LPC17xxLib/src/lpc17xx_i2c.c **** 				goto end_stage;
 528:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 529:LPC17xxLib/src/lpc17xx_i2c.c **** 			break;
 530:LPC17xxLib/src/lpc17xx_i2c.c **** 
 531:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* SLA+R has been transmitted, ACK has been received -----------------*/
 532:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_SLAR_ACK:
 533:LPC17xxLib/src/lpc17xx_i2c.c **** 			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1)) {
 534:LPC17xxLib/src/lpc17xx_i2c.c **** 				/*Data will be received,  ACK will be return*/
 535:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_AA;
 536:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 537:LPC17xxLib/src/lpc17xx_i2c.c **** 			else {
 538:LPC17xxLib/src/lpc17xx_i2c.c **** 				/*Last data will be received,  NACK will be return*/
 539:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
 540:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 541:LPC17xxLib/src/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 542:LPC17xxLib/src/lpc17xx_i2c.c **** 			break;
 543:LPC17xxLib/src/lpc17xx_i2c.c **** 
 544:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Data has been received, ACK has been returned ----------------------*/
 545:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_DAT_ACK:
 546:LPC17xxLib/src/lpc17xx_i2c.c **** 			// Note save data and increase counter first, then check later
 547:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* Save data  */
 548:LPC17xxLib/src/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length)){
 549:LPC17xxLib/src/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 550:LPC17xxLib/src/lpc17xx_i2c.c **** 				txrx_setup->rx_count++;
 551:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 552:LPC17xxLib/src/lpc17xx_i2c.c **** 			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1)) {
 553:LPC17xxLib/src/lpc17xx_i2c.c **** 				/*Data will be received,  ACK will be return*/
 554:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_AA;
 555:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 556:LPC17xxLib/src/lpc17xx_i2c.c **** 			else {
 557:LPC17xxLib/src/lpc17xx_i2c.c **** 				/*Last data will be received,  NACK will be return*/
 558:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
 559:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 560:LPC17xxLib/src/lpc17xx_i2c.c **** 
 561:LPC17xxLib/src/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 579              	 .loc 1 561 0
 580 001c 0822     	 movs r2,#8
 581 001e 237E     	 ldrb r3,[r4,#24]
 582 0020 0023     	 movs r3,#0
 583 0022 2276     	 strb r2,[r4,#24]
 584 0024 627E     	 ldrb r2,[r4,#25]
 585 0026 6376     	 strb r3,[r4,#25]
 586 0028 A27E     	 ldrb r2,[r4,#26]
 587 002a A376     	 strb r3,[r4,#26]
 588 002c E27E     	 ldrb r2,[r4,#27]
 589 002e E376     	 strb r3,[r4,#27]
 562:LPC17xxLib/src/lpc17xx_i2c.c **** 			break;
 590              	 .loc 1 562 0
 591 0030 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 592              	.LVL58:
 593              	.L46:
 434:LPC17xxLib/src/lpc17xx_i2c.c **** 		switch (returnCode)
 594              	 .loc 1 434 0
 595 0032 EE00     	 lsls r6,r5,#3
 596 0034 8119     	 adds r1,r0,r6
 597 0036 4968     	 ldr r1,[r1,#4]
 598 0038 0029     	 cmp r1,#0
 599 003a 40F08480 	 bne .L48
 435:LPC17xxLib/src/lpc17xx_i2c.c **** 		{
 600              	 .loc 1 435 0
 601 003e 202A     	 cmp r2,#32
 602 0040 56D0     	 beq .L50
 603 0042 20D8     	 bhi .L51
 604 0044 102A     	 cmp r2,#16
 605 0046 03D0     	 beq .L52
 606 0048 182A     	 cmp r2,#24
 607 004a 22D0     	 beq .L53
 608 004c 082A     	 cmp r2,#8
 609 004e 52D1     	 bne .L49
 610              	.L52:
 440:LPC17xxLib/src/lpc17xx_i2c.c **** 			/*
 611              	 .loc 1 440 0
 612 0050 2027     	 movs r7,#32
 613 0052 217E     	 ldrb r1,[r4,#24]
 614 0054 0021     	 movs r1,#0
 615 0056 2776     	 strb r7,[r4,#24]
 616 0058 677E     	 ldrb r7,[r4,#25]
 617 005a 6176     	 strb r1,[r4,#25]
 618 005c A77E     	 ldrb r7,[r4,#26]
 619 005e A176     	 strb r1,[r4,#26]
 620 0060 E77E     	 ldrb r7,[r4,#27]
 621 0062 E176     	 strb r1,[r4,#27]
 446:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1);
 622              	 .loc 1 446 0
 623 0064 5F68     	 ldr r7,[r3,#4]
 624 0066 FFB1     	 cbz r7,.L55
 446:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1);
 625              	 .loc 1 446 0 is_stmt 0 discriminator 1
 626 0068 9F68     	 ldr r7,[r3,#8]
 627 006a EFB1     	 cbz r7,.L55
 447:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 628              	 .loc 1 447 0 is_stmt 1
 629 006c 1B68     	 ldr r3,[r3]
 630              	.LVL59:
 631 006e 5B00     	 lsls r3,r3,#1
 632 0070 A360     	 str r3,[r4,#8]
 448:LPC17xxLib/src/lpc17xx_i2c.c **** 			} else {
 633              	 .loc 1 448 0
 634 0072 237E     	 ldrb r3,[r4,#24]
 635 0074 0823     	 movs r3,#8
 636              	.L131:
 476:LPC17xxLib/src/lpc17xx_i2c.c **** 						}
 637              	 .loc 1 476 0
 638 0076 2376     	 strb r3,[r4,#24]
 639 0078 637E     	 ldrb r3,[r4,#25]
 640 007a 6176     	 strb r1,[r4,#25]
 641 007c A37E     	 ldrb r3,[r4,#26]
 642 007e A176     	 strb r1,[r4,#26]
 643 0080 E37E     	 ldrb r3,[r4,#27]
 644 0082 E176     	 strb r1,[r4,#27]
 473:LPC17xxLib/src/lpc17xx_i2c.c **** 							// Send out an repeat start command
 645              	 .loc 1 473 0
 646 0084 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 647              	.LVL60:
 648              	.L51:
 435:LPC17xxLib/src/lpc17xx_i2c.c **** 		{
 649              	 .loc 1 435 0
 650 0086 302A     	 cmp r2,#48
 651 0088 32D0     	 beq .L50
 652 008a 382A     	 cmp r2,#56
 653 008c 51D0     	 beq .L54
 654 008e 282A     	 cmp r2,#40
 655 0090 31D1     	 bne .L49
 656              	.L53:
 459:LPC17xxLib/src/lpc17xx_i2c.c **** 					&& (txrx_setup->tx_data != NULL)){
 657              	 .loc 1 459 0
 658 0092 D968     	 ldr r1,[r3,#12]
 659 0094 9F68     	 ldr r7,[r3,#8]
 660 0096 B942     	 cmp r1,r7
 661 0098 06D2     	 bcs .L55
 460:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
 662              	 .loc 1 460 0
 663 009a 5F68     	 ldr r7,[r3,#4]
 664 009c 27B1     	 cbz r7,.L55
 461:LPC17xxLib/src/lpc17xx_i2c.c **** 				txrx_setup->tx_count++;
 665              	 .loc 1 461 0
 666 009e 7A5C     	 ldrb r2,[r7,r1]
 462:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 667              	 .loc 1 462 0
 668 00a0 0131     	 adds r1,r1,#1
 461:LPC17xxLib/src/lpc17xx_i2c.c **** 				txrx_setup->tx_count++;
 669              	 .loc 1 461 0
 670 00a2 A260     	 str r2,[r4,#8]
 462:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 671              	 .loc 1 462 0
 672 00a4 D960     	 str r1,[r3,#12]
 673 00a6 B9E7     	 b .L72
 674              	.L55:
 675              	.LDL1:
 469:LPC17xxLib/src/lpc17xx_i2c.c **** 				// Check if any data to receive
 676              	 .loc 1 469 0
 677 00a8 3044     	 add r0,r0,r6
 678 00aa 0021     	 movs r1,#0
 679 00ac 0126     	 movs r6,#1
 680 00ae 4171     	 strb r1,[r0,#5]
 681 00b0 0671     	 strb r6,[r0,#4]
 682 00b2 8171     	 strb r1,[r0,#6]
 683 00b4 C171     	 strb r1,[r0,#7]
 471:LPC17xxLib/src/lpc17xx_i2c.c **** 						// check whether if we need to issue an repeat start
 684              	 .loc 1 471 0
 685 00b6 5869     	 ldr r0,[r3,#20]
 686 00b8 0028     	 cmp r0,#0
 687 00ba 5ED0     	 beq .L130
 471:LPC17xxLib/src/lpc17xx_i2c.c **** 						// check whether if we need to issue an repeat start
 688              	 .loc 1 471 0 is_stmt 0 discriminator 1
 689 00bc 1869     	 ldr r0,[r3,#16]
 690 00be 0028     	 cmp r0,#0
 691 00c0 5BD0     	 beq .L130
 473:LPC17xxLib/src/lpc17xx_i2c.c **** 							// Send out an repeat start command
 692              	 .loc 1 473 0 is_stmt 1
 693 00c2 9A68     	 ldr r2,[r3,#8]
 694 00c4 2AB9     	 cbnz r2,.L57
 695              	.L58:
 696              	.LDL2:
 522:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 697              	 .loc 1 522 0
 698 00c6 1B68     	 ldr r3,[r3]
 699              	.LVL61:
 700 00c8 5B00     	 lsls r3,r3,#1
 701 00ca 43F00103 	 orr r3,r3,#1
 702 00ce A360     	 str r3,[r4,#8]
 703 00d0 A4E7     	 b .L72
 704              	.LVL62:
 705              	.L57:
 473:LPC17xxLib/src/lpc17xx_i2c.c **** 							// Send out an repeat start command
 706              	 .loc 1 473 0 discriminator 1
 707 00d2 5A68     	 ldr r2,[r3,#4]
 708 00d4 002A     	 cmp r2,#0
 709 00d6 F6D0     	 beq .L58
 475:LPC17xxLib/src/lpc17xx_i2c.c **** 							I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
 710              	 .loc 1 475 0
 711 00d8 2378     	 ldrb r3,[r4]
 712              	.LVL63:
 713 00da 2023     	 movs r3,#32
 714 00dc 2370     	 strb r3,[r4]
 715 00de 6378     	 ldrb r3,[r4,#1]
 716 00e0 6170     	 strb r1,[r4,#1]
 717 00e2 A378     	 ldrb r3,[r4,#2]
 718 00e4 A170     	 strb r1,[r4,#2]
 719 00e6 E378     	 ldrb r3,[r4,#3]
 720 00e8 E170     	 strb r1,[r4,#3]
 476:LPC17xxLib/src/lpc17xx_i2c.c **** 						}
 721              	 .loc 1 476 0
 722 00ea 237E     	 ldrb r3,[r4,#24]
 723 00ec 0C23     	 movs r3,#12
 724 00ee C2E7     	 b .L131
 725              	.LVL64:
 726              	.L50:
 497:LPC17xxLib/src/lpc17xx_i2c.c **** 			goto retry;
 727              	 .loc 1 497 0
 728 00f0 42F40072 	 orr r2,r2,#512
 729 00f4 5A62     	 str r2,[r3,#36]
 730              	.L49:
 563:LPC17xxLib/src/lpc17xx_i2c.c **** 
 564:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Data has been received, NACK has been return -------------------------*/
 565:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_DAT_NACK:
 566:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* Save the last data */
 567:LPC17xxLib/src/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length)){
 568:LPC17xxLib/src/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 569:LPC17xxLib/src/lpc17xx_i2c.c **** 				txrx_setup->rx_count++;
 570:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 571:LPC17xxLib/src/lpc17xx_i2c.c **** 			// success, go to end stage
 572:LPC17xxLib/src/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 573:LPC17xxLib/src/lpc17xx_i2c.c **** 			goto end_stage;
 574:LPC17xxLib/src/lpc17xx_i2c.c **** 
 575:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* SLA+R has been transmitted, NACK has been received ------------------*/
 576:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_SLAR_NACK:
 577:LPC17xxLib/src/lpc17xx_i2c.c **** 			// update status
 578:LPC17xxLib/src/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
 579:LPC17xxLib/src/lpc17xx_i2c.c **** 			goto retry;
 580:LPC17xxLib/src/lpc17xx_i2c.c **** 
 581:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Arbitration lost ----------------------------------------------------*/
 582:LPC17xxLib/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_ARB_LOST:
 583:LPC17xxLib/src/lpc17xx_i2c.c **** 			// update status
 584:LPC17xxLib/src/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
 585:LPC17xxLib/src/lpc17xx_i2c.c **** 		default:
 586:LPC17xxLib/src/lpc17xx_i2c.c **** retry:
 587:LPC17xxLib/src/lpc17xx_i2c.c **** 			// check if retransmission is available
 588:LPC17xxLib/src/lpc17xx_i2c.c **** 			if (txrx_setup->retransmissions_count < txrx_setup->retransmissions_max){
 731              	 .loc 1 588 0
 732 00f6 196A     	 ldr r1,[r3,#32]
 733 00f8 DA69     	 ldr r2,[r3,#28]
 734 00fa 9142     	 cmp r1,r2
 735 00fc 40D2     	 bcs .L59
 589:LPC17xxLib/src/lpc17xx_i2c.c **** 				// Clear tx count
 590:LPC17xxLib/src/lpc17xx_i2c.c **** 				txrx_setup->tx_count = 0;
 591:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_STA;
 736              	 .loc 1 591 0
 737 00fe 2078     	 ldrb r0,[r4]
 590:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_STA;
 738              	 .loc 1 590 0
 739 0100 0022     	 movs r2,#0
 740              	 .loc 1 591 0
 741 0102 2020     	 movs r0,#32
 590:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_STA;
 742              	 .loc 1 590 0
 743 0104 1A73     	 strb r2,[r3,#12]
 744 0106 5A73     	 strb r2,[r3,#13]
 745 0108 9A73     	 strb r2,[r3,#14]
 746 010a DA73     	 strb r2,[r3,#15]
 747              	 .loc 1 591 0
 748 010c 2070     	 strb r0,[r4]
 749 010e 6078     	 ldrb r0,[r4,#1]
 750 0110 6270     	 strb r2,[r4,#1]
 751 0112 A078     	 ldrb r0,[r4,#2]
 752 0114 A270     	 strb r2,[r4,#2]
 753 0116 E078     	 ldrb r0,[r4,#3]
 754 0118 E270     	 strb r2,[r4,#3]
 592:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
 755              	 .loc 1 592 0
 756 011a 207E     	 ldrb r0,[r4,#24]
 757 011c 0C20     	 movs r0,#12
 758 011e 2076     	 strb r0,[r4,#24]
 759 0120 607E     	 ldrb r0,[r4,#25]
 760 0122 6276     	 strb r2,[r4,#25]
 761 0124 A07E     	 ldrb r0,[r4,#26]
 593:LPC17xxLib/src/lpc17xx_i2c.c **** 				txrx_setup->retransmissions_count++;
 762              	 .loc 1 593 0
 763 0126 0131     	 adds r1,r1,#1
 592:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
 764              	 .loc 1 592 0
 765 0128 A276     	 strb r2,[r4,#26]
 766 012a E07E     	 ldrb r0,[r4,#27]
 767 012c E276     	 strb r2,[r4,#27]
 768              	 .loc 1 593 0
 769 012e 1962     	 str r1,[r3,#32]
 770 0130 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 771              	.LVL65:
 772              	.L54:
 502:LPC17xxLib/src/lpc17xx_i2c.c **** 		default:
 773              	 .loc 1 502 0
 774 0132 83F82420 	 strb r2,[r3,#36]
 775 0136 0122     	 movs r2,#1
 776              	.L129:
 578:LPC17xxLib/src/lpc17xx_i2c.c **** 			goto retry;
 777              	 .loc 1 578 0
 778 0138 83F82520 	 strb r2,[r3,#37]
 779 013c 83F82610 	 strb r1,[r3,#38]
 780 0140 83F82710 	 strb r1,[r3,#39]
 579:LPC17xxLib/src/lpc17xx_i2c.c **** 
 781              	 .loc 1 579 0
 782 0144 D7E7     	 b .L49
 783              	.L48:
 509:LPC17xxLib/src/lpc17xx_i2c.c **** 		switch (returnCode){
 784              	 .loc 1 509 0
 785 0146 0129     	 cmp r1,#1
 786 0148 42D1     	 bne .L45
 510:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* A start/repeat start condition has been transmitted ---------------------*/
 787              	 .loc 1 510 0
 788 014a 402A     	 cmp r2,#64
 789 014c 57D0     	 beq .L70
 790 014e 40D8     	 bhi .L61
 791 0150 102A     	 cmp r2,#16
 792 0152 03D0     	 beq .L62
 793 0154 382A     	 cmp r2,#56
 794 0156 7AD0     	 beq .L63
 795 0158 082A     	 cmp r2,#8
 796 015a CCD1     	 bne .L49
 797              	.L62:
 514:LPC17xxLib/src/lpc17xx_i2c.c **** 			/*
 798              	 .loc 1 514 0
 799 015c 2020     	 movs r0,#32
 800 015e 217E     	 ldrb r1,[r4,#24]
 801 0160 0021     	 movs r1,#0
 802 0162 2076     	 strb r0,[r4,#24]
 803 0164 607E     	 ldrb r0,[r4,#25]
 804 0166 6176     	 strb r1,[r4,#25]
 805 0168 A07E     	 ldrb r0,[r4,#26]
 806 016a A176     	 strb r1,[r4,#26]
 807 016c E07E     	 ldrb r0,[r4,#27]
 808 016e E176     	 strb r1,[r4,#27]
 520:LPC17xxLib/src/lpc17xx_i2c.c **** send_slar:
 809              	 .loc 1 520 0
 810 0170 1969     	 ldr r1,[r3,#16]
 811 0172 11B1     	 cbz r1,.L130
 520:LPC17xxLib/src/lpc17xx_i2c.c **** send_slar:
 812              	 .loc 1 520 0 is_stmt 0 discriminator 1
 813 0174 5969     	 ldr r1,[r3,#20]
 814 0176 0029     	 cmp r1,#0
 815 0178 A5D1     	 bne .L58
 816              	.L130:
 572:LPC17xxLib/src/lpc17xx_i2c.c **** 			goto end_stage;
 817              	 .loc 1 572 0 is_stmt 1
 818 017a 42F48062 	 orr r2,r2,#1024
 819 017e 5A62     	 str r2,[r3,#36]
 820              	.L59:
 594:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 595:LPC17xxLib/src/lpc17xx_i2c.c **** 			// End of stage
 596:LPC17xxLib/src/lpc17xx_i2c.c **** 			else {
 597:LPC17xxLib/src/lpc17xx_i2c.c **** end_stage:
 598:LPC17xxLib/src/lpc17xx_i2c.c **** 				// Disable interrupt
 599:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2C_IntCmd(I2Cx, FALSE);
 821              	 .loc 1 599 0
 822 0180 3A4B     	 ldr r3,.L134+8
 823              	.LVL66:
 824 0182 0021     	 movs r1,#0
 825 0184 2046     	 mov r0,r4
 826 0186 9847     	 blx r3
 827              	.LVL67:
 828              	.LBB78:
 829              	.LBB79:
 154:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 830              	 .loc 1 154 0
 831 0188 2368     	 ldr r3,[r4]
 832 018a 9B06     	 lsls r3,r3,#26
 833 018c 09D5     	 bpl .L74
 834              	.LVL68:
 156:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 835              	 .loc 1 156 0
 836 018e 2022     	 movs r2,#32
 837 0190 237E     	 ldrb r3,[r4,#24]
 838 0192 0023     	 movs r3,#0
 839 0194 2276     	 strb r2,[r4,#24]
 840 0196 627E     	 ldrb r2,[r4,#25]
 841 0198 6376     	 strb r3,[r4,#25]
 842 019a A27E     	 ldrb r2,[r4,#26]
 843 019c A376     	 strb r3,[r4,#26]
 844 019e E27E     	 ldrb r2,[r4,#27]
 845 01a0 E376     	 strb r3,[r4,#27]
 846              	.L74:
 158:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 847              	 .loc 1 158 0
 848 01a2 1022     	 movs r2,#16
 849 01a4 2378     	 ldrb r3,[r4]
 850 01a6 0023     	 movs r3,#0
 851 01a8 2270     	 strb r2,[r4]
 852 01aa 6278     	 ldrb r2,[r4,#1]
 853 01ac 6370     	 strb r3,[r4,#1]
 854 01ae A278     	 ldrb r2,[r4,#2]
 855 01b0 A370     	 strb r3,[r4,#2]
 856 01b2 E278     	 ldrb r2,[r4,#3]
 857 01b4 E370     	 strb r3,[r4,#3]
 159:LPC17xxLib/src/lpc17xx_i2c.c **** }
 858              	 .loc 1 159 0
 859 01b6 227E     	 ldrb r2,[r4,#24]
 860 01b8 0822     	 movs r2,#8
 861 01ba 2276     	 strb r2,[r4,#24]
 862 01bc 627E     	 ldrb r2,[r4,#25]
 863 01be 6376     	 strb r3,[r4,#25]
 864 01c0 A27E     	 ldrb r2,[r4,#26]
 865 01c2 A376     	 strb r3,[r4,#26]
 866 01c4 E27E     	 ldrb r2,[r4,#27]
 867              	.LBE79:
 868              	.LBE78:
 600:LPC17xxLib/src/lpc17xx_i2c.c **** 				// Send stop
 601:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2C_Stop(I2Cx);
 602:LPC17xxLib/src/lpc17xx_i2c.c **** 
 603:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2C_MasterComplete[tmp] = TRUE;
 869              	 .loc 1 603 0
 870 01c6 0122     	 movs r2,#1
 871              	.LBB81:
 872              	.LBB80:
 159:LPC17xxLib/src/lpc17xx_i2c.c **** }
 873              	 .loc 1 159 0
 874 01c8 E376     	 strb r3,[r4,#27]
 875              	.LVL69:
 876              	.LBE80:
 877              	.LBE81:
 878              	 .loc 1 603 0
 879 01ca 294B     	 ldr r3,.L134+12
 880 01cc 43F82520 	 str r2,[r3,r5,lsl#2]
 881              	.LVL70:
 882              	.L45:
 883 01d0 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 884              	.LVL71:
 885              	.L61:
 510:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* A start/repeat start condition has been transmitted ---------------------*/
 886              	 .loc 1 510 0
 887 01d2 502A     	 cmp r2,#80
 888 01d4 08D0     	 beq .L64
 889 01d6 582A     	 cmp r2,#88
 890 01d8 2CD0     	 beq .L65
 891 01da 482A     	 cmp r2,#72
 892 01dc 8BD1     	 bne .L49
 578:LPC17xxLib/src/lpc17xx_i2c.c **** 			goto retry;
 893              	 .loc 1 578 0
 894 01de 83F82420 	 strb r2,[r3,#36]
 895 01e2 0021     	 movs r1,#0
 896 01e4 0222     	 movs r2,#2
 897 01e6 A7E7     	 b .L129
 898              	.L64:
 548:LPC17xxLib/src/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 899              	 .loc 1 548 0
 900 01e8 1969     	 ldr r1,[r3,#16]
 901 01ea 41B1     	 cbz r1,.L70
 548:LPC17xxLib/src/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 902              	 .loc 1 548 0 is_stmt 0 discriminator 1
 903 01ec 9A69     	 ldr r2,[r3,#24]
 904 01ee 5869     	 ldr r0,[r3,#20]
 905 01f0 8242     	 cmp r2,r0
 906 01f2 04D2     	 bcs .L70
 549:LPC17xxLib/src/lpc17xx_i2c.c **** 				txrx_setup->rx_count++;
 907              	 .loc 1 549 0 is_stmt 1
 908 01f4 A068     	 ldr r0,[r4,#8]
 909 01f6 8854     	 strb r0,[r1,r2]
 550:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 910              	 .loc 1 550 0
 911 01f8 9A69     	 ldr r2,[r3,#24]
 912 01fa 0132     	 adds r2,r2,#1
 913 01fc 9A61     	 str r2,[r3,#24]
 914              	.L70:
 552:LPC17xxLib/src/lpc17xx_i2c.c **** 				/*Data will be received,  ACK will be return*/
 915              	 .loc 1 552 0
 916 01fe 9A69     	 ldr r2,[r3,#24]
 917 0200 5B69     	 ldr r3,[r3,#20]
 918              	.LVL72:
 919 0202 013B     	 subs r3,r3,#1
 920 0204 9A42     	 cmp r2,r3
 921 0206 4FF00003 	 mov r3,#0
 922 020a 4FF00402 	 mov r2,#4
 923 020e 08D2     	 bcs .L71
 554:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 924              	 .loc 1 554 0
 925 0210 2178     	 ldrb r1,[r4]
 926 0212 2270     	 strb r2,[r4]
 927 0214 6278     	 ldrb r2,[r4,#1]
 928 0216 6370     	 strb r3,[r4,#1]
 929 0218 A278     	 ldrb r2,[r4,#2]
 930 021a A370     	 strb r3,[r4,#2]
 931 021c E278     	 ldrb r2,[r4,#3]
 932 021e E370     	 strb r3,[r4,#3]
 933 0220 FCE6     	 b .L72
 934              	.L71:
 558:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 935              	 .loc 1 558 0
 936 0222 217E     	 ldrb r1,[r4,#24]
 937 0224 2276     	 strb r2,[r4,#24]
 938 0226 627E     	 ldrb r2,[r4,#25]
 939 0228 6376     	 strb r3,[r4,#25]
 940 022a A27E     	 ldrb r2,[r4,#26]
 941 022c A376     	 strb r3,[r4,#26]
 942 022e E27E     	 ldrb r2,[r4,#27]
 943 0230 E376     	 strb r3,[r4,#27]
 944 0232 F3E6     	 b .L72
 945              	.LVL73:
 946              	.L65:
 567:LPC17xxLib/src/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 947              	 .loc 1 567 0
 948 0234 1969     	 ldr r1,[r3,#16]
 949 0236 41B1     	 cbz r1,.L73
 567:LPC17xxLib/src/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 950              	 .loc 1 567 0 is_stmt 0 discriminator 1
 951 0238 9A69     	 ldr r2,[r3,#24]
 952 023a 5869     	 ldr r0,[r3,#20]
 953 023c 8242     	 cmp r2,r0
 954 023e 04D2     	 bcs .L73
 568:LPC17xxLib/src/lpc17xx_i2c.c **** 				txrx_setup->rx_count++;
 955              	 .loc 1 568 0 is_stmt 1
 956 0240 A068     	 ldr r0,[r4,#8]
 957 0242 8854     	 strb r0,[r1,r2]
 569:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 958              	 .loc 1 569 0
 959 0244 9A69     	 ldr r2,[r3,#24]
 960 0246 0132     	 adds r2,r2,#1
 961 0248 9A61     	 str r2,[r3,#24]
 962              	.L73:
 572:LPC17xxLib/src/lpc17xx_i2c.c **** 			goto end_stage;
 963              	 .loc 1 572 0
 964 024a 5A6A     	 ldr r2,[r3,#36]
 965 024c 95E7     	 b .L130
 966              	.L63:
 584:LPC17xxLib/src/lpc17xx_i2c.c **** 		default:
 967              	 .loc 1 584 0
 968 024e 0020     	 movs r0,#0
 969 0250 83F82420 	 strb r2,[r3,#36]
 970 0254 83F82510 	 strb r1,[r3,#37]
 971 0258 83F82600 	 strb r0,[r3,#38]
 972 025c 83F82700 	 strb r0,[r3,#39]
 973 0260 49E7     	 b .L49
 974              	.L135:
 975 0262 00BF     	 .align 2
 976              	.L134:
 977 0264 00000000 	 .word I2C_getNum
 978 0268 00000000 	 .word .LANCHOR0
 979 026c 00000000 	 .word I2C_IntCmd
 980 0270 00000000 	 .word .LANCHOR1
 981              	 .cfi_endproc
 982              	.LFE65:
 984              	 .section .text.I2C_SlaveHandler,"ax",%progbits
 985              	 .align 1
 986              	 .global I2C_SlaveHandler
 987              	 .syntax unified
 988              	 .thumb
 989              	 .thumb_func
 990              	 .fpu softvfp
 992              	I2C_SlaveHandler:
 993              	.LFB66:
 604:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 605:LPC17xxLib/src/lpc17xx_i2c.c **** 			break;
 606:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 607:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 608:LPC17xxLib/src/lpc17xx_i2c.c **** }
 609:LPC17xxLib/src/lpc17xx_i2c.c **** 
 610:LPC17xxLib/src/lpc17xx_i2c.c **** 
 611:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
 612:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief 		General Slave Interrupt handler for I2C peripheral
 613:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
 614:LPC17xxLib/src/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 615:LPC17xxLib/src/lpc17xx_i2c.c ****  *  			- LPC_I2C1
 616:LPC17xxLib/src/lpc17xx_i2c.c ****  *  			- LPC_I2C2
 617:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		None
 618:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
 619:LPC17xxLib/src/lpc17xx_i2c.c **** void I2C_SlaveHandler (LPC_I2C_TypeDef  *I2Cx)
 620:LPC17xxLib/src/lpc17xx_i2c.c **** {
 994              	 .loc 1 620 0
 995              	 .cfi_startproc
 996              	 
 997              	 
 998              	.LVL74:
 999 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 1000              	 .cfi_def_cfa_offset 24
 1001              	 .cfi_offset 4,-24
 1002              	 .cfi_offset 5,-20
 1003              	 .cfi_offset 6,-16
 1004              	 .cfi_offset 7,-12
 1005              	 .cfi_offset 8,-8
 1006              	 .cfi_offset 14,-4
 621:LPC17xxLib/src/lpc17xx_i2c.c **** 	int32_t tmp;
 622:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint8_t returnCode;
 623:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2C_S_SETUP_Type *txrx_setup;
 624:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint32_t timeout;
 625:LPC17xxLib/src/lpc17xx_i2c.c **** 
 626:LPC17xxLib/src/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 1007              	 .loc 1 626 0
 1008 0004 504B     	 ldr r3,.L185
 620:LPC17xxLib/src/lpc17xx_i2c.c **** 	int32_t tmp;
 1009              	 .loc 1 620 0
 1010 0006 0446     	 mov r4,r0
 1011              	 .loc 1 626 0
 1012 0008 9847     	 blx r3
 1013              	.LVL75:
 627:LPC17xxLib/src/lpc17xx_i2c.c **** 	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
 1014              	 .loc 1 627 0
 1015 000a 504B     	 ldr r3,.L185+4
 626:LPC17xxLib/src/lpc17xx_i2c.c **** 	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
 1016              	 .loc 1 626 0
 1017 000c 0746     	 mov r7,r0
 1018              	.LVL76:
 1019              	 .loc 1 627 0
 1020 000e 53F83050 	 ldr r5,[r3,r0,lsl#3]
 1021              	.LVL77:
 628:LPC17xxLib/src/lpc17xx_i2c.c **** 
 629:LPC17xxLib/src/lpc17xx_i2c.c **** 	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1022              	 .loc 1 629 0
 1023 0012 6368     	 ldr r3,[r4,#4]
 1024 0014 03F0F803 	 and r3,r3,#248
 1025              	.LVL78:
 630:LPC17xxLib/src/lpc17xx_i2c.c **** 	// Save current status
 631:LPC17xxLib/src/lpc17xx_i2c.c **** 	txrx_setup->status = returnCode;
 632:LPC17xxLib/src/lpc17xx_i2c.c **** 	// there's no relevant information
 633:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (returnCode == I2C_I2STAT_NO_INF){
 1026              	 .loc 1 633 0
 1027 0018 F82B     	 cmp r3,#248
 631:LPC17xxLib/src/lpc17xx_i2c.c **** 	// there's no relevant information
 1028              	 .loc 1 631 0
 1029 001a AB61     	 str r3,[r5,#24]
 1030              	 .loc 1 633 0
 1031 001c 0BD1     	 bne .L137
 1032              	.L144:
 634:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 635:LPC17xxLib/src/lpc17xx_i2c.c **** 		return;
 636:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 637:LPC17xxLib/src/lpc17xx_i2c.c **** 
 638:LPC17xxLib/src/lpc17xx_i2c.c **** 
 639:LPC17xxLib/src/lpc17xx_i2c.c **** 	switch (returnCode)
 640:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 641:LPC17xxLib/src/lpc17xx_i2c.c **** 
 642:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* No status information */
 643:LPC17xxLib/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_NO_INF:
 644:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 645:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 646:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
 647:LPC17xxLib/src/lpc17xx_i2c.c **** 
 648:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Reading phase -------------------------------------------------------- */
 649:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Own SLA+R has been received, ACK has been returned */
 650:LPC17xxLib/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_SLAW_ACK:
 651:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* General call address has been received, ACK has been returned */
 652:LPC17xxLib/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_GENCALL_ACK:
 653:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 654:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 655:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
 656:LPC17xxLib/src/lpc17xx_i2c.c **** 
 657:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Previously addressed with own SLA;
 658:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * DATA byte has been received;
 659:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * ACK has been returned */
 660:LPC17xxLib/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_SLA_DAT_ACK:
 661:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* DATA has been received, ACK hasn been return */
 662:LPC17xxLib/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
 663:LPC17xxLib/src/lpc17xx_i2c.c **** 		/*
 664:LPC17xxLib/src/lpc17xx_i2c.c **** 		 * All data bytes that over-flow the specified receive
 665:LPC17xxLib/src/lpc17xx_i2c.c **** 		 * data length, just ignore them.
 666:LPC17xxLib/src/lpc17xx_i2c.c **** 		 */
 667:LPC17xxLib/src/lpc17xx_i2c.c **** 		if ((txrx_setup->rx_count < txrx_setup->rx_length) \
 668:LPC17xxLib/src/lpc17xx_i2c.c **** 				&& (txrx_setup->rx_data != NULL)){
 669:LPC17xxLib/src/lpc17xx_i2c.c **** 			*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (uint8_t)I2Cx->I2DAT;
 670:LPC17xxLib/src/lpc17xx_i2c.c **** 			txrx_setup->rx_count++;
 671:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 672:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 673:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 674:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
 675:LPC17xxLib/src/lpc17xx_i2c.c **** 
 676:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Previously addressed with own SLA;
 677:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * DATA byte has been received;
 678:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * NOT ACK has been returned */
 679:LPC17xxLib/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_SLA_DAT_NACK:
 680:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* DATA has been received, NOT ACK has been returned */
 681:LPC17xxLib/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_NACK:
 682:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1033              	 .loc 1 682 0
 1034 001e 237E     	 ldrb r3,[r4,#24]
 1035              	.LVL79:
 1036 0020 0023     	 movs r3,#0
 1037              	.L184:
 683:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
 684:LPC17xxLib/src/lpc17xx_i2c.c **** 
 685:LPC17xxLib/src/lpc17xx_i2c.c **** 	/*
 686:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * Note that: Return code only let us know a stop condition mixed
 687:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * with a repeat start condition in the same code value.
 688:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * So we should provide a time-out. In case this is really a stop
 689:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * condition, this will return back after time out condition. Otherwise,
 690:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * next session that is slave receive data will be completed.
 691:LPC17xxLib/src/lpc17xx_i2c.c **** 	 */
 692:LPC17xxLib/src/lpc17xx_i2c.c **** 
 693:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* A Stop or a repeat start condition */
 694:LPC17xxLib/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
 695:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Temporally lock the interrupt for timeout condition
 696:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, FALSE);
 697:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 698:LPC17xxLib/src/lpc17xx_i2c.c **** 		// enable time out
 699:LPC17xxLib/src/lpc17xx_i2c.c **** 		timeout = I2C_SLAVE_TIME_OUT;
 700:LPC17xxLib/src/lpc17xx_i2c.c **** 		while(1){
 701:LPC17xxLib/src/lpc17xx_i2c.c **** 			if (I2Cx->I2CONSET & I2C_I2CONSET_SI){
 702:LPC17xxLib/src/lpc17xx_i2c.c **** 				// re-Enable interrupt
 703:LPC17xxLib/src/lpc17xx_i2c.c **** 				I2C_IntCmd(I2Cx, TRUE);
 704:LPC17xxLib/src/lpc17xx_i2c.c **** 				break;
 705:LPC17xxLib/src/lpc17xx_i2c.c **** 			} else {
 706:LPC17xxLib/src/lpc17xx_i2c.c **** 				timeout--;
 707:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (timeout == 0){
 708:LPC17xxLib/src/lpc17xx_i2c.c **** 					// timeout occur, it's really a stop condition
 709:LPC17xxLib/src/lpc17xx_i2c.c **** 					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 710:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto s_int_end;
 711:LPC17xxLib/src/lpc17xx_i2c.c **** 				}
 712:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 713:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 714:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
 715:LPC17xxLib/src/lpc17xx_i2c.c **** 
 716:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Writing phase -------------------------------------------------------- */
 717:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Own SLA+R has been received, ACK has been returned */
 718:LPC17xxLib/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_TX_SLAR_ACK:
 719:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Data has been transmitted, ACK has been received */
 720:LPC17xxLib/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_TX_DAT_ACK:
 721:LPC17xxLib/src/lpc17xx_i2c.c **** 		/*
 722:LPC17xxLib/src/lpc17xx_i2c.c **** 		 * All data bytes that over-flow the specified receive
 723:LPC17xxLib/src/lpc17xx_i2c.c **** 		 * data length, just ignore them.
 724:LPC17xxLib/src/lpc17xx_i2c.c **** 		 */
 725:LPC17xxLib/src/lpc17xx_i2c.c **** 		if ((txrx_setup->tx_count < txrx_setup->tx_length) \
 726:LPC17xxLib/src/lpc17xx_i2c.c **** 				&& (txrx_setup->tx_data != NULL)){
 727:LPC17xxLib/src/lpc17xx_i2c.c **** 			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
 728:LPC17xxLib/src/lpc17xx_i2c.c **** 			txrx_setup->tx_count++;
 729:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 730:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 731:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1038              	 .loc 1 731 0
 1039 0022 0822     	 movs r2,#8
 1040 0024 2276     	 strb r2,[r4,#24]
 1041 0026 627E     	 ldrb r2,[r4,#25]
 1042 0028 6376     	 strb r3,[r4,#25]
 1043 002a A27E     	 ldrb r2,[r4,#26]
 1044 002c A376     	 strb r3,[r4,#26]
 1045 002e E27E     	 ldrb r2,[r4,#27]
 1046 0030 E376     	 strb r3,[r4,#27]
 732:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
 1047              	 .loc 1 732 0
 1048 0032 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1049              	.LVL80:
 1050              	.L137:
 639:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 1051              	 .loc 1 639 0
 1052 0036 902B     	 cmp r3,#144
 1053 0038 5CD0     	 beq .L140
 1054 003a 1DD8     	 bhi .L141
 1055 003c 702B     	 cmp r3,#112
 1056 003e 64D0     	 beq .L152
 1057 0040 15D8     	 bhi .L143
 1058 0042 602B     	 cmp r3,#96
 1059 0044 61D0     	 beq .L152
 1060              	.LVL81:
 1061              	.L139:
 733:LPC17xxLib/src/lpc17xx_i2c.c **** 
 734:LPC17xxLib/src/lpc17xx_i2c.c **** 	/* Data has been transmitted, NACK has been received,
 735:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * that means there's no more data to send, exit now */
 736:LPC17xxLib/src/lpc17xx_i2c.c **** 	/*
 737:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * Note: Don't wait for stop event since in slave transmit mode,
 738:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * since there no proof lets us know when a stop signal has been received
 739:LPC17xxLib/src/lpc17xx_i2c.c **** 	 * on slave side.
 740:LPC17xxLib/src/lpc17xx_i2c.c **** 	 */
 741:LPC17xxLib/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_TX_DAT_NACK:
 742:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 743:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 744:LPC17xxLib/src/lpc17xx_i2c.c **** 		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 745:LPC17xxLib/src/lpc17xx_i2c.c **** 		goto s_int_end;
 746:LPC17xxLib/src/lpc17xx_i2c.c **** 
 747:LPC17xxLib/src/lpc17xx_i2c.c **** 	// Other status must be captured
 748:LPC17xxLib/src/lpc17xx_i2c.c **** 	default:
 749:LPC17xxLib/src/lpc17xx_i2c.c **** s_int_end:
 750:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Disable interrupt
 751:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, FALSE);
 1062              	 .loc 1 751 0
 1063 0046 424B     	 ldr r3,.L185+8
 1064 0048 0021     	 movs r1,#0
 1065 004a 2046     	 mov r0,r4
 1066 004c 9847     	 blx r3
 1067              	.LVL82:
 752:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 1068              	 .loc 1 752 0
 1069 004e 2C22     	 movs r2,#44
 1070 0050 237E     	 ldrb r3,[r4,#24]
 1071 0052 0023     	 movs r3,#0
 1072 0054 2276     	 strb r2,[r4,#24]
 1073 0056 627E     	 ldrb r2,[r4,#25]
 1074 0058 6376     	 strb r3,[r4,#25]
 1075 005a A27E     	 ldrb r2,[r4,#26]
 1076 005c A376     	 strb r3,[r4,#26]
 1077 005e E27E     	 ldrb r2,[r4,#27]
 753:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2C_SlaveComplete[tmp] = TRUE;
 1078              	 .loc 1 753 0
 1079 0060 0122     	 movs r2,#1
 752:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 1080              	 .loc 1 752 0
 1081 0062 E376     	 strb r3,[r4,#27]
 1082              	 .loc 1 753 0
 1083 0064 3B4B     	 ldr r3,.L185+12
 1084 0066 43F82720 	 str r2,[r3,r7,lsl#2]
 1085 006a BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1086              	.LVL83:
 1087              	.L143:
 639:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 1088              	 .loc 1 639 0
 1089 006e 802B     	 cmp r3,#128
 1090 0070 40D0     	 beq .L140
 1091 0072 882B     	 cmp r3,#136
 1092 0074 D3D0     	 beq .L144
 1093 0076 E6E7     	 b .L139
 1094              	.L141:
 1095 0078 A82B     	 cmp r3,#168
 1096 007a 59D0     	 beq .L145
 1097 007c 1CD8     	 bhi .L146
 1098 007e 982B     	 cmp r3,#152
 1099 0080 CDD0     	 beq .L144
 1100 0082 A02B     	 cmp r3,#160
 1101 0084 DFD1     	 bne .L139
 696:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1102              	 .loc 1 696 0
 1103 0086 324E     	 ldr r6,.L185+8
 1104 0088 0021     	 movs r1,#0
 1105 008a 2046     	 mov r0,r4
 1106              	.LVL84:
 1107 008c B047     	 blx r6
 1108              	.LVL85:
 697:LPC17xxLib/src/lpc17xx_i2c.c **** 		// enable time out
 1109              	 .loc 1 697 0
 1110 008e 0822     	 movs r2,#8
 1111 0090 237E     	 ldrb r3,[r4,#24]
 1112 0092 0023     	 movs r3,#0
 1113 0094 2276     	 strb r2,[r4,#24]
 1114 0096 627E     	 ldrb r2,[r4,#25]
 1115 0098 6376     	 strb r3,[r4,#25]
 1116 009a A27E     	 ldrb r2,[r4,#26]
 1117 009c A376     	 strb r3,[r4,#26]
 1118 009e E27E     	 ldrb r2,[r4,#27]
 1119 00a0 E376     	 strb r3,[r4,#27]
 1120              	.LVL86:
 1121 00a2 4FF48032 	 mov r2,#65536
 1122 00a6 3346     	 mov r3,r6
 1123              	.LVL87:
 1124              	.L151:
 701:LPC17xxLib/src/lpc17xx_i2c.c **** 				// re-Enable interrupt
 1125              	 .loc 1 701 0
 1126 00a8 2168     	 ldr r1,[r4]
 1127 00aa 0907     	 lsls r1,r1,#28
 1128 00ac 39D5     	 bpl .L150
 703:LPC17xxLib/src/lpc17xx_i2c.c **** 				break;
 1129              	 .loc 1 703 0
 1130 00ae 2046     	 mov r0,r4
 1131              	.LVL88:
 754:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
 755:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 756:LPC17xxLib/src/lpc17xx_i2c.c **** }
 1132              	 .loc 1 756 0
 1133 00b0 BDE8F041 	 pop {r4,r5,r6,r7,r8,lr}
 1134              	 .cfi_remember_state
 1135              	 .cfi_restore 14
 1136              	 .cfi_restore 8
 1137              	 .cfi_restore 7
 1138              	 .cfi_restore 6
 1139              	 .cfi_restore 5
 1140              	 .cfi_restore 4
 1141              	 .cfi_def_cfa_offset 0
 1142              	.LVL89:
 703:LPC17xxLib/src/lpc17xx_i2c.c **** 				break;
 1143              	 .loc 1 703 0
 1144 00b4 0121     	 movs r1,#1
 1145 00b6 1847     	 bx r3
 1146              	.LVL90:
 1147              	.L146:
 1148              	 .cfi_restore_state
 639:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 1149              	 .loc 1 639 0
 1150 00b8 B82B     	 cmp r3,#184
 1151 00ba 39D0     	 beq .L145
 1152 00bc C02B     	 cmp r3,#192
 1153 00be C2D1     	 bne .L139
 742:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1154              	 .loc 1 742 0
 1155 00c0 0422     	 movs r2,#4
 1156 00c2 2378     	 ldrb r3,[r4]
 1157              	.LVL91:
 1158 00c4 0023     	 movs r3,#0
 1159 00c6 2270     	 strb r2,[r4]
 1160 00c8 6178     	 ldrb r1,[r4,#1]
 1161 00ca 6370     	 strb r3,[r4,#1]
 1162 00cc A178     	 ldrb r1,[r4,#2]
 1163 00ce A370     	 strb r3,[r4,#2]
 1164 00d0 E178     	 ldrb r1,[r4,#3]
 1165 00d2 E370     	 strb r3,[r4,#3]
 743:LPC17xxLib/src/lpc17xx_i2c.c **** 		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 1166              	 .loc 1 743 0
 1167 00d4 217E     	 ldrb r1,[r4,#24]
 1168 00d6 0821     	 movs r1,#8
 1169 00d8 2176     	 strb r1,[r4,#24]
 1170 00da 617E     	 ldrb r1,[r4,#25]
 1171 00dc 6376     	 strb r3,[r4,#25]
 1172 00de A17E     	 ldrb r1,[r4,#26]
 1173 00e0 A376     	 strb r3,[r4,#26]
 1174 00e2 E17E     	 ldrb r1,[r4,#27]
 744:LPC17xxLib/src/lpc17xx_i2c.c **** 		goto s_int_end;
 1175              	 .loc 1 744 0
 1176 00e4 6FF03F01 	 mvn r1,#63
 743:LPC17xxLib/src/lpc17xx_i2c.c **** 		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 1177              	 .loc 1 743 0
 1178 00e8 E376     	 strb r3,[r4,#27]
 744:LPC17xxLib/src/lpc17xx_i2c.c **** 		goto s_int_end;
 1179              	 .loc 1 744 0
 1180 00ea 2976     	 strb r1,[r5,#24]
 1181 00ec 6A76     	 strb r2,[r5,#25]
 1182 00ee AB76     	 strb r3,[r5,#26]
 1183 00f0 EB76     	 strb r3,[r5,#27]
 745:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1184              	 .loc 1 745 0
 1185 00f2 A8E7     	 b .L139
 1186              	.LVL92:
 1187              	.L140:
 667:LPC17xxLib/src/lpc17xx_i2c.c **** 				&& (txrx_setup->rx_data != NULL)){
 1188              	 .loc 1 667 0
 1189 00f4 6B69     	 ldr r3,[r5,#20]
 1190              	.LVL93:
 1191 00f6 2A69     	 ldr r2,[r5,#16]
 1192 00f8 9342     	 cmp r3,r2
 1193 00fa 06D2     	 bcs .L152
 668:LPC17xxLib/src/lpc17xx_i2c.c **** 			*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (uint8_t)I2Cx->I2DAT;
 1194              	 .loc 1 668 0
 1195 00fc EA68     	 ldr r2,[r5,#12]
 1196 00fe 22B1     	 cbz r2,.L152
 669:LPC17xxLib/src/lpc17xx_i2c.c **** 			txrx_setup->rx_count++;
 1197              	 .loc 1 669 0
 1198 0100 A168     	 ldr r1,[r4,#8]
 1199 0102 D154     	 strb r1,[r2,r3]
 670:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 1200              	 .loc 1 670 0
 1201 0104 6B69     	 ldr r3,[r5,#20]
 1202 0106 0133     	 adds r3,r3,#1
 1203 0108 6B61     	 str r3,[r5,#20]
 1204              	.L152:
 730:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1205              	 .loc 1 730 0
 1206 010a 0422     	 movs r2,#4
 1207 010c 2378     	 ldrb r3,[r4]
 1208 010e 0023     	 movs r3,#0
 1209 0110 2270     	 strb r2,[r4]
 1210 0112 6278     	 ldrb r2,[r4,#1]
 1211 0114 6370     	 strb r3,[r4,#1]
 1212 0116 A278     	 ldrb r2,[r4,#2]
 1213 0118 A370     	 strb r3,[r4,#2]
 1214 011a E278     	 ldrb r2,[r4,#3]
 1215 011c E370     	 strb r3,[r4,#3]
 731:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
 1216              	 .loc 1 731 0
 1217 011e 227E     	 ldrb r2,[r4,#24]
 1218 0120 7FE7     	 b .L184
 1219              	.LVL94:
 1220              	.L150:
 707:LPC17xxLib/src/lpc17xx_i2c.c **** 					// timeout occur, it's really a stop condition
 1221              	 .loc 1 707 0
 1222 0122 013A     	 subs r2,r2,#1
 1223              	.LVL95:
 1224 0124 C0D1     	 bne .L151
 709:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto s_int_end;
 1225              	 .loc 1 709 0
 1226 0126 AB69     	 ldr r3,[r5,#24]
 1227 0128 43F48063 	 orr r3,r3,#1024
 1228 012c AB61     	 str r3,[r5,#24]
 710:LPC17xxLib/src/lpc17xx_i2c.c **** 				}
 1229              	 .loc 1 710 0
 1230 012e 8AE7     	 b .L139
 1231              	.LVL96:
 1232              	.L145:
 725:LPC17xxLib/src/lpc17xx_i2c.c **** 				&& (txrx_setup->tx_data != NULL)){
 1233              	 .loc 1 725 0
 1234 0130 AB68     	 ldr r3,[r5,#8]
 1235              	.LVL97:
 1236 0132 6A68     	 ldr r2,[r5,#4]
 1237 0134 9342     	 cmp r3,r2
 1238 0136 E8D2     	 bcs .L152
 726:LPC17xxLib/src/lpc17xx_i2c.c **** 			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
 1239              	 .loc 1 726 0
 1240 0138 2A68     	 ldr r2,[r5]
 1241 013a 002A     	 cmp r2,#0
 1242 013c E5D0     	 beq .L152
 727:LPC17xxLib/src/lpc17xx_i2c.c **** 			txrx_setup->tx_count++;
 1243              	 .loc 1 727 0
 1244 013e D25C     	 ldrb r2,[r2,r3]
 728:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 1245              	 .loc 1 728 0
 1246 0140 0133     	 adds r3,r3,#1
 727:LPC17xxLib/src/lpc17xx_i2c.c **** 			txrx_setup->tx_count++;
 1247              	 .loc 1 727 0
 1248 0142 A260     	 str r2,[r4,#8]
 728:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 1249              	 .loc 1 728 0
 1250 0144 AB60     	 str r3,[r5,#8]
 1251 0146 E0E7     	 b .L152
 1252              	.L186:
 1253              	 .align 2
 1254              	.L185:
 1255 0148 00000000 	 .word I2C_getNum
 1256 014c 00000000 	 .word .LANCHOR0
 1257 0150 00000000 	 .word I2C_IntCmd
 1258 0154 00000000 	 .word .LANCHOR2
 1259              	 .cfi_endproc
 1260              	.LFE66:
 1262              	 .section .text.I2C_MasterTransferData,"ax",%progbits
 1263              	 .align 1
 1264              	 .global I2C_MasterTransferData
 1265              	 .syntax unified
 1266              	 .thumb
 1267              	 .thumb_func
 1268              	 .fpu softvfp
 1270              	I2C_MasterTransferData:
 1271              	.LFB67:
 757:LPC17xxLib/src/lpc17xx_i2c.c **** 
 758:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
 759:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief 		Transmit and Receive data in master mode
 760:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx			I2C peripheral selected, should be:
 761:LPC17xxLib/src/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 762:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 763:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 764:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	TransferCfg		Pointer to a I2C_M_SETUP_Type structure that
 765:LPC17xxLib/src/lpc17xx_i2c.c ****  * 								contains specified information about the
 766:LPC17xxLib/src/lpc17xx_i2c.c ****  * 								configuration for master transfer.
 767:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	Opt				a I2C_TRANSFER_OPT_Type type that selected for
 768:LPC17xxLib/src/lpc17xx_i2c.c ****  * 								interrupt or polling mode.
 769:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		SUCCESS or ERROR
 770:LPC17xxLib/src/lpc17xx_i2c.c ****  *
 771:LPC17xxLib/src/lpc17xx_i2c.c ****  * Note:
 772:LPC17xxLib/src/lpc17xx_i2c.c ****  * - In case of using I2C to transmit data only, either transmit length set to 0
 773:LPC17xxLib/src/lpc17xx_i2c.c ****  * or transmit data pointer set to NULL.
 774:LPC17xxLib/src/lpc17xx_i2c.c ****  * - In case of using I2C to receive data only, either receive length set to 0
 775:LPC17xxLib/src/lpc17xx_i2c.c ****  * or receive data pointer set to NULL.
 776:LPC17xxLib/src/lpc17xx_i2c.c ****  * - In case of using I2C to transmit followed by receive data, transmit length,
 777:LPC17xxLib/src/lpc17xx_i2c.c ****  * transmit data pointer, receive length and receive data pointer should be set
 778:LPC17xxLib/src/lpc17xx_i2c.c ****  * corresponding.
 779:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
 780:LPC17xxLib/src/lpc17xx_i2c.c **** Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
 781:LPC17xxLib/src/lpc17xx_i2c.c **** 								I2C_TRANSFER_OPT_Type Opt)
 782:LPC17xxLib/src/lpc17xx_i2c.c **** {
 1272              	 .loc 1 782 0
 1273              	 .cfi_startproc
 1274              	 
 1275              	 
 1276              	.LVL98:
 1277 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 1278              	 .cfi_def_cfa_offset 32
 1279              	 .cfi_offset 3,-32
 1280              	 .cfi_offset 4,-28
 1281              	 .cfi_offset 5,-24
 1282              	 .cfi_offset 6,-20
 1283              	 .cfi_offset 7,-16
 1284              	 .cfi_offset 8,-12
 1285              	 .cfi_offset 9,-8
 1286              	 .cfi_offset 14,-4
 1287              	 .loc 1 782 0
 1288 0004 0D46     	 mov r5,r1
 1289              	.LVL99:
 783:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint8_t *txdat;
 784:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint8_t *rxdat;
 785:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint32_t CodeStatus;
 786:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint8_t tmp;
 787:LPC17xxLib/src/lpc17xx_i2c.c **** 
 788:LPC17xxLib/src/lpc17xx_i2c.c **** 	// reset all default state
 789:LPC17xxLib/src/lpc17xx_i2c.c **** 	txdat = (uint8_t *) TransferCfg->tx_data;
 790:LPC17xxLib/src/lpc17xx_i2c.c **** 	rxdat = (uint8_t *) TransferCfg->rx_data;
 791:LPC17xxLib/src/lpc17xx_i2c.c **** 	// Reset I2C setup value to default state
 792:LPC17xxLib/src/lpc17xx_i2c.c **** 	TransferCfg->tx_count = 0;
 1290              	 .loc 1 792 0
 1291 0006 0021     	 movs r1,#0
 1292              	.LVL100:
 782:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint8_t *txdat;
 1293              	 .loc 1 782 0
 1294 0008 0446     	 mov r4,r0
 1295              	 .loc 1 792 0
 1296 000a 2973     	 strb r1,[r5,#12]
 1297 000c 6973     	 strb r1,[r5,#13]
 1298 000e A973     	 strb r1,[r5,#14]
 1299 0010 E973     	 strb r1,[r5,#15]
 793:LPC17xxLib/src/lpc17xx_i2c.c **** 	TransferCfg->rx_count = 0;
 1300              	 .loc 1 793 0
 1301 0012 2976     	 strb r1,[r5,#24]
 1302 0014 6976     	 strb r1,[r5,#25]
 1303 0016 A976     	 strb r1,[r5,#26]
 1304 0018 E976     	 strb r1,[r5,#27]
 794:LPC17xxLib/src/lpc17xx_i2c.c **** 	TransferCfg->status = 0;
 1305              	 .loc 1 794 0
 1306 001a 85F82410 	 strb r1,[r5,#36]
 1307 001e 85F82510 	 strb r1,[r5,#37]
 1308 0022 85F82610 	 strb r1,[r5,#38]
 1309 0026 85F82710 	 strb r1,[r5,#39]
 795:LPC17xxLib/src/lpc17xx_i2c.c **** 
 796:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (Opt == I2C_TRANSFER_POLLING){
 1310              	 .loc 1 796 0
 1311 002a 1646     	 mov r6,r2
 1312 002c 002A     	 cmp r2,#0
 1313 002e 40F03F81 	 bne .L188
 797:LPC17xxLib/src/lpc17xx_i2c.c **** 
 798:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* First Start condition -------------------------------------------------------------- */
 799:LPC17xxLib/src/lpc17xx_i2c.c **** 		TransferCfg->retransmissions_count = 0;
 800:LPC17xxLib/src/lpc17xx_i2c.c **** retry:
 801:LPC17xxLib/src/lpc17xx_i2c.c **** 		// reset all default state
 802:LPC17xxLib/src/lpc17xx_i2c.c **** 		txdat = (uint8_t *) TransferCfg->tx_data;
 803:LPC17xxLib/src/lpc17xx_i2c.c **** 		rxdat = (uint8_t *) TransferCfg->rx_data;
 804:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Reset I2C setup value to default state
 805:LPC17xxLib/src/lpc17xx_i2c.c **** 		TransferCfg->tx_count = 0;
 806:LPC17xxLib/src/lpc17xx_i2c.c **** 		TransferCfg->rx_count = 0;
 807:LPC17xxLib/src/lpc17xx_i2c.c **** 		CodeStatus = 0;
 808:LPC17xxLib/src/lpc17xx_i2c.c **** 
 809:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Start command
 810:LPC17xxLib/src/lpc17xx_i2c.c **** 		CodeStatus = I2C_Start(I2Cx);
 811:LPC17xxLib/src/lpc17xx_i2c.c **** 		if ((CodeStatus != I2C_I2STAT_M_TX_START) \
 812:LPC17xxLib/src/lpc17xx_i2c.c **** 				&& (CodeStatus != I2C_I2STAT_M_TX_RESTART)){
 813:LPC17xxLib/src/lpc17xx_i2c.c **** 			TransferCfg->retransmissions_count++;
 814:LPC17xxLib/src/lpc17xx_i2c.c **** 			if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 815:LPC17xxLib/src/lpc17xx_i2c.c **** 				// save status
 816:LPC17xxLib/src/lpc17xx_i2c.c **** 				TransferCfg->status = CodeStatus;
 817:LPC17xxLib/src/lpc17xx_i2c.c **** 				goto error;
 818:LPC17xxLib/src/lpc17xx_i2c.c **** 			} else {
 819:LPC17xxLib/src/lpc17xx_i2c.c **** 				goto retry;
 820:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 821:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 822:LPC17xxLib/src/lpc17xx_i2c.c **** 
 823:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* In case of sending data first --------------------------------------------------- */
 824:LPC17xxLib/src/lpc17xx_i2c.c **** 		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL)){
 825:LPC17xxLib/src/lpc17xx_i2c.c **** 
 826:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* Send slave address + WR direction bit = 0 ----------------------------------- */
 827:LPC17xxLib/src/lpc17xx_i2c.c **** 			CodeStatus = I2C_SendByte(I2Cx, (TransferCfg->sl_addr7bit << 1));
 1314              	 .loc 1 827 0
 1315 0032 B34F     	 ldr r7,.L273
 799:LPC17xxLib/src/lpc17xx_i2c.c **** retry:
 1316              	 .loc 1 799 0
 1317 0034 85F82020 	 strb r2,[r5,#32]
 1318 0038 85F82120 	 strb r2,[r5,#33]
 1319 003c 85F82220 	 strb r2,[r5,#34]
 1320 0040 85F82320 	 strb r2,[r5,#35]
 1321              	.LVL101:
 1322              	.L189:
 1323              	.LBB94:
 1324              	.LBB95:
 133:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1325              	 .loc 1 133 0
 1326 0044 2378     	 ldrb r3,[r4]
 1327 0046 2023     	 movs r3,#32
 1328              	.LBE95:
 1329              	.LBE94:
 802:LPC17xxLib/src/lpc17xx_i2c.c **** 		rxdat = (uint8_t *) TransferCfg->rx_data;
 1330              	 .loc 1 802 0
 1331 0048 D5F80490 	 ldr r9,[r5,#4]
 1332              	.LVL102:
 803:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Reset I2C setup value to default state
 1333              	 .loc 1 803 0
 1334 004c D5F81080 	 ldr r8,[r5,#16]
 1335              	.LVL103:
 805:LPC17xxLib/src/lpc17xx_i2c.c **** 		TransferCfg->rx_count = 0;
 1336              	 .loc 1 805 0
 1337 0050 2E73     	 strb r6,[r5,#12]
 1338 0052 6E73     	 strb r6,[r5,#13]
 1339 0054 AE73     	 strb r6,[r5,#14]
 1340 0056 EE73     	 strb r6,[r5,#15]
 806:LPC17xxLib/src/lpc17xx_i2c.c **** 		CodeStatus = 0;
 1341              	 .loc 1 806 0
 1342 0058 2E76     	 strb r6,[r5,#24]
 1343 005a 6E76     	 strb r6,[r5,#25]
 1344 005c AE76     	 strb r6,[r5,#26]
 1345 005e EE76     	 strb r6,[r5,#27]
 1346              	.LVL104:
 1347              	.LBB97:
 1348              	.LBB96:
 133:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1349              	 .loc 1 133 0
 1350 0060 2370     	 strb r3,[r4]
 1351 0062 6378     	 ldrb r3,[r4,#1]
 1352 0064 6670     	 strb r6,[r4,#1]
 1353 0066 A378     	 ldrb r3,[r4,#2]
 1354 0068 A670     	 strb r6,[r4,#2]
 1355 006a E378     	 ldrb r3,[r4,#3]
 1356 006c E670     	 strb r6,[r4,#3]
 134:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1357              	 .loc 1 134 0
 1358 006e 237E     	 ldrb r3,[r4,#24]
 1359 0070 0823     	 movs r3,#8
 1360 0072 2376     	 strb r3,[r4,#24]
 1361 0074 637E     	 ldrb r3,[r4,#25]
 1362 0076 6676     	 strb r6,[r4,#25]
 1363 0078 A37E     	 ldrb r3,[r4,#26]
 1364 007a A676     	 strb r6,[r4,#26]
 1365 007c E37E     	 ldrb r3,[r4,#27]
 1366 007e E676     	 strb r6,[r4,#27]
 1367              	.L190:
 137:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 1368              	 .loc 1 137 0
 1369 0080 2368     	 ldr r3,[r4]
 1370 0082 1807     	 lsls r0,r3,#28
 1371 0084 FCD5     	 bpl .L190
 138:LPC17xxLib/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1372              	 .loc 1 138 0
 1373 0086 237E     	 ldrb r3,[r4,#24]
 1374 0088 2023     	 movs r3,#32
 1375 008a 2376     	 strb r3,[r4,#24]
 1376 008c 637E     	 ldrb r3,[r4,#25]
 1377 008e 6676     	 strb r6,[r4,#25]
 1378 0090 A37E     	 ldrb r3,[r4,#26]
 1379 0092 A676     	 strb r6,[r4,#26]
 1380 0094 E37E     	 ldrb r3,[r4,#27]
 1381 0096 E676     	 strb r6,[r4,#27]
 139:LPC17xxLib/src/lpc17xx_i2c.c **** }
 1382              	 .loc 1 139 0
 1383 0098 6368     	 ldr r3,[r4,#4]
 1384 009a 03F0F803 	 and r3,r3,#248
 1385              	.LVL105:
 1386              	.LBE96:
 1387              	.LBE97:
 811:LPC17xxLib/src/lpc17xx_i2c.c **** 				&& (CodeStatus != I2C_I2STAT_M_TX_RESTART)){
 1388              	 .loc 1 811 0
 1389 009e 082B     	 cmp r3,#8
 1390 00a0 2AD0     	 beq .L191
 812:LPC17xxLib/src/lpc17xx_i2c.c **** 			TransferCfg->retransmissions_count++;
 1391              	 .loc 1 812 0
 1392 00a2 102B     	 cmp r3,#16
 1393 00a4 28D0     	 beq .L191
 1394              	.LVL106:
 1395              	.L266:
 828:LPC17xxLib/src/lpc17xx_i2c.c **** 			if (CodeStatus != I2C_I2STAT_M_TX_SLAW_ACK){
 829:LPC17xxLib/src/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 830:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 831:LPC17xxLib/src/lpc17xx_i2c.c **** 					// save status
 832:LPC17xxLib/src/lpc17xx_i2c.c **** 					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
 833:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto error;
 834:LPC17xxLib/src/lpc17xx_i2c.c **** 				} else {
 835:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto retry;
 836:LPC17xxLib/src/lpc17xx_i2c.c **** 				}
 837:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 838:LPC17xxLib/src/lpc17xx_i2c.c **** 
 839:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* Send a number of data bytes ---------------------------------------- */
 840:LPC17xxLib/src/lpc17xx_i2c.c **** 			while (TransferCfg->tx_count < TransferCfg->tx_length)
 841:LPC17xxLib/src/lpc17xx_i2c.c **** 			{
 842:LPC17xxLib/src/lpc17xx_i2c.c **** 				CodeStatus = I2C_SendByte(I2Cx, *txdat);
 843:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (CodeStatus != I2C_I2STAT_M_TX_DAT_ACK){
 844:LPC17xxLib/src/lpc17xx_i2c.c **** 					TransferCfg->retransmissions_count++;
 845:LPC17xxLib/src/lpc17xx_i2c.c **** 					if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 846:LPC17xxLib/src/lpc17xx_i2c.c **** 						// save status
 847:LPC17xxLib/src/lpc17xx_i2c.c **** 						TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
 848:LPC17xxLib/src/lpc17xx_i2c.c **** 						goto error;
 849:LPC17xxLib/src/lpc17xx_i2c.c **** 					} else {
 850:LPC17xxLib/src/lpc17xx_i2c.c **** 						goto retry;
 851:LPC17xxLib/src/lpc17xx_i2c.c **** 					}
 852:LPC17xxLib/src/lpc17xx_i2c.c **** 				}
 853:LPC17xxLib/src/lpc17xx_i2c.c **** 
 854:LPC17xxLib/src/lpc17xx_i2c.c **** 				txdat++;
 855:LPC17xxLib/src/lpc17xx_i2c.c **** 				TransferCfg->tx_count++;
 856:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 857:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 858:LPC17xxLib/src/lpc17xx_i2c.c **** 
 859:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Second Start condition (Repeat Start) ------------------------------------------- */
 860:LPC17xxLib/src/lpc17xx_i2c.c **** 		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
 861:LPC17xxLib/src/lpc17xx_i2c.c **** 				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){
 862:LPC17xxLib/src/lpc17xx_i2c.c **** 
 863:LPC17xxLib/src/lpc17xx_i2c.c **** 			CodeStatus = I2C_Start(I2Cx);
 864:LPC17xxLib/src/lpc17xx_i2c.c **** 			if ((CodeStatus != I2C_I2STAT_M_RX_START) \
 865:LPC17xxLib/src/lpc17xx_i2c.c **** 					&& (CodeStatus != I2C_I2STAT_M_RX_RESTART)){
 866:LPC17xxLib/src/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 1396              	 .loc 1 866 0
 1397 00a6 2A6A     	 ldr r2,[r5,#32]
 867:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 1398              	 .loc 1 867 0
 1399 00a8 E969     	 ldr r1,[r5,#28]
 866:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 1400              	 .loc 1 866 0
 1401 00aa 0132     	 adds r2,r2,#1
 1402              	 .loc 1 867 0
 1403 00ac 8A42     	 cmp r2,r1
 866:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 1404              	 .loc 1 866 0
 1405 00ae 2A62     	 str r2,[r5,#32]
 1406              	 .loc 1 867 0
 1407 00b0 C8D9     	 bls .L189
 868:LPC17xxLib/src/lpc17xx_i2c.c **** 					// Update status
 869:LPC17xxLib/src/lpc17xx_i2c.c **** 					TransferCfg->status = CodeStatus;
 1408              	 .loc 1 869 0
 1409 00b2 6B62     	 str r3,[r5,#36]
 1410              	.L193:
 1411              	.LVL107:
 1412              	.LBB98:
 1413              	.LBB99:
 154:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 1414              	 .loc 1 154 0
 1415 00b4 2368     	 ldr r3,[r4]
 1416 00b6 9B06     	 lsls r3,r3,#26
 1417 00b8 09D5     	 bpl .L215
 156:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 1418              	 .loc 1 156 0
 1419 00ba 2022     	 movs r2,#32
 1420 00bc 237E     	 ldrb r3,[r4,#24]
 1421 00be 0023     	 movs r3,#0
 1422 00c0 2276     	 strb r2,[r4,#24]
 1423 00c2 627E     	 ldrb r2,[r4,#25]
 1424 00c4 6376     	 strb r3,[r4,#25]
 1425 00c6 A27E     	 ldrb r2,[r4,#26]
 1426 00c8 A376     	 strb r3,[r4,#26]
 1427 00ca E27E     	 ldrb r2,[r4,#27]
 1428 00cc E376     	 strb r3,[r4,#27]
 1429              	.L215:
 158:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1430              	 .loc 1 158 0
 1431 00ce 2378     	 ldrb r3,[r4]
 1432 00d0 1023     	 movs r3,#16
 1433 00d2 0020     	 movs r0,#0
 1434 00d4 2370     	 strb r3,[r4]
 1435 00d6 6378     	 ldrb r3,[r4,#1]
 1436 00d8 6070     	 strb r0,[r4,#1]
 1437 00da A378     	 ldrb r3,[r4,#2]
 1438 00dc A070     	 strb r0,[r4,#2]
 1439 00de E378     	 ldrb r3,[r4,#3]
 1440 00e0 E070     	 strb r0,[r4,#3]
 159:LPC17xxLib/src/lpc17xx_i2c.c **** }
 1441              	 .loc 1 159 0
 1442 00e2 237E     	 ldrb r3,[r4,#24]
 1443 00e4 0823     	 movs r3,#8
 1444 00e6 2376     	 strb r3,[r4,#24]
 1445 00e8 637E     	 ldrb r3,[r4,#25]
 1446 00ea 6076     	 strb r0,[r4,#25]
 1447 00ec A37E     	 ldrb r3,[r4,#26]
 1448 00ee A076     	 strb r0,[r4,#26]
 1449 00f0 E37E     	 ldrb r3,[r4,#27]
 1450 00f2 E076     	 strb r0,[r4,#27]
 1451 00f4 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 1452              	.LVL108:
 1453              	.L191:
 1454              	.LBE99:
 1455              	.LBE98:
 824:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1456              	 .loc 1 824 0
 1457 00f8 AB68     	 ldr r3,[r5,#8]
 1458 00fa FBB9     	 cbnz r3,.L194
 1459              	.LVL109:
 1460              	.L197:
 860:LPC17xxLib/src/lpc17xx_i2c.c **** 				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){
 1461              	 .loc 1 860 0
 1462 00fc AB68     	 ldr r3,[r5,#8]
 1463 00fe 002B     	 cmp r3,#0
 1464 0100 42D1     	 bne .L195
 1465              	.L196:
 870:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto error;
 871:LPC17xxLib/src/lpc17xx_i2c.c **** 				} else {
 872:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto retry;
 873:LPC17xxLib/src/lpc17xx_i2c.c **** 				}
 874:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 875:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 876:LPC17xxLib/src/lpc17xx_i2c.c **** 
 877:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Then, start reading after sending data -------------------------------------- */
 878:LPC17xxLib/src/lpc17xx_i2c.c **** 		if ((TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){
 1466              	 .loc 1 878 0
 1467 0102 6B69     	 ldr r3,[r5,#20]
 1468 0104 002B     	 cmp r3,#0
 1469 0106 6FD1     	 bne .L203
 1470              	.L206:
 1471              	.LVL110:
 1472              	.LBB100:
 1473              	.LBB101:
 154:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 1474              	 .loc 1 154 0
 1475 0108 2368     	 ldr r3,[r4]
 1476 010a 9A06     	 lsls r2,r3,#26
 1477 010c 00F1C580 	 bmi .L204
 1478              	.L205:
 158:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1479              	 .loc 1 158 0
 1480 0110 1022     	 movs r2,#16
 1481 0112 2378     	 ldrb r3,[r4]
 1482 0114 0023     	 movs r3,#0
 1483 0116 2270     	 strb r2,[r4]
 1484 0118 6278     	 ldrb r2,[r4,#1]
 1485 011a 6370     	 strb r3,[r4,#1]
 1486 011c A278     	 ldrb r2,[r4,#2]
 1487 011e A370     	 strb r3,[r4,#2]
 1488 0120 E278     	 ldrb r2,[r4,#3]
 1489 0122 E370     	 strb r3,[r4,#3]
 159:LPC17xxLib/src/lpc17xx_i2c.c **** }
 1490              	 .loc 1 159 0
 1491 0124 227E     	 ldrb r2,[r4,#24]
 1492 0126 0822     	 movs r2,#8
 1493 0128 2276     	 strb r2,[r4,#24]
 1494 012a 627E     	 ldrb r2,[r4,#25]
 1495 012c 6376     	 strb r3,[r4,#25]
 1496 012e A27E     	 ldrb r2,[r4,#26]
 1497 0130 A376     	 strb r3,[r4,#26]
 1498 0132 E27E     	 ldrb r2,[r4,#27]
 1499 0134 E376     	 strb r3,[r4,#27]
 1500              	.LVL111:
 1501              	.L264:
 1502              	.LBE101:
 1503              	.LBE100:
 879:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* Send slave address + RD direction bit = 1 ----------------------------------- */
 880:LPC17xxLib/src/lpc17xx_i2c.c **** 
 881:LPC17xxLib/src/lpc17xx_i2c.c **** 			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
 882:LPC17xxLib/src/lpc17xx_i2c.c **** 			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK){
 883:LPC17xxLib/src/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 884:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 885:LPC17xxLib/src/lpc17xx_i2c.c **** 					// update status
 886:LPC17xxLib/src/lpc17xx_i2c.c **** 					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
 887:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto error;
 888:LPC17xxLib/src/lpc17xx_i2c.c **** 				} else {
 889:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto retry;
 890:LPC17xxLib/src/lpc17xx_i2c.c **** 				}
 891:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 892:LPC17xxLib/src/lpc17xx_i2c.c **** 
 893:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* Receive a number of data bytes ------------------------------------------------- */
 894:LPC17xxLib/src/lpc17xx_i2c.c **** 			while (TransferCfg->rx_count < TransferCfg->rx_length){
 895:LPC17xxLib/src/lpc17xx_i2c.c **** 
 896:LPC17xxLib/src/lpc17xx_i2c.c **** 				/*
 897:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * Note that: if data length is only one, the master should not
 898:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * issue an ACK signal on bus after reading to avoid of next data frame
 899:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * on slave side
 900:LPC17xxLib/src/lpc17xx_i2c.c **** 				 */
 901:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (TransferCfg->rx_count < (TransferCfg->rx_length - 1)){
 902:LPC17xxLib/src/lpc17xx_i2c.c **** 					// Issue an ACK signal for next data frame
 903:LPC17xxLib/src/lpc17xx_i2c.c **** 					CodeStatus = I2C_GetByte(I2Cx, &tmp, TRUE);
 904:LPC17xxLib/src/lpc17xx_i2c.c **** 					if (CodeStatus != I2C_I2STAT_M_RX_DAT_ACK){
 905:LPC17xxLib/src/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
 906:LPC17xxLib/src/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 907:LPC17xxLib/src/lpc17xx_i2c.c **** 							// update status
 908:LPC17xxLib/src/lpc17xx_i2c.c **** 							TransferCfg->status = CodeStatus;
 909:LPC17xxLib/src/lpc17xx_i2c.c **** 							goto error;
 910:LPC17xxLib/src/lpc17xx_i2c.c **** 						} else {
 911:LPC17xxLib/src/lpc17xx_i2c.c **** 							goto retry;
 912:LPC17xxLib/src/lpc17xx_i2c.c **** 						}
 913:LPC17xxLib/src/lpc17xx_i2c.c **** 					}
 914:LPC17xxLib/src/lpc17xx_i2c.c **** 				} else {
 915:LPC17xxLib/src/lpc17xx_i2c.c **** 					// Do not issue an ACK signal
 916:LPC17xxLib/src/lpc17xx_i2c.c **** 					CodeStatus = I2C_GetByte(I2Cx, &tmp, FALSE);
 917:LPC17xxLib/src/lpc17xx_i2c.c **** 					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK){
 918:LPC17xxLib/src/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
 919:LPC17xxLib/src/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 920:LPC17xxLib/src/lpc17xx_i2c.c **** 							// update status
 921:LPC17xxLib/src/lpc17xx_i2c.c **** 							TransferCfg->status = CodeStatus;
 922:LPC17xxLib/src/lpc17xx_i2c.c **** 							goto error;
 923:LPC17xxLib/src/lpc17xx_i2c.c **** 						} else {
 924:LPC17xxLib/src/lpc17xx_i2c.c **** 							goto retry;
 925:LPC17xxLib/src/lpc17xx_i2c.c **** 						}
 926:LPC17xxLib/src/lpc17xx_i2c.c **** 					}
 927:LPC17xxLib/src/lpc17xx_i2c.c **** 				}
 928:LPC17xxLib/src/lpc17xx_i2c.c **** 				*rxdat++ = tmp;
 929:LPC17xxLib/src/lpc17xx_i2c.c **** 				TransferCfg->rx_count++;
 930:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 931:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
 932:LPC17xxLib/src/lpc17xx_i2c.c **** 
 933:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Send STOP condition ------------------------------------------------- */
 934:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2C_Stop(I2Cx);
 935:LPC17xxLib/src/lpc17xx_i2c.c **** 		return SUCCESS;
 1504              	 .loc 1 935 0
 1505 0136 0120     	 movs r0,#1
 1506 0138 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 1507              	.LVL112:
 1508              	.L194:
 824:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1509              	 .loc 1 824 0 discriminator 1
 1510 013c B9F1000F 	 cmp r9,#0
 1511 0140 DCD0     	 beq .L197
 827:LPC17xxLib/src/lpc17xx_i2c.c **** 			if (CodeStatus != I2C_I2STAT_M_TX_SLAW_ACK){
 1512              	 .loc 1 827 0
 1513 0142 2968     	 ldr r1,[r5]
 1514 0144 2046     	 mov r0,r4
 1515 0146 4900     	 lsls r1,r1,#1
 1516 0148 01F0FE01 	 and r1,r1,#254
 1517 014c B847     	 blx r7
 1518              	.LVL113:
 828:LPC17xxLib/src/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 1519              	 .loc 1 828 0
 1520 014e 1828     	 cmp r0,#24
 1521 0150 0BD1     	 bne .L207
 1522 0152 09F1FF39 	 add r9,r9,#-1
 1523              	.LVL114:
 1524              	.L199:
 840:LPC17xxLib/src/lpc17xx_i2c.c **** 			{
 1525              	 .loc 1 840 0
 1526 0156 EA68     	 ldr r2,[r5,#12]
 1527 0158 AB68     	 ldr r3,[r5,#8]
 1528 015a 9A42     	 cmp r2,r3
 1529 015c CED2     	 bcs .L197
 842:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (CodeStatus != I2C_I2STAT_M_TX_DAT_ACK){
 1530              	 .loc 1 842 0
 1531 015e 19F8011F 	 ldrb r1,[r9,#1]!
 1532              	.LVL115:
 1533 0162 2046     	 mov r0,r4
 1534              	.LVL116:
 1535 0164 B847     	 blx r7
 1536              	.LVL117:
 843:LPC17xxLib/src/lpc17xx_i2c.c **** 					TransferCfg->retransmissions_count++;
 1537              	 .loc 1 843 0
 1538 0166 2828     	 cmp r0,#40
 1539 0168 0AD0     	 beq .L200
 1540              	.LVL118:
 1541              	.L207:
 883:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 1542              	 .loc 1 883 0
 1543 016a 2B6A     	 ldr r3,[r5,#32]
 884:LPC17xxLib/src/lpc17xx_i2c.c **** 					// update status
 1544              	 .loc 1 884 0
 1545 016c EA69     	 ldr r2,[r5,#28]
 883:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 1546              	 .loc 1 883 0
 1547 016e 0133     	 adds r3,r3,#1
 884:LPC17xxLib/src/lpc17xx_i2c.c **** 					// update status
 1548              	 .loc 1 884 0
 1549 0170 9342     	 cmp r3,r2
 883:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 1550              	 .loc 1 883 0
 1551 0172 2B62     	 str r3,[r5,#32]
 884:LPC17xxLib/src/lpc17xx_i2c.c **** 					// update status
 1552              	 .loc 1 884 0
 1553 0174 7FF666AF 	 bls .L189
 886:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto error;
 1554              	 .loc 1 886 0
 1555 0178 40F40070 	 orr r0,r0,#512
 1556              	.LVL119:
 1557 017c 6862     	 str r0,[r5,#36]
 887:LPC17xxLib/src/lpc17xx_i2c.c **** 				} else {
 1558              	 .loc 1 887 0
 1559 017e 99E7     	 b .L193
 1560              	.LVL120:
 1561              	.L200:
 855:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 1562              	 .loc 1 855 0
 1563 0180 EB68     	 ldr r3,[r5,#12]
 1564 0182 0133     	 adds r3,r3,#1
 1565 0184 EB60     	 str r3,[r5,#12]
 1566 0186 E6E7     	 b .L199
 1567              	.LVL121:
 1568              	.L195:
 860:LPC17xxLib/src/lpc17xx_i2c.c **** 				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){
 1569              	 .loc 1 860 0 discriminator 1
 1570 0188 6B68     	 ldr r3,[r5,#4]
 1571 018a 002B     	 cmp r3,#0
 1572 018c B9D0     	 beq .L196
 861:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1573              	 .loc 1 861 0
 1574 018e 6B69     	 ldr r3,[r5,#20]
 1575 0190 002B     	 cmp r3,#0
 1576 0192 B6D0     	 beq .L196
 861:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1577              	 .loc 1 861 0 is_stmt 0 discriminator 1
 1578 0194 2B69     	 ldr r3,[r5,#16]
 1579 0196 002B     	 cmp r3,#0
 1580 0198 B3D0     	 beq .L196
 1581              	.LVL122:
 1582              	.LBB103:
 1583              	.LBB104:
 133:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1584              	 .loc 1 133 0 is_stmt 1
 1585 019a 2378     	 ldrb r3,[r4]
 1586 019c 2023     	 movs r3,#32
 1587 019e 2370     	 strb r3,[r4]
 1588 01a0 6378     	 ldrb r3,[r4,#1]
 1589 01a2 6670     	 strb r6,[r4,#1]
 1590 01a4 A378     	 ldrb r3,[r4,#2]
 1591 01a6 A670     	 strb r6,[r4,#2]
 1592 01a8 E378     	 ldrb r3,[r4,#3]
 1593 01aa E670     	 strb r6,[r4,#3]
 134:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1594              	 .loc 1 134 0
 1595 01ac 237E     	 ldrb r3,[r4,#24]
 1596 01ae 0823     	 movs r3,#8
 1597 01b0 2376     	 strb r3,[r4,#24]
 1598 01b2 637E     	 ldrb r3,[r4,#25]
 1599 01b4 6676     	 strb r6,[r4,#25]
 1600 01b6 A37E     	 ldrb r3,[r4,#26]
 1601 01b8 A676     	 strb r6,[r4,#26]
 1602 01ba E37E     	 ldrb r3,[r4,#27]
 1603 01bc E676     	 strb r6,[r4,#27]
 1604              	.L202:
 137:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 1605              	 .loc 1 137 0
 1606 01be 2368     	 ldr r3,[r4]
 1607 01c0 1907     	 lsls r1,r3,#28
 1608 01c2 FCD5     	 bpl .L202
 138:LPC17xxLib/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1609              	 .loc 1 138 0
 1610 01c4 237E     	 ldrb r3,[r4,#24]
 1611 01c6 2023     	 movs r3,#32
 1612 01c8 2376     	 strb r3,[r4,#24]
 1613 01ca 637E     	 ldrb r3,[r4,#25]
 1614 01cc 6676     	 strb r6,[r4,#25]
 1615 01ce A37E     	 ldrb r3,[r4,#26]
 1616 01d0 A676     	 strb r6,[r4,#26]
 1617 01d2 E37E     	 ldrb r3,[r4,#27]
 1618 01d4 E676     	 strb r6,[r4,#27]
 139:LPC17xxLib/src/lpc17xx_i2c.c **** }
 1619              	 .loc 1 139 0
 1620 01d6 6368     	 ldr r3,[r4,#4]
 1621 01d8 03F0F803 	 and r3,r3,#248
 1622              	.LVL123:
 1623              	.LBE104:
 1624              	.LBE103:
 864:LPC17xxLib/src/lpc17xx_i2c.c **** 					&& (CodeStatus != I2C_I2STAT_M_RX_RESTART)){
 1625              	 .loc 1 864 0
 1626 01dc 082B     	 cmp r3,#8
 1627 01de 90D0     	 beq .L196
 865:LPC17xxLib/src/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 1628              	 .loc 1 865 0
 1629 01e0 102B     	 cmp r3,#16
 1630 01e2 7FF460AF 	 bne .L266
 1631 01e6 8CE7     	 b .L196
 1632              	.L203:
 878:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* Send slave address + RD direction bit = 1 ----------------------------------- */
 1633              	 .loc 1 878 0 discriminator 1
 1634 01e8 2B69     	 ldr r3,[r5,#16]
 1635 01ea 002B     	 cmp r3,#0
 1636 01ec 8CD0     	 beq .L206
 881:LPC17xxLib/src/lpc17xx_i2c.c **** 			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK){
 1637              	 .loc 1 881 0
 1638 01ee 2968     	 ldr r1,[r5]
 1639 01f0 2046     	 mov r0,r4
 1640 01f2 4900     	 lsls r1,r1,#1
 1641 01f4 41F00101 	 orr r1,r1,#1
 1642 01f8 C9B2     	 uxtb r1,r1
 1643 01fa B847     	 blx r7
 1644              	.LVL124:
 882:LPC17xxLib/src/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 1645              	 .loc 1 882 0
 1646 01fc 4028     	 cmp r0,#64
 1647 01fe B4D1     	 bne .L207
 1648 0200 0421     	 movs r1,#4
 1649              	.LBB105:
 1650              	.LBB106:
 205:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1651              	 .loc 1 205 0
 1652 0202 0820     	 movs r0,#8
 1653              	.LVL125:
 1654              	.L208:
 1655              	.LBE106:
 1656              	.LBE105:
 894:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1657              	 .loc 1 894 0
 1658 0204 AA69     	 ldr r2,[r5,#24]
 1659 0206 6B69     	 ldr r3,[r5,#20]
 1660 0208 9A42     	 cmp r2,r3
 1661 020a BFF47DAF 	 bcs .L206
 901:LPC17xxLib/src/lpc17xx_i2c.c **** 					// Issue an ACK signal for next data frame
 1662              	 .loc 1 901 0
 1663 020e 013B     	 subs r3,r3,#1
 1664 0210 9A42     	 cmp r2,r3
 1665 0212 22D2     	 bcs .L209
 1666              	.LVL126:
 1667              	.LBB108:
 1668              	.LBB109:
 199:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 1669              	 .loc 1 199 0
 1670 0214 2378     	 ldrb r3,[r4]
 1671 0216 2170     	 strb r1,[r4]
 1672 0218 6378     	 ldrb r3,[r4,#1]
 1673 021a 6670     	 strb r6,[r4,#1]
 1674 021c A378     	 ldrb r3,[r4,#2]
 1675 021e A670     	 strb r6,[r4,#2]
 1676 0220 E378     	 ldrb r3,[r4,#3]
 1677 0222 E670     	 strb r6,[r4,#3]
 205:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1678              	 .loc 1 205 0
 1679 0224 237E     	 ldrb r3,[r4,#24]
 1680 0226 2076     	 strb r0,[r4,#24]
 1681 0228 637E     	 ldrb r3,[r4,#25]
 1682 022a 6676     	 strb r6,[r4,#25]
 1683 022c A37E     	 ldrb r3,[r4,#26]
 1684 022e A676     	 strb r6,[r4,#26]
 1685 0230 E37E     	 ldrb r3,[r4,#27]
 1686 0232 E676     	 strb r6,[r4,#27]
 1687              	.L210:
 207:LPC17xxLib/src/lpc17xx_i2c.c **** 	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 1688              	 .loc 1 207 0
 1689 0234 2368     	 ldr r3,[r4]
 1690 0236 1B07     	 lsls r3,r3,#28
 1691 0238 FCD5     	 bpl .L210
 208:LPC17xxLib/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1692              	 .loc 1 208 0
 1693 023a A368     	 ldr r3,[r4,#8]
 209:LPC17xxLib/src/lpc17xx_i2c.c **** }
 1694              	 .loc 1 209 0
 1695 023c 6268     	 ldr r2,[r4,#4]
 208:LPC17xxLib/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1696              	 .loc 1 208 0
 1697 023e DBB2     	 uxtb r3,r3
 1698              	.LVL127:
 209:LPC17xxLib/src/lpc17xx_i2c.c **** }
 1699              	 .loc 1 209 0
 1700 0240 02F0F802 	 and r2,r2,#248
 1701              	.LVL128:
 1702              	.LBE109:
 1703              	.LBE108:
 904:LPC17xxLib/src/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
 1704              	 .loc 1 904 0
 1705 0244 502A     	 cmp r2,#80
 1706              	.L272:
 917:LPC17xxLib/src/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
 1707              	 .loc 1 917 0
 1708 0246 22D0     	 beq .L211
 918:LPC17xxLib/src/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 1709              	 .loc 1 918 0
 1710 0248 2B6A     	 ldr r3,[r5,#32]
 1711              	.LVL129:
 919:LPC17xxLib/src/lpc17xx_i2c.c **** 							// update status
 1712              	 .loc 1 919 0
 1713 024a E969     	 ldr r1,[r5,#28]
 918:LPC17xxLib/src/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 1714              	 .loc 1 918 0
 1715 024c 0133     	 adds r3,r3,#1
 919:LPC17xxLib/src/lpc17xx_i2c.c **** 							// update status
 1716              	 .loc 1 919 0
 1717 024e 8B42     	 cmp r3,r1
 918:LPC17xxLib/src/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 1718              	 .loc 1 918 0
 1719 0250 2B62     	 str r3,[r5,#32]
 919:LPC17xxLib/src/lpc17xx_i2c.c **** 							// update status
 1720              	 .loc 1 919 0
 1721 0252 7FF6F7AE 	 bls .L189
 921:LPC17xxLib/src/lpc17xx_i2c.c **** 							goto error;
 1722              	 .loc 1 921 0
 1723 0256 6A62     	 str r2,[r5,#36]
 922:LPC17xxLib/src/lpc17xx_i2c.c **** 						} else {
 1724              	 .loc 1 922 0
 1725 0258 2CE7     	 b .L193
 1726              	.L209:
 1727              	.LVL130:
 1728              	.LBB110:
 1729              	.LBB107:
 203:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 1730              	 .loc 1 203 0
 1731 025a 237E     	 ldrb r3,[r4,#24]
 1732 025c 2176     	 strb r1,[r4,#24]
 1733 025e 637E     	 ldrb r3,[r4,#25]
 1734 0260 6676     	 strb r6,[r4,#25]
 1735 0262 A37E     	 ldrb r3,[r4,#26]
 1736 0264 A676     	 strb r6,[r4,#26]
 1737 0266 E37E     	 ldrb r3,[r4,#27]
 1738 0268 E676     	 strb r6,[r4,#27]
 205:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1739              	 .loc 1 205 0
 1740 026a 237E     	 ldrb r3,[r4,#24]
 1741 026c 2076     	 strb r0,[r4,#24]
 1742 026e 637E     	 ldrb r3,[r4,#25]
 1743 0270 6676     	 strb r6,[r4,#25]
 1744 0272 A37E     	 ldrb r3,[r4,#26]
 1745 0274 A676     	 strb r6,[r4,#26]
 1746 0276 E37E     	 ldrb r3,[r4,#27]
 1747 0278 E676     	 strb r6,[r4,#27]
 1748              	.L212:
 207:LPC17xxLib/src/lpc17xx_i2c.c **** 	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 1749              	 .loc 1 207 0
 1750 027a 2368     	 ldr r3,[r4]
 1751 027c 1A07     	 lsls r2,r3,#28
 1752 027e FCD5     	 bpl .L212
 208:LPC17xxLib/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1753              	 .loc 1 208 0
 1754 0280 A368     	 ldr r3,[r4,#8]
 209:LPC17xxLib/src/lpc17xx_i2c.c **** }
 1755              	 .loc 1 209 0
 1756 0282 6268     	 ldr r2,[r4,#4]
 208:LPC17xxLib/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1757              	 .loc 1 208 0
 1758 0284 DBB2     	 uxtb r3,r3
 1759              	.LVL131:
 209:LPC17xxLib/src/lpc17xx_i2c.c **** }
 1760              	 .loc 1 209 0
 1761 0286 02F0F802 	 and r2,r2,#248
 1762              	.LVL132:
 1763              	.LBE107:
 1764              	.LBE110:
 917:LPC17xxLib/src/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
 1765              	 .loc 1 917 0
 1766 028a 582A     	 cmp r2,#88
 1767 028c DBE7     	 b .L272
 1768              	.L211:
 928:LPC17xxLib/src/lpc17xx_i2c.c **** 				TransferCfg->rx_count++;
 1769              	 .loc 1 928 0
 1770 028e 08F8013B 	 strb r3,[r8],#1
 1771              	.LVL133:
 929:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
 1772              	 .loc 1 929 0
 1773 0292 AB69     	 ldr r3,[r5,#24]
 1774              	.LVL134:
 1775 0294 0133     	 adds r3,r3,#1
 1776 0296 AB61     	 str r3,[r5,#24]
 1777              	.LVL135:
 1778 0298 B4E7     	 b .L208
 1779              	.LVL136:
 1780              	.L204:
 1781              	.LBB111:
 1782              	.LBB102:
 156:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 1783              	 .loc 1 156 0
 1784 029a 2022     	 movs r2,#32
 1785 029c 237E     	 ldrb r3,[r4,#24]
 1786 029e 0023     	 movs r3,#0
 1787 02a0 2276     	 strb r2,[r4,#24]
 1788 02a2 627E     	 ldrb r2,[r4,#25]
 1789 02a4 6376     	 strb r3,[r4,#25]
 1790 02a6 A27E     	 ldrb r2,[r4,#26]
 1791 02a8 A376     	 strb r3,[r4,#26]
 1792 02aa E27E     	 ldrb r2,[r4,#27]
 1793 02ac E376     	 strb r3,[r4,#27]
 1794 02ae 2FE7     	 b .L205
 1795              	.LVL137:
 1796              	.L188:
 1797              	.LBE102:
 1798              	.LBE111:
 936:LPC17xxLib/src/lpc17xx_i2c.c **** 
 937:LPC17xxLib/src/lpc17xx_i2c.c **** error:
 938:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Send stop condition
 939:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2C_Stop(I2Cx);
 940:LPC17xxLib/src/lpc17xx_i2c.c **** 		return ERROR;
 941:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 942:LPC17xxLib/src/lpc17xx_i2c.c **** 
 943:LPC17xxLib/src/lpc17xx_i2c.c **** 	else if (Opt == I2C_TRANSFER_INTERRUPT){
 1799              	 .loc 1 943 0
 1800 02b0 012A     	 cmp r2,#1
 1801 02b2 22D1     	 bne .L216
 944:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Setup tx_rx data, callback and interrupt handler
 945:LPC17xxLib/src/lpc17xx_i2c.c **** 		tmp = I2C_getNum(I2Cx);
 1802              	 .loc 1 945 0
 1803 02b4 134B     	 ldr r3,.L273+4
 1804 02b6 9847     	 blx r3
 1805              	.LVL138:
 946:LPC17xxLib/src/lpc17xx_i2c.c **** 		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
 1806              	 .loc 1 946 0
 1807 02b8 134B     	 ldr r3,.L273+8
 1808 02ba C0B2     	 uxtb r0,r0
 1809 02bc 43F83050 	 str r5,[r3,r0,lsl#3]
 947:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Set direction phase, write first
 948:LPC17xxLib/src/lpc17xx_i2c.c **** 		i2cdat[tmp].dir = 0;
 1810              	 .loc 1 948 0
 1811 02c0 03EBC000 	 add r0,r3,r0,lsl#3
 1812              	.LVL139:
 949:LPC17xxLib/src/lpc17xx_i2c.c **** 
 950:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* First Start condition -------------------------------------------------------------- */
 951:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1813              	 .loc 1 951 0
 1814 02c4 237E     	 ldrb r3,[r4,#24]
 1815 02c6 0823     	 movs r3,#8
 1816 02c8 2376     	 strb r3,[r4,#24]
 1817 02ca 637E     	 ldrb r3,[r4,#25]
 1818 02cc 6176     	 strb r1,[r4,#25]
 1819 02ce A37E     	 ldrb r3,[r4,#26]
 1820 02d0 A176     	 strb r1,[r4,#26]
 1821 02d2 E37E     	 ldrb r3,[r4,#27]
 1822 02d4 E176     	 strb r1,[r4,#27]
 952:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_STA;
 1823              	 .loc 1 952 0
 1824 02d6 2378     	 ldrb r3,[r4]
 1825 02d8 2023     	 movs r3,#32
 1826 02da 2370     	 strb r3,[r4]
 1827 02dc 6378     	 ldrb r3,[r4,#1]
 1828 02de 6170     	 strb r1,[r4,#1]
 1829 02e0 A378     	 ldrb r3,[r4,#2]
 1830 02e2 A170     	 strb r1,[r4,#2]
 1831 02e4 E378     	 ldrb r3,[r4,#3]
 948:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1832              	 .loc 1 948 0
 1833 02e6 0171     	 strb r1,[r0,#4]
 1834 02e8 4171     	 strb r1,[r0,#5]
 1835 02ea 8171     	 strb r1,[r0,#6]
 1836 02ec C171     	 strb r1,[r0,#7]
 1837              	 .loc 1 952 0
 1838 02ee E170     	 strb r1,[r4,#3]
 953:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, TRUE);
 1839              	 .loc 1 953 0
 1840 02f0 2046     	 mov r0,r4
 1841 02f2 1146     	 mov r1,r2
 1842 02f4 054B     	 ldr r3,.L273+12
 1843 02f6 9847     	 blx r3
 1844              	.LVL140:
 1845 02f8 1DE7     	 b .L264
 1846              	.LVL141:
 1847              	.L216:
 954:LPC17xxLib/src/lpc17xx_i2c.c **** 
 955:LPC17xxLib/src/lpc17xx_i2c.c **** 		return (SUCCESS);
 956:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 957:LPC17xxLib/src/lpc17xx_i2c.c **** 
 958:LPC17xxLib/src/lpc17xx_i2c.c **** 	return ERROR;
 1848              	 .loc 1 958 0
 1849 02fa 0846     	 mov r0,r1
 1850              	.LVL142:
 959:LPC17xxLib/src/lpc17xx_i2c.c **** }
 1851              	 .loc 1 959 0
 1852 02fc BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 1853              	.LVL143:
 1854              	.L274:
 1855              	 .align 2
 1856              	.L273:
 1857 0300 00000000 	 .word I2C_SendByte
 1858 0304 00000000 	 .word I2C_getNum
 1859 0308 00000000 	 .word .LANCHOR0
 1860 030c 00000000 	 .word I2C_IntCmd
 1861              	 .cfi_endproc
 1862              	.LFE67:
 1864              	 .section .text.I2C_SlaveTransferData,"ax",%progbits
 1865              	 .align 1
 1866              	 .global I2C_SlaveTransferData
 1867              	 .syntax unified
 1868              	 .thumb
 1869              	 .thumb_func
 1870              	 .fpu softvfp
 1872              	I2C_SlaveTransferData:
 1873              	.LFB68:
 960:LPC17xxLib/src/lpc17xx_i2c.c **** 
 961:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
 962:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief 		Receive and Transmit data in slave mode
 963:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx			I2C peripheral selected, should be
 964:LPC17xxLib/src/lpc17xx_i2c.c ****  *    			- LPC_I2C0
 965:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 966:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 967:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	TransferCfg		Pointer to a I2C_S_SETUP_Type structure that
 968:LPC17xxLib/src/lpc17xx_i2c.c ****  * 								contains specified information about the
 969:LPC17xxLib/src/lpc17xx_i2c.c ****  * 								configuration for master transfer.
 970:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	Opt				I2C_TRANSFER_OPT_Type type that selected for
 971:LPC17xxLib/src/lpc17xx_i2c.c ****  * 								interrupt or polling mode.
 972:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		SUCCESS or ERROR
 973:LPC17xxLib/src/lpc17xx_i2c.c ****  *
 974:LPC17xxLib/src/lpc17xx_i2c.c ****  * Note:
 975:LPC17xxLib/src/lpc17xx_i2c.c ****  * The mode of slave's operation depends on the command sent from master on
 976:LPC17xxLib/src/lpc17xx_i2c.c ****  * the I2C bus. If the master send a SLA+W command, this sub-routine will
 977:LPC17xxLib/src/lpc17xx_i2c.c ****  * use receive data length and receive data pointer. If the master send a SLA+R
 978:LPC17xxLib/src/lpc17xx_i2c.c ****  * command, this sub-routine will use transmit data length and transmit data
 979:LPC17xxLib/src/lpc17xx_i2c.c ****  * pointer.
 980:LPC17xxLib/src/lpc17xx_i2c.c ****  * If the master issue an repeat start command or a stop command, the slave will
 981:LPC17xxLib/src/lpc17xx_i2c.c ****  * enable an time out condition, during time out condition, if there's no activity
 982:LPC17xxLib/src/lpc17xx_i2c.c ****  * on I2C bus, the slave will exit, otherwise (i.e. the master send a SLA+R/W),
 983:LPC17xxLib/src/lpc17xx_i2c.c ****  * the slave then switch to relevant operation mode. The time out should be used
 984:LPC17xxLib/src/lpc17xx_i2c.c ****  * because the return status code can not show difference from stop and repeat
 985:LPC17xxLib/src/lpc17xx_i2c.c ****  * start command in slave operation.
 986:LPC17xxLib/src/lpc17xx_i2c.c ****  * In case of the expected data length from master is greater than data length
 987:LPC17xxLib/src/lpc17xx_i2c.c ****  * that slave can support:
 988:LPC17xxLib/src/lpc17xx_i2c.c ****  * - In case of reading operation (from master): slave will return I2C_I2DAT_IDLE_CHAR
 989:LPC17xxLib/src/lpc17xx_i2c.c ****  * value.
 990:LPC17xxLib/src/lpc17xx_i2c.c ****  * - In case of writing operation (from master): slave will ignore remain data from master.
 991:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
 992:LPC17xxLib/src/lpc17xx_i2c.c **** Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
 993:LPC17xxLib/src/lpc17xx_i2c.c **** 								I2C_TRANSFER_OPT_Type Opt)
 994:LPC17xxLib/src/lpc17xx_i2c.c **** {
 1874              	 .loc 1 994 0
 1875              	 .cfi_startproc
 1876              	 
 1877              	 
 1878              	.LVL144:
 1879 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 1880              	 .cfi_def_cfa_offset 32
 1881              	 .cfi_offset 3,-32
 1882              	 .cfi_offset 4,-28
 1883              	 .cfi_offset 5,-24
 1884              	 .cfi_offset 6,-20
 1885              	 .cfi_offset 7,-16
 1886              	 .cfi_offset 8,-12
 1887              	 .cfi_offset 9,-8
 1888              	 .cfi_offset 14,-4
 995:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint8_t *txdat;
 996:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint8_t *rxdat;
 997:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint32_t CodeStatus;
 998:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint32_t timeout;
 999:LPC17xxLib/src/lpc17xx_i2c.c **** 	int32_t time_en;
1000:LPC17xxLib/src/lpc17xx_i2c.c **** 	int32_t tmp;
1001:LPC17xxLib/src/lpc17xx_i2c.c **** 
1002:LPC17xxLib/src/lpc17xx_i2c.c **** 	// reset all default state
1003:LPC17xxLib/src/lpc17xx_i2c.c **** 	txdat = (uint8_t *) TransferCfg->tx_data;
1004:LPC17xxLib/src/lpc17xx_i2c.c **** 	rxdat = (uint8_t *) TransferCfg->rx_data;
1005:LPC17xxLib/src/lpc17xx_i2c.c **** 	// Reset I2C setup value to default state
1006:LPC17xxLib/src/lpc17xx_i2c.c **** 	TransferCfg->tx_count = 0;
 1889              	 .loc 1 1006 0
 1890 0004 0025     	 movs r5,#0
 994:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint8_t *txdat;
 1891              	 .loc 1 994 0
 1892 0006 0446     	 mov r4,r0
1003:LPC17xxLib/src/lpc17xx_i2c.c **** 	rxdat = (uint8_t *) TransferCfg->rx_data;
 1893              	 .loc 1 1003 0
 1894 0008 D1F800E0 	 ldr lr,[r1]
 1895              	.LVL145:
1004:LPC17xxLib/src/lpc17xx_i2c.c **** 	// Reset I2C setup value to default state
 1896              	 .loc 1 1004 0
 1897 000c D1F80CC0 	 ldr ip,[r1,#12]
 1898              	.LVL146:
 1899              	 .loc 1 1006 0
 1900 0010 0D72     	 strb r5,[r1,#8]
 1901 0012 4D72     	 strb r5,[r1,#9]
 1902 0014 8D72     	 strb r5,[r1,#10]
 1903 0016 CD72     	 strb r5,[r1,#11]
1007:LPC17xxLib/src/lpc17xx_i2c.c **** 	TransferCfg->rx_count = 0;
 1904              	 .loc 1 1007 0
 1905 0018 0D75     	 strb r5,[r1,#20]
 1906 001a 4D75     	 strb r5,[r1,#21]
 1907 001c 8D75     	 strb r5,[r1,#22]
 1908 001e CD75     	 strb r5,[r1,#23]
1008:LPC17xxLib/src/lpc17xx_i2c.c **** 	TransferCfg->status = 0;
 1909              	 .loc 1 1008 0
 1910 0020 0D76     	 strb r5,[r1,#24]
 1911 0022 4D76     	 strb r5,[r1,#25]
 1912 0024 8D76     	 strb r5,[r1,#26]
 1913 0026 CD76     	 strb r5,[r1,#27]
1009:LPC17xxLib/src/lpc17xx_i2c.c **** 
1010:LPC17xxLib/src/lpc17xx_i2c.c **** 
1011:LPC17xxLib/src/lpc17xx_i2c.c **** 	// Polling option
1012:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (Opt == I2C_TRANSFER_POLLING){
 1914              	 .loc 1 1012 0
 1915 0028 1646     	 mov r6,r2
 1916 002a 002A     	 cmp r2,#0
 1917 002c 40F0A980 	 bne .L276
1013:LPC17xxLib/src/lpc17xx_i2c.c **** 
1014:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Set AA bit to ACK command on I2C bus */
1015:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1918              	 .loc 1 1015 0
 1919 0030 0422     	 movs r2,#4
 1920              	.LVL147:
 1921 0032 0378     	 ldrb r3,[r0]
 1922 0034 0270     	 strb r2,[r0]
 1923 0036 4378     	 ldrb r3,[r0,#1]
 1924 0038 4670     	 strb r6,[r0,#1]
 1925 003a 8378     	 ldrb r3,[r0,#2]
 1926 003c 8670     	 strb r6,[r0,#2]
 1927 003e C378     	 ldrb r3,[r0,#3]
 1928 0040 C670     	 strb r6,[r0,#3]
1016:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Clear SI bit to be ready ... */
1017:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
 1929              	 .loc 1 1017 0
 1930 0042 037E     	 ldrb r3,[r0,#24]
 1931 0044 2823     	 movs r3,#40
 1932 0046 0376     	 strb r3,[r0,#24]
 1933 0048 437E     	 ldrb r3,[r0,#25]
 1934 004a 4676     	 strb r6,[r0,#25]
 1935 004c 837E     	 ldrb r3,[r0,#26]
 1936 004e 8676     	 strb r6,[r0,#26]
 1937 0050 C37E     	 ldrb r3,[r0,#27]
1018:LPC17xxLib/src/lpc17xx_i2c.c **** 
1019:LPC17xxLib/src/lpc17xx_i2c.c **** 		time_en = 0;
1020:LPC17xxLib/src/lpc17xx_i2c.c **** 		timeout = 0;
 1938              	 .loc 1 1020 0
 1939 0052 B046     	 mov r8,r6
1017:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1940              	 .loc 1 1017 0
 1941 0054 C676     	 strb r6,[r0,#27]
 1942              	.LVL148:
1021:LPC17xxLib/src/lpc17xx_i2c.c **** 
1022:LPC17xxLib/src/lpc17xx_i2c.c **** 		while (1)
1023:LPC17xxLib/src/lpc17xx_i2c.c **** 		{
1024:LPC17xxLib/src/lpc17xx_i2c.c **** 			/* Check SI flag ready */
1025:LPC17xxLib/src/lpc17xx_i2c.c **** 			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
1026:LPC17xxLib/src/lpc17xx_i2c.c **** 			{
1027:LPC17xxLib/src/lpc17xx_i2c.c **** 				time_en = 0;
1028:LPC17xxLib/src/lpc17xx_i2c.c **** 
1029:LPC17xxLib/src/lpc17xx_i2c.c **** 				switch (CodeStatus = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK))
1030:LPC17xxLib/src/lpc17xx_i2c.c **** 				{
1031:LPC17xxLib/src/lpc17xx_i2c.c **** 
1032:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* No status information */
1033:LPC17xxLib/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_NO_INF:
1034:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1035:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1036:LPC17xxLib/src/lpc17xx_i2c.c **** 					break;
1037:LPC17xxLib/src/lpc17xx_i2c.c **** 
1038:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* Reading phase -------------------------------------------------------- */
1039:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* Own SLA+R has been received, ACK has been returned */
1040:LPC17xxLib/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_SLAW_ACK:
1041:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* General call address has been received, ACK has been returned */
1042:LPC17xxLib/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_GENCALL_ACK:
1043:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1044:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1045:LPC17xxLib/src/lpc17xx_i2c.c **** 					break;
1046:LPC17xxLib/src/lpc17xx_i2c.c **** 
1047:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* Previously addressed with own SLA;
1048:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * DATA byte has been received;
1049:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * ACK has been returned */
1050:LPC17xxLib/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_SLA_DAT_ACK:
1051:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* DATA has been received, ACK hasn been return */
1052:LPC17xxLib/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
1053:LPC17xxLib/src/lpc17xx_i2c.c **** 					/*
1054:LPC17xxLib/src/lpc17xx_i2c.c **** 					 * All data bytes that over-flow the specified receive
1055:LPC17xxLib/src/lpc17xx_i2c.c **** 					 * data length, just ignore them.
1056:LPC17xxLib/src/lpc17xx_i2c.c **** 					 */
1057:LPC17xxLib/src/lpc17xx_i2c.c **** 					if ((TransferCfg->rx_count < TransferCfg->rx_length) \
1058:LPC17xxLib/src/lpc17xx_i2c.c **** 							&& (TransferCfg->rx_data != NULL)){
1059:LPC17xxLib/src/lpc17xx_i2c.c **** 						*rxdat++ = (uint8_t)I2Cx->I2DAT;
1060:LPC17xxLib/src/lpc17xx_i2c.c **** 						TransferCfg->rx_count++;
1061:LPC17xxLib/src/lpc17xx_i2c.c **** 					}
1062:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1063:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1064:LPC17xxLib/src/lpc17xx_i2c.c **** 					break;
1065:LPC17xxLib/src/lpc17xx_i2c.c **** 
1066:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* Previously addressed with own SLA;
1067:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * DATA byte has been received;
1068:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * NOT ACK has been returned */
1069:LPC17xxLib/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_SLA_DAT_NACK:
1070:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* DATA has been received, NOT ACK has been returned */
1071:LPC17xxLib/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_NACK:
1072:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1943              	 .loc 1 1072 0
 1944 0056 3346     	 mov r3,r6
1019:LPC17xxLib/src/lpc17xx_i2c.c **** 		timeout = 0;
 1945              	 .loc 1 1019 0
 1946 0058 3046     	 mov r0,r6
 1947              	.LVL149:
 1948              	 .loc 1 1072 0
 1949 005a 0825     	 movs r5,#8
 1950              	.LVL150:
 1951              	.L277:
1025:LPC17xxLib/src/lpc17xx_i2c.c **** 			{
 1952              	 .loc 1 1025 0
 1953 005c 2668     	 ldr r6,[r4]
 1954 005e 16F00806 	 ands r6,r6,#8
 1955 0062 78D0     	 beq .L278
 1956              	.LVL151:
1029:LPC17xxLib/src/lpc17xx_i2c.c **** 				{
 1957              	 .loc 1 1029 0
 1958 0064 6768     	 ldr r7,[r4,#4]
 1959 0066 07F0F807 	 and r7,r7,#248
 1960              	.LVL152:
 1961 006a 982F     	 cmp r7,#152
 1962 006c 0FD0     	 beq .L331
 1963 006e 34D8     	 bhi .L281
 1964 0070 802F     	 cmp r7,#128
 1965 0072 4CD0     	 beq .L282
 1966 0074 17D8     	 bhi .L283
 1967 0076 602F     	 cmp r7,#96
 1968 0078 01D0     	 beq .L292
 1969 007a 702F     	 cmp r7,#112
 1970              	.L332:
 1971 007c 17D1     	 bne .L279
 1972              	.L292:
1073:LPC17xxLib/src/lpc17xx_i2c.c **** 					break;
1074:LPC17xxLib/src/lpc17xx_i2c.c **** 
1075:LPC17xxLib/src/lpc17xx_i2c.c **** 				/*
1076:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * Note that: Return code only let us know a stop condition mixed
1077:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * with a repeat start condition in the same code value.
1078:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * So we should provide a time-out. In case this is really a stop
1079:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * condition, this will return back after time out condition. Otherwise,
1080:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * next session that is slave receive data will be completed.
1081:LPC17xxLib/src/lpc17xx_i2c.c **** 				 */
1082:LPC17xxLib/src/lpc17xx_i2c.c **** 
1083:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* A Stop or a repeat start condition */
1084:LPC17xxLib/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
1085:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1086:LPC17xxLib/src/lpc17xx_i2c.c **** 					// enable time out
1087:LPC17xxLib/src/lpc17xx_i2c.c **** 					time_en = 1;
1088:LPC17xxLib/src/lpc17xx_i2c.c **** 					timeout = 0;
1089:LPC17xxLib/src/lpc17xx_i2c.c **** 					break;
1090:LPC17xxLib/src/lpc17xx_i2c.c **** 
1091:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* Writing phase -------------------------------------------------------- */
1092:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* Own SLA+R has been received, ACK has been returned */
1093:LPC17xxLib/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_TX_SLAR_ACK:
1094:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* Data has been transmitted, ACK has been received */
1095:LPC17xxLib/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_TX_DAT_ACK:
1096:LPC17xxLib/src/lpc17xx_i2c.c **** 					/*
1097:LPC17xxLib/src/lpc17xx_i2c.c **** 					 * All data bytes that over-flow the specified receive
1098:LPC17xxLib/src/lpc17xx_i2c.c **** 					 * data length, just ignore them.
1099:LPC17xxLib/src/lpc17xx_i2c.c **** 					 */
1100:LPC17xxLib/src/lpc17xx_i2c.c **** 					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
1101:LPC17xxLib/src/lpc17xx_i2c.c **** 							&& (TransferCfg->tx_data != NULL)){
1102:LPC17xxLib/src/lpc17xx_i2c.c **** 						I2Cx->I2DAT = *txdat++;
1103:LPC17xxLib/src/lpc17xx_i2c.c **** 						TransferCfg->tx_count++;
1104:LPC17xxLib/src/lpc17xx_i2c.c **** 					}
1105:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1973              	 .loc 1 1105 0
 1974 007e 2078     	 ldrb r0,[r4]
 1975 0080 2270     	 strb r2,[r4]
 1976 0082 6078     	 ldrb r0,[r4,#1]
 1977 0084 6370     	 strb r3,[r4,#1]
 1978 0086 A078     	 ldrb r0,[r4,#2]
 1979 0088 A370     	 strb r3,[r4,#2]
 1980 008a E078     	 ldrb r0,[r4,#3]
 1981 008c E370     	 strb r3,[r4,#3]
 1982              	.L331:
1106:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1983              	 .loc 1 1106 0
 1984 008e 207E     	 ldrb r0,[r4,#24]
 1985 0090 2576     	 strb r5,[r4,#24]
 1986 0092 607E     	 ldrb r0,[r4,#25]
 1987 0094 6376     	 strb r3,[r4,#25]
 1988 0096 A07E     	 ldrb r0,[r4,#26]
 1989 0098 A376     	 strb r3,[r4,#26]
 1990 009a E07E     	 ldrb r0,[r4,#27]
 1991 009c E376     	 strb r3,[r4,#27]
1027:LPC17xxLib/src/lpc17xx_i2c.c **** 
 1992              	 .loc 1 1027 0
 1993 009e 0020     	 movs r0,#0
1107:LPC17xxLib/src/lpc17xx_i2c.c **** 					break;
 1994              	 .loc 1 1107 0
 1995 00a0 DCE7     	 b .L277
 1996              	.LVL153:
 1997              	.L295:
1108:LPC17xxLib/src/lpc17xx_i2c.c **** 
1109:LPC17xxLib/src/lpc17xx_i2c.c **** 				/* Data has been transmitted, NACK has been received,
1110:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * that means there's no more data to send, exit now */
1111:LPC17xxLib/src/lpc17xx_i2c.c **** 				/*
1112:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * Note: Don't wait for stop event since in slave transmit mode,
1113:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * since there no proof lets us know when a stop signal has been received
1114:LPC17xxLib/src/lpc17xx_i2c.c **** 				 * on slave side.
1115:LPC17xxLib/src/lpc17xx_i2c.c **** 				 */
1116:LPC17xxLib/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_TX_DAT_NACK:
1117:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1118:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1119:LPC17xxLib/src/lpc17xx_i2c.c **** 					// enable time out
1120:LPC17xxLib/src/lpc17xx_i2c.c **** 					time_en = 1;
1121:LPC17xxLib/src/lpc17xx_i2c.c **** 					timeout = 0;
1122:LPC17xxLib/src/lpc17xx_i2c.c **** 					break;
1123:LPC17xxLib/src/lpc17xx_i2c.c **** 
1124:LPC17xxLib/src/lpc17xx_i2c.c **** 				// Other status must be captured
1125:LPC17xxLib/src/lpc17xx_i2c.c **** 				default:
1126:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1127:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto s_error;
1128:LPC17xxLib/src/lpc17xx_i2c.c **** 				}
1129:LPC17xxLib/src/lpc17xx_i2c.c **** 			} else if (time_en){
1130:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (timeout++ > I2C_SLAVE_TIME_OUT){
 1998              	 .loc 1 1130 0
 1999 00a2 C846     	 mov r8,r9
 2000 00a4 DAE7     	 b .L277
 2001              	.LVL154:
 2002              	.L283:
1029:LPC17xxLib/src/lpc17xx_i2c.c **** 				{
 2003              	 .loc 1 1029 0
 2004 00a6 882F     	 cmp r7,#136
 2005 00a8 F1D0     	 beq .L331
 2006 00aa 902F     	 cmp r7,#144
 2007 00ac 2FD0     	 beq .L282
 2008              	.L279:
1126:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto s_error;
 2009              	 .loc 1 1126 0
 2010 00ae 237E     	 ldrb r3,[r4,#24]
 2011 00b0 0823     	 movs r3,#8
 2012 00b2 0020     	 movs r0,#0
 2013 00b4 2376     	 strb r3,[r4,#24]
 2014 00b6 637E     	 ldrb r3,[r4,#25]
 2015 00b8 6076     	 strb r0,[r4,#25]
 2016 00ba A37E     	 ldrb r3,[r4,#26]
 2017 00bc A076     	 strb r0,[r4,#26]
 2018 00be E37E     	 ldrb r3,[r4,#27]
 2019 00c0 E076     	 strb r0,[r4,#27]
 2020              	.LDL3:
1131:LPC17xxLib/src/lpc17xx_i2c.c **** 					// it's really a stop condition, goto end stage
1132:LPC17xxLib/src/lpc17xx_i2c.c **** 					goto s_end_stage;
1133:LPC17xxLib/src/lpc17xx_i2c.c **** 				}
1134:LPC17xxLib/src/lpc17xx_i2c.c **** 			}
1135:LPC17xxLib/src/lpc17xx_i2c.c **** 		}
1136:LPC17xxLib/src/lpc17xx_i2c.c **** 
1137:LPC17xxLib/src/lpc17xx_i2c.c **** s_end_stage:
1138:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Clear AA bit to disable ACK on I2C bus */
1139:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
1140:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Check if there's no error during operation
1141:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Update status
1142:LPC17xxLib/src/lpc17xx_i2c.c **** 		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
1143:LPC17xxLib/src/lpc17xx_i2c.c **** 		return SUCCESS;
1144:LPC17xxLib/src/lpc17xx_i2c.c **** 
1145:LPC17xxLib/src/lpc17xx_i2c.c **** s_error:
1146:LPC17xxLib/src/lpc17xx_i2c.c **** 		/* Clear AA bit to disable ACK on I2C bus */
1147:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
 2021              	 .loc 1 1147 0
 2022 00c2 237E     	 ldrb r3,[r4,#24]
 2023 00c4 0423     	 movs r3,#4
 2024 00c6 2376     	 strb r3,[r4,#24]
 2025 00c8 637E     	 ldrb r3,[r4,#25]
 2026 00ca 6076     	 strb r0,[r4,#25]
 2027 00cc A37E     	 ldrb r3,[r4,#26]
 2028 00ce A076     	 strb r0,[r4,#26]
 2029 00d0 E37E     	 ldrb r3,[r4,#27]
 2030 00d2 E076     	 strb r0,[r4,#27]
1148:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Update status
1149:LPC17xxLib/src/lpc17xx_i2c.c **** 		TransferCfg->status = CodeStatus;
 2031              	 .loc 1 1149 0
 2032 00d4 8F61     	 str r7,[r1,#24]
1150:LPC17xxLib/src/lpc17xx_i2c.c **** 		return ERROR;
 2033              	 .loc 1 1150 0
 2034 00d6 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 2035              	.LVL155:
 2036              	.L281:
1029:LPC17xxLib/src/lpc17xx_i2c.c **** 				{
 2037              	 .loc 1 1029 0
 2038 00da B82F     	 cmp r7,#184
 2039 00dc 04D0     	 beq .L285
 2040 00de 12D8     	 bhi .L286
 2041 00e0 A02F     	 cmp r7,#160
 2042 00e2 2CD0     	 beq .L330
 2043 00e4 A82F     	 cmp r7,#168
 2044 00e6 E2D1     	 bne .L279
 2045              	.L285:
1100:LPC17xxLib/src/lpc17xx_i2c.c **** 							&& (TransferCfg->tx_data != NULL)){
 2046              	 .loc 1 1100 0
 2047 00e8 8868     	 ldr r0,[r1,#8]
 2048 00ea 4E68     	 ldr r6,[r1,#4]
 2049 00ec B042     	 cmp r0,r6
 2050 00ee C6D2     	 bcs .L292
1101:LPC17xxLib/src/lpc17xx_i2c.c **** 						I2Cx->I2DAT = *txdat++;
 2051              	 .loc 1 1101 0
 2052 00f0 0E68     	 ldr r6,[r1]
 2053 00f2 002E     	 cmp r6,#0
 2054 00f4 C3D0     	 beq .L292
 2055              	.LVL156:
1102:LPC17xxLib/src/lpc17xx_i2c.c **** 						TransferCfg->tx_count++;
 2056              	 .loc 1 1102 0
 2057 00f6 9EF80060 	 ldrb r6,[lr]
1103:LPC17xxLib/src/lpc17xx_i2c.c **** 					}
 2058              	 .loc 1 1103 0
 2059 00fa 0130     	 adds r0,r0,#1
1102:LPC17xxLib/src/lpc17xx_i2c.c **** 						TransferCfg->tx_count++;
 2060              	 .loc 1 1102 0
 2061 00fc A660     	 str r6,[r4,#8]
 2062 00fe 0EF1010E 	 add lr,lr,#1
 2063              	.LVL157:
1103:LPC17xxLib/src/lpc17xx_i2c.c **** 					}
 2064              	 .loc 1 1103 0
 2065 0102 8860     	 str r0,[r1,#8]
 2066 0104 BBE7     	 b .L292
 2067              	.L286:
1029:LPC17xxLib/src/lpc17xx_i2c.c **** 				{
 2068              	 .loc 1 1029 0
 2069 0106 C02F     	 cmp r7,#192
 2070 0108 11D0     	 beq .L288
 2071 010a F82F     	 cmp r7,#248
 2072 010c B6E7     	 b .L332
 2073              	.L282:
1057:LPC17xxLib/src/lpc17xx_i2c.c **** 							&& (TransferCfg->rx_data != NULL)){
 2074              	 .loc 1 1057 0
 2075 010e 4E69     	 ldr r6,[r1,#20]
 2076 0110 0869     	 ldr r0,[r1,#16]
 2077 0112 8642     	 cmp r6,r0
 2078 0114 B3D2     	 bcs .L292
1058:LPC17xxLib/src/lpc17xx_i2c.c **** 						*rxdat++ = (uint8_t)I2Cx->I2DAT;
 2079              	 .loc 1 1058 0
 2080 0116 C868     	 ldr r0,[r1,#12]
 2081 0118 0028     	 cmp r0,#0
 2082 011a B0D0     	 beq .L292
 2083              	.LVL158:
1059:LPC17xxLib/src/lpc17xx_i2c.c **** 						TransferCfg->rx_count++;
 2084              	 .loc 1 1059 0
 2085 011c A068     	 ldr r0,[r4,#8]
 2086 011e 0CF1010C 	 add ip,ip,#1
 2087              	.LVL159:
 2088 0122 0CF8010C 	 strb r0,[ip,#-1]
1060:LPC17xxLib/src/lpc17xx_i2c.c **** 					}
 2089              	 .loc 1 1060 0
 2090 0126 4869     	 ldr r0,[r1,#20]
 2091 0128 0130     	 adds r0,r0,#1
 2092 012a 4861     	 str r0,[r1,#20]
 2093 012c A7E7     	 b .L292
 2094              	.L288:
1117:LPC17xxLib/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 2095              	 .loc 1 1117 0
 2096 012e 2078     	 ldrb r0,[r4]
 2097 0130 2270     	 strb r2,[r4]
 2098 0132 6078     	 ldrb r0,[r4,#1]
 2099 0134 6370     	 strb r3,[r4,#1]
 2100 0136 A078     	 ldrb r0,[r4,#2]
 2101 0138 A370     	 strb r3,[r4,#2]
 2102 013a E078     	 ldrb r0,[r4,#3]
 2103 013c E370     	 strb r3,[r4,#3]
 2104              	.L330:
1118:LPC17xxLib/src/lpc17xx_i2c.c **** 					// enable time out
 2105              	 .loc 1 1118 0
 2106 013e 207E     	 ldrb r0,[r4,#24]
 2107 0140 2576     	 strb r5,[r4,#24]
 2108 0142 607E     	 ldrb r0,[r4,#25]
 2109 0144 6376     	 strb r3,[r4,#25]
 2110 0146 A07E     	 ldrb r0,[r4,#26]
 2111 0148 A376     	 strb r3,[r4,#26]
 2112 014a E07E     	 ldrb r0,[r4,#27]
1121:LPC17xxLib/src/lpc17xx_i2c.c **** 					break;
 2113              	 .loc 1 1121 0
 2114 014c 4FF00008 	 mov r8,#0
 2115              	.LVL160:
1118:LPC17xxLib/src/lpc17xx_i2c.c **** 					// enable time out
 2116              	 .loc 1 1118 0
 2117 0150 E376     	 strb r3,[r4,#27]
 2118              	.LVL161:
1120:LPC17xxLib/src/lpc17xx_i2c.c **** 					timeout = 0;
 2119              	 .loc 1 1120 0
 2120 0152 0120     	 movs r0,#1
1122:LPC17xxLib/src/lpc17xx_i2c.c **** 
 2121              	 .loc 1 1122 0
 2122 0154 82E7     	 b .L277
 2123              	.LVL162:
 2124              	.L278:
1129:LPC17xxLib/src/lpc17xx_i2c.c **** 				if (timeout++ > I2C_SLAVE_TIME_OUT){
 2125              	 .loc 1 1129 0
 2126 0156 0028     	 cmp r0,#0
 2127 0158 80D0     	 beq .L277
1130:LPC17xxLib/src/lpc17xx_i2c.c **** 					// it's really a stop condition, goto end stage
 2128              	 .loc 1 1130 0
 2129 015a B8F5803F 	 cmp r8,#65536
 2130 015e 08F10109 	 add r9,r8,#1
 2131              	.LVL163:
 2132 0162 9ED9     	 bls .L295
 2133              	.L294:
1139:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Check if there's no error during operation
 2134              	 .loc 1 1139 0
 2135 0164 237E     	 ldrb r3,[r4,#24]
 2136 0166 0423     	 movs r3,#4
 2137 0168 2376     	 strb r3,[r4,#24]
 2138 016a 637E     	 ldrb r3,[r4,#25]
 2139 016c 6676     	 strb r6,[r4,#25]
 2140 016e A37E     	 ldrb r3,[r4,#26]
 2141 0170 A676     	 strb r6,[r4,#26]
 2142 0172 E37E     	 ldrb r3,[r4,#27]
1142:LPC17xxLib/src/lpc17xx_i2c.c **** 		return SUCCESS;
 2143              	 .loc 1 1142 0
 2144 0174 47F48063 	 orr r3,r7,#1024
1139:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Check if there's no error during operation
 2145              	 .loc 1 1139 0
 2146 0178 E676     	 strb r6,[r4,#27]
1142:LPC17xxLib/src/lpc17xx_i2c.c **** 		return SUCCESS;
 2147              	 .loc 1 1142 0
 2148 017a 8B61     	 str r3,[r1,#24]
 2149              	.LVL164:
 2150              	.L333:
1143:LPC17xxLib/src/lpc17xx_i2c.c **** 
 2151              	 .loc 1 1143 0
 2152 017c 0120     	 movs r0,#1
 2153 017e BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 2154              	.LVL165:
 2155              	.L276:
1151:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
1152:LPC17xxLib/src/lpc17xx_i2c.c **** 
1153:LPC17xxLib/src/lpc17xx_i2c.c **** 	else if (Opt == I2C_TRANSFER_INTERRUPT){
 2156              	 .loc 1 1153 0
 2157 0182 012A     	 cmp r2,#1
 2158 0184 21D1     	 bne .L296
1154:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Setup tx_rx data, callback and interrupt handler
1155:LPC17xxLib/src/lpc17xx_i2c.c **** 		tmp = I2C_getNum(I2Cx);
 2159              	 .loc 1 1155 0
 2160 0186 124B     	 ldr r3,.L334
 2161 0188 9847     	 blx r3
 2162              	.LVL166:
1156:LPC17xxLib/src/lpc17xx_i2c.c **** 		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
 2163              	 .loc 1 1156 0
 2164 018a 124B     	 ldr r3,.L334+4
 2165 018c 43F83010 	 str r1,[r3,r0,lsl#3]
1157:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Set direction phase, read first
1158:LPC17xxLib/src/lpc17xx_i2c.c **** 		i2cdat[tmp].dir = 1;
 2166              	 .loc 1 1158 0
 2167 0190 03EBC000 	 add r0,r3,r0,lsl#3
 2168              	.LVL167:
1159:LPC17xxLib/src/lpc17xx_i2c.c **** 
1160:LPC17xxLib/src/lpc17xx_i2c.c **** 		// Enable AA
1161:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 2169              	 .loc 1 1161 0
 2170 0194 2378     	 ldrb r3,[r4]
 2171 0196 0423     	 movs r3,#4
 2172 0198 2370     	 strb r3,[r4]
 2173 019a 6378     	 ldrb r3,[r4,#1]
 2174 019c 6570     	 strb r5,[r4,#1]
 2175 019e A378     	 ldrb r3,[r4,#2]
 2176 01a0 A570     	 strb r5,[r4,#2]
 2177 01a2 E378     	 ldrb r3,[r4,#3]
 2178 01a4 E570     	 strb r5,[r4,#3]
1162:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 2179              	 .loc 1 1162 0
 2180 01a6 237E     	 ldrb r3,[r4,#24]
 2181 01a8 2823     	 movs r3,#40
 2182 01aa 2376     	 strb r3,[r4,#24]
 2183 01ac 637E     	 ldrb r3,[r4,#25]
 2184 01ae 6576     	 strb r5,[r4,#25]
 2185 01b0 A37E     	 ldrb r3,[r4,#26]
 2186 01b2 A576     	 strb r5,[r4,#26]
 2187 01b4 E37E     	 ldrb r3,[r4,#27]
1158:LPC17xxLib/src/lpc17xx_i2c.c **** 
 2188              	 .loc 1 1158 0
 2189 01b6 0271     	 strb r2,[r0,#4]
 2190 01b8 4571     	 strb r5,[r0,#5]
 2191 01ba 8571     	 strb r5,[r0,#6]
 2192 01bc C571     	 strb r5,[r0,#7]
 2193              	 .loc 1 1162 0
 2194 01be E576     	 strb r5,[r4,#27]
1163:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, TRUE);
 2195              	 .loc 1 1163 0
 2196 01c0 1146     	 mov r1,r2
 2197              	.LVL168:
 2198 01c2 2046     	 mov r0,r4
 2199 01c4 044B     	 ldr r3,.L334+8
 2200 01c6 9847     	 blx r3
 2201              	.LVL169:
 2202 01c8 D8E7     	 b .L333
 2203              	.LVL170:
 2204              	.L296:
1164:LPC17xxLib/src/lpc17xx_i2c.c **** 
1165:LPC17xxLib/src/lpc17xx_i2c.c **** 		return (SUCCESS);
1166:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
1167:LPC17xxLib/src/lpc17xx_i2c.c **** 
1168:LPC17xxLib/src/lpc17xx_i2c.c **** 	return ERROR;
 2205              	 .loc 1 1168 0
 2206 01ca 2846     	 mov r0,r5
 2207              	.LVL171:
1169:LPC17xxLib/src/lpc17xx_i2c.c **** }
 2208              	 .loc 1 1169 0
 2209 01cc BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 2210              	.LVL172:
 2211              	.L335:
 2212              	 .align 2
 2213              	.L334:
 2214 01d0 00000000 	 .word I2C_getNum
 2215 01d4 00000000 	 .word .LANCHOR0
 2216 01d8 00000000 	 .word I2C_IntCmd
 2217              	 .cfi_endproc
 2218              	.LFE68:
 2220              	 .section .text.I2C_SetOwnSlaveAddr,"ax",%progbits
 2221              	 .align 1
 2222              	 .global I2C_SetOwnSlaveAddr
 2223              	 .syntax unified
 2224              	 .thumb
 2225              	 .thumb_func
 2226              	 .fpu softvfp
 2228              	I2C_SetOwnSlaveAddr:
 2229              	.LFB69:
1170:LPC17xxLib/src/lpc17xx_i2c.c **** 
1171:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
1172:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Set Own slave address in I2C peripheral corresponding to
1173:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				parameter specified in OwnSlaveAddrConfigStruct.
1174:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1175:LPC17xxLib/src/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1176:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1177:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1178:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	OwnSlaveAddrConfigStruct	Pointer to a I2C_OWNSLAVEADDR_CFG_Type
1179:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				structure that contains the configuration information for the
1180:LPC17xxLib/src/lpc17xx_i2c.c **** *               specified I2C slave address.
1181:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		None
1182:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
1183:LPC17xxLib/src/lpc17xx_i2c.c **** void I2C_SetOwnSlaveAddr(LPC_I2C_TypeDef *I2Cx, I2C_OWNSLAVEADDR_CFG_Type *OwnSlaveAddrConfigStruct
1184:LPC17xxLib/src/lpc17xx_i2c.c **** {
 2230              	 .loc 1 1184 0
 2231              	 .cfi_startproc
 2232              	 
 2233              	 
 2234              	.LVL173:
1185:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint32_t tmp;
1186:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
1187:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
1188:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));
1189:LPC17xxLib/src/lpc17xx_i2c.c **** 
1190:LPC17xxLib/src/lpc17xx_i2c.c **** 	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
1191:LPC17xxLib/src/lpc17xx_i2c.c **** 			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
 2235              	 .loc 1 1191 0
 2236 0000 8B78     	 ldrb r3,[r1,#2]
1184:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint32_t tmp;
 2237              	 .loc 1 1184 0
 2238 0002 00B5     	 push {lr}
 2239              	 .cfi_def_cfa_offset 4
 2240              	 .cfi_offset 14,-4
 2241              	 .loc 1 1191 0
 2242 0004 03F1FF3E 	 add lr,r3,#-1
1190:LPC17xxLib/src/lpc17xx_i2c.c **** 			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
 2243              	 .loc 1 1190 0
 2244 0008 4A78     	 ldrb r2,[r1,#1]
 2245              	 .loc 1 1191 0
 2246 000a DEF10003 	 rsbs r3,lr,#0
 2247 000e 43EB0E03 	 adc r3,r3,lr
 2248 0012 43EA4203 	 orr r3,r3,r2,lsl#1
1192:LPC17xxLib/src/lpc17xx_i2c.c **** 	switch (OwnSlaveAddrConfigStruct->SlaveAddrChannel)
 2249              	 .loc 1 1192 0
 2250 0016 0A78     	 ldrb r2,[r1]
1190:LPC17xxLib/src/lpc17xx_i2c.c **** 			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
 2251              	 .loc 1 1190 0
 2252 0018 DBB2     	 uxtb r3,r3
 2253              	.LVL174:
 2254              	 .loc 1 1192 0
 2255 001a 032A     	 cmp r2,#3
 2256 001c 08D8     	 bhi .L336
 2257 001e DFE802F0 	 tbb [pc,r2]
 2258              	.L339:
 2259 0022 02       	 .byte (.L338-.L339)/2
 2260 0023 09       	 .byte (.L340-.L339)/2
 2261 0024 0F       	 .byte (.L341-.L339)/2
 2262 0025 15       	 .byte (.L342-.L339)/2
 2263              	 .p2align 1
 2264              	.L338:
1193:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
1194:LPC17xxLib/src/lpc17xx_i2c.c **** 	case 0:
1195:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2ADR0 = tmp;
 2265              	 .loc 1 1195 0
 2266 0026 C360     	 str r3,[r0,#12]
1196:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2MASK0 = I2C_I2MASK_MASK((uint32_t) \
 2267              	 .loc 1 1196 0
 2268 0028 CB78     	 ldrb r3,[r1,#3]
 2269              	.LVL175:
 2270 002a 03F0FE03 	 and r3,r3,#254
 2271 002e 0363     	 str r3,[r0,#48]
 2272              	.L336:
 2273 0030 5DF804FB 	 ldr pc,[sp],#4
 2274              	.LVL176:
 2275              	.L340:
1197:LPC17xxLib/src/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1198:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
1199:LPC17xxLib/src/lpc17xx_i2c.c **** 	case 1:
1200:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2ADR1 = tmp;
 2276              	 .loc 1 1200 0
 2277 0034 0362     	 str r3,[r0,#32]
1201:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2MASK1 = I2C_I2MASK_MASK((uint32_t) \
 2278              	 .loc 1 1201 0
 2279 0036 CB78     	 ldrb r3,[r1,#3]
 2280              	.LVL177:
 2281 0038 03F0FE03 	 and r3,r3,#254
 2282 003c 4363     	 str r3,[r0,#52]
 2283 003e F7E7     	 b .L336
 2284              	.LVL178:
 2285              	.L341:
1202:LPC17xxLib/src/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1203:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
1204:LPC17xxLib/src/lpc17xx_i2c.c **** 	case 2:
1205:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2ADR2 = tmp;
 2286              	 .loc 1 1205 0
 2287 0040 4362     	 str r3,[r0,#36]
1206:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2MASK2 = I2C_I2MASK_MASK((uint32_t) \
 2288              	 .loc 1 1206 0
 2289 0042 CB78     	 ldrb r3,[r1,#3]
 2290              	.LVL179:
 2291 0044 03F0FE03 	 and r3,r3,#254
 2292 0048 8363     	 str r3,[r0,#56]
 2293 004a F1E7     	 b .L336
 2294              	.LVL180:
 2295              	.L342:
1207:LPC17xxLib/src/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1208:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
1209:LPC17xxLib/src/lpc17xx_i2c.c **** 	case 3:
1210:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2ADR3 = tmp;
 2296              	 .loc 1 1210 0
 2297 004c 8362     	 str r3,[r0,#40]
1211:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2MASK3 = I2C_I2MASK_MASK((uint32_t) \
 2298              	 .loc 1 1211 0
 2299 004e CB78     	 ldrb r3,[r1,#3]
 2300              	.LVL181:
 2301 0050 03F0FE03 	 and r3,r3,#254
 2302 0054 C363     	 str r3,[r0,#60]
1212:LPC17xxLib/src/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1213:LPC17xxLib/src/lpc17xx_i2c.c **** 		break;
1214:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
1215:LPC17xxLib/src/lpc17xx_i2c.c **** }
 2303              	 .loc 1 1215 0
 2304 0056 EBE7     	 b .L336
 2305              	 .cfi_endproc
 2306              	.LFE69:
 2308              	 .section .text.I2C_MonitorModeConfig,"ax",%progbits
 2309              	 .align 1
 2310              	 .global I2C_MonitorModeConfig
 2311              	 .syntax unified
 2312              	 .thumb
 2313              	 .thumb_func
 2314              	 .fpu softvfp
 2316              	I2C_MonitorModeConfig:
 2317              	.LFB70:
1216:LPC17xxLib/src/lpc17xx_i2c.c **** 
1217:LPC17xxLib/src/lpc17xx_i2c.c **** 
1218:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
1219:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Configures functionality in I2C monitor mode
1220:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1221:LPC17xxLib/src/lpc17xx_i2c.c ****  *   			- LPC_I2C0
1222:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1223:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1224:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	MonitorCfgType Monitor Configuration type, should be:
1225:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- I2C_MONITOR_CFG_SCL_OUTPUT: I2C module can 'stretch'
1226:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				the clock line (hold it low) until it has had time to
1227:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				respond to an I2C interrupt.
1228:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- I2C_MONITOR_CFG_MATCHALL: When this bit is set to '1'
1229:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				and the I2C is in monitor mode, an interrupt will be
1230:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				generated on ANY address received.
1231:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	NewState New State of this function, should be:
1232:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- ENABLE: Enable this function.
1233:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- DISABLE: Disable this function.
1234:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return		None
1235:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
1236:LPC17xxLib/src/lpc17xx_i2c.c **** void I2C_MonitorModeConfig(LPC_I2C_TypeDef *I2Cx, uint32_t MonitorCfgType, FunctionalState NewState
1237:LPC17xxLib/src/lpc17xx_i2c.c **** {
 2318              	 .loc 1 1237 0
 2319              	 .cfi_startproc
 2320              	 
 2321              	 
 2322              	 
 2323              	.LVL182:
1238:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
1239:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
1240:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
1241:LPC17xxLib/src/lpc17xx_i2c.c **** 
1242:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
 2324              	 .loc 1 1242 0
 2325 0000 012A     	 cmp r2,#1
1243:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
1244:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->MMCTRL |= MonitorCfgType;
1245:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
1246:LPC17xxLib/src/lpc17xx_i2c.c **** 	else
1247:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
1248:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
 2326              	 .loc 1 1248 0
 2327 0002 18BF     	 it ne
 2328 0004 C943     	 mvnne r1,r1
 2329              	.LVL183:
1244:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 2330              	 .loc 1 1244 0
 2331 0006 C369     	 ldr r3,[r0,#28]
 2332              	 .loc 1 1248 0
 2333 0008 16BF     	 itet ne
 2334 000a 01F00701 	 andne r1,r1,#7
1244:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 2335              	 .loc 1 1244 0
 2336 000e 1943     	 orreq r1,r1,r3
 2337              	 .loc 1 1248 0
 2338 0010 1940     	 andne r1,r1,r3
 2339 0012 C161     	 str r1,[r0,#28]
 2340 0014 7047     	 bx lr
 2341              	 .cfi_endproc
 2342              	.LFE70:
 2344              	 .section .text.I2C_MonitorModeCmd,"ax",%progbits
 2345              	 .align 1
 2346              	 .global I2C_MonitorModeCmd
 2347              	 .syntax unified
 2348              	 .thumb
 2349              	 .thumb_func
 2350              	 .fpu softvfp
 2352              	I2C_MonitorModeCmd:
 2353              	.LFB71:
1249:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
1250:LPC17xxLib/src/lpc17xx_i2c.c **** }
1251:LPC17xxLib/src/lpc17xx_i2c.c **** 
1252:LPC17xxLib/src/lpc17xx_i2c.c **** 
1253:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
1254:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Enable/Disable I2C monitor mode
1255:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1256:LPC17xxLib/src/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1257:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1258:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1259:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	NewState New State of this function, should be:
1260:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- ENABLE: Enable monitor mode.
1261:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- DISABLE: Disable monitor mode.
1262:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return		None
1263:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
1264:LPC17xxLib/src/lpc17xx_i2c.c **** void I2C_MonitorModeCmd(LPC_I2C_TypeDef *I2Cx, FunctionalState NewState)
1265:LPC17xxLib/src/lpc17xx_i2c.c **** {
 2354              	 .loc 1 1265 0
 2355              	 .cfi_startproc
 2356              	 
 2357              	 
 2358              	 
 2359              	.LVL184:
1266:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
1267:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
1268:LPC17xxLib/src/lpc17xx_i2c.c **** 
1269:LPC17xxLib/src/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
 2360              	 .loc 1 1269 0
 2361 0000 0129     	 cmp r1,#1
1270:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
1271:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
 2362              	 .loc 1 1271 0
 2363 0002 C369     	 ldr r3,[r0,#28]
1269:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
 2364              	 .loc 1 1269 0
 2365 0004 19D1     	 bne .L348
 2366              	 .loc 1 1271 0
 2367 0006 43F00103 	 orr r3,r3,#1
 2368 000a C361     	 str r3,[r0,#28]
1272:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 2369              	 .loc 1 1272 0
 2370 000c 0422     	 movs r2,#4
 2371 000e 0378     	 ldrb r3,[r0]
 2372 0010 0023     	 movs r3,#0
 2373 0012 0270     	 strb r2,[r0]
 2374 0014 4278     	 ldrb r2,[r0,#1]
 2375 0016 4370     	 strb r3,[r0,#1]
 2376 0018 8278     	 ldrb r2,[r0,#2]
 2377 001a 8370     	 strb r3,[r0,#2]
 2378 001c C278     	 ldrb r2,[r0,#3]
 2379 001e C370     	 strb r3,[r0,#3]
1273:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 2380              	 .loc 1 1273 0
 2381 0020 027E     	 ldrb r2,[r0,#24]
 2382 0022 2822     	 movs r2,#40
 2383              	.L350:
1274:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
1275:LPC17xxLib/src/lpc17xx_i2c.c **** 	else
1276:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
1277:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->MMCTRL &= (~I2C_I2MMCTRL_MM_ENA) & I2C_I2MMCTRL_BITMASK;
1278:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_AAC;
 2384              	 .loc 1 1278 0
 2385 0024 0276     	 strb r2,[r0,#24]
 2386 0026 427E     	 ldrb r2,[r0,#25]
 2387 0028 4376     	 strb r3,[r0,#25]
 2388 002a 827E     	 ldrb r2,[r0,#26]
 2389 002c 8376     	 strb r3,[r0,#26]
 2390 002e C27E     	 ldrb r2,[r0,#27]
1279:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
1280:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2C_MonitorBufferIndex = 0;
 2391              	 .loc 1 1280 0
 2392 0030 0022     	 movs r2,#0
1278:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 2393              	 .loc 1 1278 0
 2394 0032 C376     	 strb r3,[r0,#27]
 2395              	 .loc 1 1280 0
 2396 0034 044B     	 ldr r3,.L351
 2397 0036 1A60     	 str r2,[r3]
 2398 0038 7047     	 bx lr
 2399              	.L348:
1277:LPC17xxLib/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_AAC;
 2400              	 .loc 1 1277 0
 2401 003a 03F00603 	 and r3,r3,#6
 2402 003e C361     	 str r3,[r0,#28]
1278:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
 2403              	 .loc 1 1278 0
 2404 0040 037E     	 ldrb r3,[r0,#24]
 2405 0042 2C22     	 movs r2,#44
 2406 0044 0023     	 movs r3,#0
 2407 0046 EDE7     	 b .L350
 2408              	.L352:
 2409              	 .align 2
 2410              	.L351:
 2411 0048 00000000 	 .word .LANCHOR3
 2412              	 .cfi_endproc
 2413              	.LFE71:
 2415              	 .section .text.I2C_MonitorGetDatabuffer,"ax",%progbits
 2416              	 .align 1
 2417              	 .global I2C_MonitorGetDatabuffer
 2418              	 .syntax unified
 2419              	 .thumb
 2420              	 .thumb_func
 2421              	 .fpu softvfp
 2423              	I2C_MonitorGetDatabuffer:
 2424              	.LFB72:
1281:LPC17xxLib/src/lpc17xx_i2c.c **** }
1282:LPC17xxLib/src/lpc17xx_i2c.c **** 
1283:LPC17xxLib/src/lpc17xx_i2c.c **** 
1284:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
1285:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Get data from I2C data buffer in monitor mode.
1286:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1287:LPC17xxLib/src/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1288:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1289:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1290:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return		None
1291:LPC17xxLib/src/lpc17xx_i2c.c ****  * Note:	In monitor mode, the I2C module may lose the ability to stretch
1292:LPC17xxLib/src/lpc17xx_i2c.c ****  * the clock (stall the bus) if the ENA_SCL bit is not set. This means that
1293:LPC17xxLib/src/lpc17xx_i2c.c ****  * the processor will have a limited amount of time to read the contents of
1294:LPC17xxLib/src/lpc17xx_i2c.c ****  * the data received on the bus. If the processor reads the I2DAT shift
1295:LPC17xxLib/src/lpc17xx_i2c.c ****  * register, as it ordinarily would, it could have only one bit-time to
1296:LPC17xxLib/src/lpc17xx_i2c.c ****  * respond to the interrupt before the received data is overwritten by
1297:LPC17xxLib/src/lpc17xx_i2c.c ****  * new data.
1298:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
1299:LPC17xxLib/src/lpc17xx_i2c.c **** uint8_t I2C_MonitorGetDatabuffer(LPC_I2C_TypeDef *I2Cx)
1300:LPC17xxLib/src/lpc17xx_i2c.c **** {
 2425              	 .loc 1 1300 0
 2426              	 .cfi_startproc
 2427              	 
 2428              	 
 2429              	 
 2430              	.LVL185:
1301:LPC17xxLib/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
1302:LPC17xxLib/src/lpc17xx_i2c.c **** 	return ((uint8_t)(I2Cx->I2DATA_BUFFER));
 2431              	 .loc 1 1302 0
 2432 0000 C06A     	 ldr r0,[r0,#44]
 2433              	.LVL186:
1303:LPC17xxLib/src/lpc17xx_i2c.c **** }
 2434              	 .loc 1 1303 0
 2435 0002 C0B2     	 uxtb r0,r0
 2436 0004 7047     	 bx lr
 2437              	 .cfi_endproc
 2438              	.LFE72:
 2440              	 .section .text.I2C_MonitorHandler,"ax",%progbits
 2441              	 .align 1
 2442              	 .global I2C_MonitorHandler
 2443              	 .syntax unified
 2444              	 .thumb
 2445              	 .thumb_func
 2446              	 .fpu softvfp
 2448              	I2C_MonitorHandler:
 2449              	.LFB73:
1304:LPC17xxLib/src/lpc17xx_i2c.c **** 
1305:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
1306:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief		Get data from I2C data buffer in monitor mode.
1307:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1308:LPC17xxLib/src/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1309:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1310:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1311:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return		None
1312:LPC17xxLib/src/lpc17xx_i2c.c ****  * Note:	In monitor mode, the I2C module may lose the ability to stretch
1313:LPC17xxLib/src/lpc17xx_i2c.c ****  * the clock (stall the bus) if the ENA_SCL bit is not set. This means that
1314:LPC17xxLib/src/lpc17xx_i2c.c ****  * the processor will have a limited amount of time to read the contents of
1315:LPC17xxLib/src/lpc17xx_i2c.c ****  * the data received on the bus. If the processor reads the I2DAT shift
1316:LPC17xxLib/src/lpc17xx_i2c.c ****  * register, as it ordinarily would, it could have only one bit-time to
1317:LPC17xxLib/src/lpc17xx_i2c.c ****  * respond to the interrupt before the received data is overwritten by
1318:LPC17xxLib/src/lpc17xx_i2c.c ****  * new data.
1319:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
1320:LPC17xxLib/src/lpc17xx_i2c.c **** BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
1321:LPC17xxLib/src/lpc17xx_i2c.c **** {
 2450              	 .loc 1 1321 0
 2451              	 .cfi_startproc
 2452              	 
 2453              	 
 2454              	.LVL187:
 2455 0000 10B5     	 push {r4,lr}
 2456              	 .cfi_def_cfa_offset 8
 2457              	 .cfi_offset 4,-8
 2458              	 .cfi_offset 14,-4
1322:LPC17xxLib/src/lpc17xx_i2c.c **** 	BOOL_8 ret=FALSE;
1323:LPC17xxLib/src/lpc17xx_i2c.c **** 
1324:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 2459              	 .loc 1 1324 0
 2460 0002 0824     	 movs r4,#8
 2461 0004 037E     	 ldrb r3,[r0,#24]
 2462 0006 0023     	 movs r3,#0
 2463 0008 0476     	 strb r4,[r0,#24]
 2464 000a 447E     	 ldrb r4,[r0,#25]
 2465 000c 4376     	 strb r3,[r0,#25]
 2466 000e 847E     	 ldrb r4,[r0,#26]
 2467 0010 8376     	 strb r3,[r0,#26]
 2468 0012 C47E     	 ldrb r4,[r0,#27]
1325:LPC17xxLib/src/lpc17xx_i2c.c **** 
1326:LPC17xxLib/src/lpc17xx_i2c.c **** 	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
 2469              	 .loc 1 1326 0
 2470 0014 054C     	 ldr r4,.L355
1324:LPC17xxLib/src/lpc17xx_i2c.c **** 
 2471              	 .loc 1 1324 0
 2472 0016 C376     	 strb r3,[r0,#27]
 2473              	 .loc 1 1326 0
 2474 0018 C06A     	 ldr r0,[r0,#44]
 2475              	.LVL188:
 2476 001a 2368     	 ldr r3,[r4]
 2477 001c C854     	 strb r0,[r1,r3]
1327:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2C_MonitorBufferIndex++;
 2478              	 .loc 1 1327 0
 2479 001e 581C     	 adds r0,r3,#1
1328:LPC17xxLib/src/lpc17xx_i2c.c **** 	if(I2C_MonitorBufferIndex >= size)
1329:LPC17xxLib/src/lpc17xx_i2c.c **** 	{
1330:LPC17xxLib/src/lpc17xx_i2c.c **** 		ret = TRUE;
1331:LPC17xxLib/src/lpc17xx_i2c.c **** 	}
1332:LPC17xxLib/src/lpc17xx_i2c.c **** 	return ret;
1333:LPC17xxLib/src/lpc17xx_i2c.c **** }
 2480              	 .loc 1 1333 0
 2481 0020 9042     	 cmp r0,r2
1327:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2C_MonitorBufferIndex++;
 2482              	 .loc 1 1327 0
 2483 0022 2060     	 str r0,[r4]
 2484              	.LVL189:
 2485              	 .loc 1 1333 0
 2486 0024 34BF     	 ite cc
 2487 0026 0020     	 movcc r0,#0
 2488              	.LVL190:
 2489 0028 0120     	 movcs r0,#1
 2490 002a 10BD     	 pop {r4,pc}
 2491              	.LVL191:
 2492              	.L356:
 2493              	 .align 2
 2494              	.L355:
 2495 002c 00000000 	 .word .LANCHOR3
 2496              	 .cfi_endproc
 2497              	.LFE73:
 2499              	 .section .text.I2C_MasterTransferComplete,"ax",%progbits
 2500              	 .align 1
 2501              	 .global I2C_MasterTransferComplete
 2502              	 .syntax unified
 2503              	 .thumb
 2504              	 .thumb_func
 2505              	 .fpu softvfp
 2507              	I2C_MasterTransferComplete:
 2508              	.LFB74:
1334:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
1335:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief 		Get status of Master Transfer
1336:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
1337:LPC17xxLib/src/lpc17xx_i2c.c ****  *  			- LPC_I2C0
1338:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1339:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1340:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		Master transfer status, could be:
1341:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- TRUE	master transfer completed
1342:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- FALSE master transfer have not completed yet
1343:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
1344:LPC17xxLib/src/lpc17xx_i2c.c **** uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
1345:LPC17xxLib/src/lpc17xx_i2c.c **** {
 2509              	 .loc 1 1345 0
 2510              	 .cfi_startproc
 2511              	 
 2512              	 
 2513              	.LVL192:
 2514 0000 08B5     	 push {r3,lr}
 2515              	 .cfi_def_cfa_offset 8
 2516              	 .cfi_offset 3,-8
 2517              	 .cfi_offset 14,-4
1346:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint32_t retval, tmp;
1347:LPC17xxLib/src/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 2518              	 .loc 1 1347 0
 2519 0002 054B     	 ldr r3,.L358
 2520 0004 9847     	 blx r3
 2521              	.LVL193:
1348:LPC17xxLib/src/lpc17xx_i2c.c **** 	retval = I2C_MasterComplete[tmp];
1349:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2C_MasterComplete[tmp] = FALSE;
 2522              	 .loc 1 1349 0
 2523 0006 0021     	 movs r1,#0
1347:LPC17xxLib/src/lpc17xx_i2c.c **** 	retval = I2C_MasterComplete[tmp];
 2524              	 .loc 1 1347 0
 2525 0008 0246     	 mov r2,r0
 2526              	.LVL194:
1348:LPC17xxLib/src/lpc17xx_i2c.c **** 	retval = I2C_MasterComplete[tmp];
 2527              	 .loc 1 1348 0
 2528 000a 044B     	 ldr r3,.L358+4
 2529 000c 53F82000 	 ldr r0,[r3,r0,lsl#2]
 2530              	.LVL195:
 2531              	 .loc 1 1349 0
 2532 0010 43F82210 	 str r1,[r3,r2,lsl#2]
1350:LPC17xxLib/src/lpc17xx_i2c.c **** 	return retval;
1351:LPC17xxLib/src/lpc17xx_i2c.c **** }
 2533              	 .loc 1 1351 0
 2534 0014 08BD     	 pop {r3,pc}
 2535              	.L359:
 2536 0016 00BF     	 .align 2
 2537              	.L358:
 2538 0018 00000000 	 .word I2C_getNum
 2539 001c 00000000 	 .word .LANCHOR1
 2540              	 .cfi_endproc
 2541              	.LFE74:
 2543              	 .section .text.I2C_SlaveTransferComplete,"ax",%progbits
 2544              	 .align 1
 2545              	 .global I2C_SlaveTransferComplete
 2546              	 .syntax unified
 2547              	 .thumb
 2548              	 .thumb_func
 2549              	 .fpu softvfp
 2551              	I2C_SlaveTransferComplete:
 2552              	.LFB75:
1352:LPC17xxLib/src/lpc17xx_i2c.c **** 
1353:LPC17xxLib/src/lpc17xx_i2c.c **** /*********************************************************************//**
1354:LPC17xxLib/src/lpc17xx_i2c.c ****  * @brief 		Get status of Slave Transfer
1355:LPC17xxLib/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
1356:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
1357:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1358:LPC17xxLib/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1359:LPC17xxLib/src/lpc17xx_i2c.c ****  * @return 		Complete status, could be: TRUE/FALSE
1360:LPC17xxLib/src/lpc17xx_i2c.c ****  **********************************************************************/
1361:LPC17xxLib/src/lpc17xx_i2c.c **** uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
1362:LPC17xxLib/src/lpc17xx_i2c.c **** {
 2553              	 .loc 1 1362 0
 2554              	 .cfi_startproc
 2555              	 
 2556              	 
 2557              	.LVL196:
 2558 0000 08B5     	 push {r3,lr}
 2559              	 .cfi_def_cfa_offset 8
 2560              	 .cfi_offset 3,-8
 2561              	 .cfi_offset 14,-4
1363:LPC17xxLib/src/lpc17xx_i2c.c **** 	uint32_t retval, tmp;
1364:LPC17xxLib/src/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 2562              	 .loc 1 1364 0
 2563 0002 054B     	 ldr r3,.L361
 2564 0004 9847     	 blx r3
 2565              	.LVL197:
1365:LPC17xxLib/src/lpc17xx_i2c.c **** 	retval = I2C_SlaveComplete[tmp];
1366:LPC17xxLib/src/lpc17xx_i2c.c **** 	I2C_SlaveComplete[tmp] = FALSE;
 2566              	 .loc 1 1366 0
 2567 0006 0021     	 movs r1,#0
1364:LPC17xxLib/src/lpc17xx_i2c.c **** 	retval = I2C_SlaveComplete[tmp];
 2568              	 .loc 1 1364 0
 2569 0008 0246     	 mov r2,r0
 2570              	.LVL198:
1365:LPC17xxLib/src/lpc17xx_i2c.c **** 	retval = I2C_SlaveComplete[tmp];
 2571              	 .loc 1 1365 0
 2572 000a 044B     	 ldr r3,.L361+4
 2573 000c 53F82000 	 ldr r0,[r3,r0,lsl#2]
 2574              	.LVL199:
 2575              	 .loc 1 1366 0
 2576 0010 43F82210 	 str r1,[r3,r2,lsl#2]
1367:LPC17xxLib/src/lpc17xx_i2c.c **** 	return retval;
1368:LPC17xxLib/src/lpc17xx_i2c.c **** }
 2577              	 .loc 1 1368 0
 2578 0014 08BD     	 pop {r3,pc}
 2579              	.L362:
 2580 0016 00BF     	 .align 2
 2581              	.L361:
 2582 0018 00000000 	 .word I2C_getNum
 2583 001c 00000000 	 .word .LANCHOR2
 2584              	 .cfi_endproc
 2585              	.LFE75:
 2587              	 .section .bss.I2C_MasterComplete,"aw",%nobits
 2588              	 .align 2
 2589              	 .set .LANCHOR1,.+0
 2592              	I2C_MasterComplete:
 2593 0000 00000000 	 .space 12
 2593      00000000 
 2593      00000000 
 2594              	 .section .bss.I2C_MonitorBufferIndex,"aw",%nobits
 2595              	 .align 2
 2596              	 .set .LANCHOR3,.+0
 2599              	I2C_MonitorBufferIndex:
 2600 0000 00000000 	 .space 4
 2601              	 .section .bss.I2C_SlaveComplete,"aw",%nobits
 2602              	 .align 2
 2603              	 .set .LANCHOR2,.+0
 2606              	I2C_SlaveComplete:
 2607 0000 00000000 	 .space 12
 2607      00000000 
 2607      00000000 
 2608              	 .section .bss.i2cdat,"aw",%nobits
 2609              	 .set .LANCHOR0,.+0
 2612              	i2cdat:
 2613 0000 00000000 	 .space 24
 2613      00000000 
 2613      00000000 
 2613      00000000 
 2613      00000000 
 2614              	 .text
 2615              	.Letext0:
 2616              	 .file 3 "CMSISv2p00_LPC17xx/inc/LPC17xx.h"
 2617              	 .file 4 "/usr/include/newlib/machine/_default_types.h"
 2618              	 .file 5 "/usr/include/newlib/sys/_stdint.h"
 2619              	 .file 6 "CMSISv2p00_LPC17xx/inc/system_LPC17xx.h"
 2620              	 .file 7 "LPC17xxLib/inc/lpc_types.h"
 2621              	 .file 8 "LPC17xxLib/inc/lpc17xx_i2c.h"
 2622              	 .file 9 "LPC17xxLib/inc/lpc17xx_clkpwr.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lpc17xx_i2c.c
    {standard input}:16     .text.I2C_getNum:0000000000000000 $t
    {standard input}:22     .text.I2C_getNum:0000000000000000 I2C_getNum
    {standard input}:63     .text.I2C_getNum:0000000000000028 $d
    {standard input}:68     .text.I2C_SendByte:0000000000000000 $t
    {standard input}:74     .text.I2C_SendByte:0000000000000000 I2C_SendByte
    {standard input}:126    .text.I2C_Init:0000000000000000 $t
    {standard input}:133    .text.I2C_Init:0000000000000000 I2C_Init
    {standard input}:267    .text.I2C_Init:0000000000000080 $d
    {standard input}:279    .text.I2C_DeInit:0000000000000000 $t
    {standard input}:286    .text.I2C_DeInit:0000000000000000 I2C_DeInit
    {standard input}:344    .text.I2C_DeInit:000000000000003c $d
    {standard input}:352    .text.I2C_Cmd:0000000000000000 $t
    {standard input}:359    .text.I2C_Cmd:0000000000000000 I2C_Cmd
    {standard input}:400    .text.I2C_IntCmd:0000000000000000 $t
    {standard input}:407    .text.I2C_IntCmd:0000000000000000 I2C_IntCmd
    {standard input}:520    .text.I2C_IntCmd:0000000000000054 $d
    {standard input}:530    .text.I2C_MasterHandler:0000000000000000 $t
    {standard input}:537    .text.I2C_MasterHandler:0000000000000000 I2C_MasterHandler
    {standard input}:977    .text.I2C_MasterHandler:0000000000000264 $d
    {standard input}:985    .text.I2C_SlaveHandler:0000000000000000 $t
    {standard input}:992    .text.I2C_SlaveHandler:0000000000000000 I2C_SlaveHandler
    {standard input}:1255   .text.I2C_SlaveHandler:0000000000000148 $d
    {standard input}:1263   .text.I2C_MasterTransferData:0000000000000000 $t
    {standard input}:1270   .text.I2C_MasterTransferData:0000000000000000 I2C_MasterTransferData
    {standard input}:1857   .text.I2C_MasterTransferData:0000000000000300 $d
    {standard input}:1865   .text.I2C_SlaveTransferData:0000000000000000 $t
    {standard input}:1872   .text.I2C_SlaveTransferData:0000000000000000 I2C_SlaveTransferData
    {standard input}:2214   .text.I2C_SlaveTransferData:00000000000001d0 $d
    {standard input}:2221   .text.I2C_SetOwnSlaveAddr:0000000000000000 $t
    {standard input}:2228   .text.I2C_SetOwnSlaveAddr:0000000000000000 I2C_SetOwnSlaveAddr
    {standard input}:2259   .text.I2C_SetOwnSlaveAddr:0000000000000022 $d
    {standard input}:2263   .text.I2C_SetOwnSlaveAddr:0000000000000026 $t
    {standard input}:2309   .text.I2C_MonitorModeConfig:0000000000000000 $t
    {standard input}:2316   .text.I2C_MonitorModeConfig:0000000000000000 I2C_MonitorModeConfig
    {standard input}:2345   .text.I2C_MonitorModeCmd:0000000000000000 $t
    {standard input}:2352   .text.I2C_MonitorModeCmd:0000000000000000 I2C_MonitorModeCmd
    {standard input}:2411   .text.I2C_MonitorModeCmd:0000000000000048 $d
    {standard input}:2416   .text.I2C_MonitorGetDatabuffer:0000000000000000 $t
    {standard input}:2423   .text.I2C_MonitorGetDatabuffer:0000000000000000 I2C_MonitorGetDatabuffer
    {standard input}:2441   .text.I2C_MonitorHandler:0000000000000000 $t
    {standard input}:2448   .text.I2C_MonitorHandler:0000000000000000 I2C_MonitorHandler
    {standard input}:2495   .text.I2C_MonitorHandler:000000000000002c $d
    {standard input}:2500   .text.I2C_MasterTransferComplete:0000000000000000 $t
    {standard input}:2507   .text.I2C_MasterTransferComplete:0000000000000000 I2C_MasterTransferComplete
    {standard input}:2538   .text.I2C_MasterTransferComplete:0000000000000018 $d
    {standard input}:2544   .text.I2C_SlaveTransferComplete:0000000000000000 $t
    {standard input}:2551   .text.I2C_SlaveTransferComplete:0000000000000000 I2C_SlaveTransferComplete
    {standard input}:2582   .text.I2C_SlaveTransferComplete:0000000000000018 $d
    {standard input}:2588   .bss.I2C_MasterComplete:0000000000000000 $d
    {standard input}:2592   .bss.I2C_MasterComplete:0000000000000000 I2C_MasterComplete
    {standard input}:2595   .bss.I2C_MonitorBufferIndex:0000000000000000 $d
    {standard input}:2599   .bss.I2C_MonitorBufferIndex:0000000000000000 I2C_MonitorBufferIndex
    {standard input}:2602   .bss.I2C_SlaveComplete:0000000000000000 $d
    {standard input}:2606   .bss.I2C_SlaveComplete:0000000000000000 I2C_SlaveComplete
    {standard input}:2612   .bss.i2cdat:0000000000000000 i2cdat
    {standard input}:2613   .bss.i2cdat:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
CLKPWR_ConfigPPWR
CLKPWR_SetPCLKDiv
CLKPWR_GetPCLK
