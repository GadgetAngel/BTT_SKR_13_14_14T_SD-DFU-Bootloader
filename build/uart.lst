   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,4
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "uart.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.UART_pin_init,"ax",%progbits
  16              	 .align 1
  17              	 .global UART_pin_init
  18              	 .syntax unified
  19              	 .thumb
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	UART_pin_init:
  24              	.LFB56:
  25              	 .file 1 "uart.c"
   1:uart.c        **** /*****************************************************************************
   2:uart.c        ****  *                                                                            *
   3:uart.c        ****  * DFU/SD/SDHC Bootloader for LPC17xx                                         *
   4:uart.c        ****  *                                                                            *
   5:uart.c        ****  * by Triffid Hunter                                                          *
   6:uart.c        ****  *                                                                            *
   7:uart.c        ****  *                                                                            *
   8:uart.c        ****  * This firmware is Copyright (C) 2009-2010 Michael Moon aka Triffid_Hunter   *
   9:uart.c        ****  *                                                                            *
  10:uart.c        ****  * This program is free software; you can redistribute it and/or modify       *
  11:uart.c        ****  * it under the terms of the GNU General Public License as published by       *
  12:uart.c        ****  * the Free Software Foundation; either version 2 of the License, or          *
  13:uart.c        ****  * (at your option) any later version.                                        *
  14:uart.c        ****  *                                                                            *
  15:uart.c        ****  * This program is distributed in the hope that it will be useful,            *
  16:uart.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
  17:uart.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
  18:uart.c        ****  * GNU General Public License for more details.                               *
  19:uart.c        ****  *                                                                            *
  20:uart.c        ****  * You should have received a copy of the GNU General Public License          *
  21:uart.c        ****  * along with this program; if not, write to the Free Software                *
  22:uart.c        ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA *
  23:uart.c        ****  *                                                                            *
  24:uart.c        ****  *****************************************************************************/
  25:uart.c        **** 
  26:uart.c        **** #include "uart.h"
  27:uart.c        **** 
  28:uart.c        **** #include "LPC17xx.h"
  29:uart.c        **** #include "lpc17xx_pinsel.h"
  30:uart.c        **** #include "lpc17xx_gpio.h"
  31:uart.c        **** #include "lpc17xx_clkpwr.h"
  32:uart.c        **** #include "config.h"
  33:uart.c        **** 
  34:uart.c        **** // #include "debug.h"
  35:uart.c        **** 
  36:uart.c        **** // void dbgled(int l);
  37:uart.c        **** // void setled(int, int);
  38:uart.c        **** 
  39:uart.c        **** #ifndef ENTER_ISR
  40:uart.c        **** #define ENTER_ISR() do {} while (0)
  41:uart.c        **** #endif
  42:uart.c        **** 
  43:uart.c        **** #ifndef LEAVE_ISR
  44:uart.c        **** #define LEAVE_ISR() do {} while (0)
  45:uart.c        **** #endif
  46:uart.c        **** 
  47:uart.c        **** /* Buf mask */
  48:uart.c        **** #define __BUF_MASK (UART_RING_BUFSIZE-1)
  49:uart.c        **** /* Check buf is full or not */
  50:uart.c        **** #define __BUF_IS_FULL(head, tail) ((tail&__BUF_MASK)==((head+1)&__BUF_MASK))
  51:uart.c        **** /* Check buf will be full in next receiving or not */
  52:uart.c        **** #define __BUF_WILL_FULL(head, tail) ((tail&__BUF_MASK)==((head+2)&__BUF_MASK))
  53:uart.c        **** /* Check buf is empty */
  54:uart.c        **** #define __BUF_IS_EMPTY(head, tail) ((head&__BUF_MASK)==(tail&__BUF_MASK))
  55:uart.c        **** /* Reset buf */
  56:uart.c        **** #define __BUF_RESET(bufidx)     (bufidx=0)
  57:uart.c        **** #define __BUF_INCR(bufidx)      (bufidx=(bufidx+1)&__BUF_MASK)
  58:uart.c        **** 
  59:uart.c        **** #define RB_MASK          (UART_RINGBUFFER_SIZE - 1)
  60:uart.c        **** #define RB_FULL(rb)      ((rb.tail & RB_MASK) == ((rb.head + 1) & RB_MASK))
  61:uart.c        **** #define RB_EMPTY(rb)     ((rb.head & RB_MASK) == ( rb.tail      & RB_MASK))
  62:uart.c        **** #define RB_ZERO(rb)      do { rb.head = rb.tail = 0; } while (0)
  63:uart.c        **** #define RB_INCR(ht)      do { ht = (ht + 1) & RB_MASK; } while (0)
  64:uart.c        **** #define RB_PUSH(rb, val) do { rb.data[rb.head++] = val; rb.head &= RB_MASK; } while (0)
  65:uart.c        **** #define RB_POP( rb, val) do { val = rb.data[rb.tail++]; rb.tail &= RB_MASK; } while (0)
  66:uart.c        **** #define RB_PEEK(rb, val) do { val = rb.data[rb.tail++]; } while (0)
  67:uart.c        **** #define RB_DROP(rb)      do { rb.tail = (rb.tail + 1) & RB_MASK; } while (0)
  68:uart.c        **** #define RB_CANREAD(rb)   (((UART_RINGBUFFER_SIZE + rb.head) -  rb.tail     ) & RB_MASK)
  69:uart.c        **** #define RB_CANWRITE(rb)  (((UART_RINGBUFFER_SIZE + rb.tail) - (rb.head + 1)) & RB_MASK)
  70:uart.c        **** 
  71:uart.c        **** LPC_UART_TypeDef * u;
  72:uart.c        **** // UART Ring buffers
  73:uart.c        **** UART_RINGBUFFER_T txbuf;
  74:uart.c        **** UART_RINGBUFFER_T rxbuf;
  75:uart.c        **** 
  76:uart.c        **** // Current Tx Interrupt enable state
  77:uart.c        **** __IO FlagStatus TxIntStat;
  78:uart.c        **** volatile uint8_t blocking;
  79:uart.c        **** #define true 1
  80:uart.c        **** #define false 0
  81:uart.c        **** 
  82:uart.c        **** int port;
  83:uart.c        **** 
  84:uart.c        **** void UART_init(PinName rxpin, PinName txpin, int baud)
  85:uart.c        **** {
  86:uart.c        ****     UART_pin_init(rxpin, txpin);
  87:uart.c        ****     UART_baud(baud);
  88:uart.c        **** }
  89:uart.c        **** 
  90:uart.c        **** void UART_pin_init(PinName rxpin, PinName txpin)
  91:uart.c        **** {
  26              	 .loc 1 91 0
  27              	 .cfi_startproc
  28              	 
  29              	 
  30              	.LVL0:
  31 0000 37B5     	 push {r0,r1,r2,r4,r5,lr}
  32              	 .cfi_def_cfa_offset 24
  33              	 .cfi_offset 4,-12
  34              	 .cfi_offset 5,-8
  35              	 .cfi_offset 14,-4
  36              	 .loc 1 91 0
  37 0002 0446     	 mov r4,r0
  92:uart.c        ****     blocking = true;
  38              	 .loc 1 92 0
  39 0004 0122     	 movs r2,#1
  93:uart.c        **** 
  94:uart.c        ****     PINSEL_CFG_Type PinCfg;
  95:uart.c        **** 
  96:uart.c        ****     PinCfg.OpenDrain = 0;
  40              	 .loc 1 96 0
  41 0006 0020     	 movs r0,#0
  42              	.LVL1:
  92:uart.c        ****     blocking = true;
  43              	 .loc 1 92 0
  44 0008 304B     	 ldr r3,.L20
  97:uart.c        ****     PinCfg.Pinmode = 0;
  98:uart.c        **** 
  99:uart.c        ****     if (txpin == P0_2 && rxpin == P0_3) {
  45              	 .loc 1 99 0
  46 000a 0229     	 cmp r1,#2
  92:uart.c        **** 
  47              	 .loc 1 92 0
  48 000c 1A70     	 strb r2,[r3]
  96:uart.c        ****     PinCfg.Pinmode = 0;
  49              	 .loc 1 96 0
  50 000e 8DF80400 	 strb r0,[sp,#4]
  97:uart.c        ****     PinCfg.Pinmode = 0;
  51              	 .loc 1 97 0
  52 0012 8DF80300 	 strb r0,[sp,#3]
  53 0016 2E4B     	 ldr r3,.L20+4
  54              	 .loc 1 99 0
  55 0018 1DD1     	 bne .L2
  56              	 .loc 1 99 0 is_stmt 0 discriminator 1
  57 001a 032C     	 cmp r4,#3
  58 001c 50D1     	 bne .L3
 100:uart.c        ****         port = 0;
  59              	 .loc 1 100 0 is_stmt 1
  60 001e 1860     	 str r0,[r3]
 101:uart.c        ****         u = LPC_UART0;
  61              	 .loc 1 101 0
  62 0020 2C48     	 ldr r0,.L20+8
  63              	.L17:
 102:uart.c        ****         PinCfg.Funcnum = 1;
 103:uart.c        ****     }
 104:uart.c        ****     else if (txpin == P0_0 && rxpin == P0_1) {
 105:uart.c        ****         port = 3;
 106:uart.c        ****         u = LPC_UART3;
 107:uart.c        ****         PinCfg.Funcnum = 2;
 108:uart.c        ****     }
 109:uart.c        ****     else if (txpin == P0_10 && rxpin == P0_11) {
 110:uart.c        ****         port = 2;
 111:uart.c        ****         u = LPC_UART2;
  64              	 .loc 1 111 0
  65 0022 2D4B     	 ldr r3,.L20+12
 112:uart.c        ****         PinCfg.Funcnum = 1;
  66              	 .loc 1 112 0
  67 0024 8DF80220 	 strb r2,[sp,#2]
 111:uart.c        ****         PinCfg.Funcnum = 1;
  68              	 .loc 1 111 0
  69 0028 1860     	 str r0,[r3]
  70              	.L4:
 113:uart.c        ****     }
 114:uart.c        ****     else if (txpin == P0_15 && rxpin == P0_16) {
 115:uart.c        ****         port = 1;
 116:uart.c        ****         u = (LPC_UART_TypeDef *) LPC_UART1;
 117:uart.c        ****         PinCfg.Funcnum = 1;
 118:uart.c        ****     }
 119:uart.c        ****     else if (txpin == P0_25 && rxpin == P0_26) {
 120:uart.c        ****         port = 3;
 121:uart.c        ****         u = LPC_UART3;
 122:uart.c        ****         PinCfg.Funcnum = 3;
 123:uart.c        ****     }
 124:uart.c        ****     else if (txpin == P2_0 && rxpin == P2_1) {
 125:uart.c        ****         port = 1;
 126:uart.c        ****         u = (LPC_UART_TypeDef *) LPC_UART1;
 127:uart.c        ****         PinCfg.Funcnum = 2;
 128:uart.c        ****     }
 129:uart.c        ****     else if (txpin == P2_8 && rxpin == P2_9) {
 130:uart.c        ****         port = 2;
 131:uart.c        ****         u = LPC_UART2;
 132:uart.c        ****         PinCfg.Funcnum = 2;
 133:uart.c        ****     }
 134:uart.c        ****     else if (txpin == P4_28 && rxpin == P4_29) {
 135:uart.c        ****         port = 3;
 136:uart.c        ****         u = LPC_UART3;
 137:uart.c        ****         PinCfg.Funcnum = 3;
 138:uart.c        ****     }
 139:uart.c        ****     else {
 140:uart.c        ****         //TODO: software serial
 141:uart.c        ****         port = -1;
 142:uart.c        ****         return;
 143:uart.c        ****     }
 144:uart.c        **** 
 145:uart.c        ****     PinCfg.Portnum = (txpin >> 5) & 7;
  71              	 .loc 1 145 0
  72 002a C1F34213 	 ubfx r3,r1,#5,#3
 146:uart.c        ****     PinCfg.Pinnum = (txpin & 0x1F);
 147:uart.c        ****     PINSEL_ConfigPin(&PinCfg);
  73              	 .loc 1 147 0
  74 002e 6846     	 mov r0,sp
 146:uart.c        ****     PinCfg.Pinnum = (txpin & 0x1F);
  75              	 .loc 1 146 0
  76 0030 01F01F01 	 and r1,r1,#31
  77              	.LVL2:
  78              	 .loc 1 147 0
  79 0034 294D     	 ldr r5,.L20+16
 145:uart.c        ****     PinCfg.Pinnum = (txpin & 0x1F);
  80              	 .loc 1 145 0
  81 0036 8DF80030 	 strb r3,[sp]
 146:uart.c        ****     PinCfg.Pinnum = (txpin & 0x1F);
  82              	 .loc 1 146 0
  83 003a 8DF80110 	 strb r1,[sp,#1]
  84              	 .loc 1 147 0
  85 003e A847     	 blx r5
  86              	.LVL3:
 148:uart.c        **** 
 149:uart.c        ****     PinCfg.Portnum = (rxpin >> 5) & 7;
  87              	 .loc 1 149 0
  88 0040 C4F34213 	 ubfx r3,r4,#5,#3
 150:uart.c        ****     PinCfg.Pinnum = (rxpin & 0x1F);
 151:uart.c        ****     PINSEL_ConfigPin(&PinCfg);
  89              	 .loc 1 151 0
  90 0044 6846     	 mov r0,sp
 150:uart.c        ****     PinCfg.Pinnum = (rxpin & 0x1F);
  91              	 .loc 1 150 0
  92 0046 04F01F04 	 and r4,r4,#31
 149:uart.c        ****     PinCfg.Pinnum = (rxpin & 0x1F);
  93              	 .loc 1 149 0
  94 004a 8DF80030 	 strb r3,[sp]
 150:uart.c        ****     PinCfg.Pinnum = (rxpin & 0x1F);
  95              	 .loc 1 150 0
  96 004e 8DF80140 	 strb r4,[sp,#1]
  97              	 .loc 1 151 0
  98 0052 A847     	 blx r5
  99              	.LVL4:
 100 0054 37E0     	 b .L1
 101              	.LVL5:
 102              	.L2:
 104:uart.c        ****         port = 3;
 103              	 .loc 1 104 0
 104 0056 51B9     	 cbnz r1,.L5
 104:uart.c        ****         port = 3;
 105              	 .loc 1 104 0 is_stmt 0 discriminator 1
 106 0058 012C     	 cmp r4,#1
 107 005a 31D1     	 bne .L3
 105:uart.c        ****         u = LPC_UART3;
 108              	 .loc 1 105 0 is_stmt 1
 109 005c 0322     	 movs r2,#3
 110 005e 1A60     	 str r2,[r3]
 106:uart.c        ****         PinCfg.Funcnum = 2;
 111              	 .loc 1 106 0
 112 0060 1F4A     	 ldr r2,.L20+20
 113              	.L19:
 126:uart.c        ****         PinCfg.Funcnum = 2;
 114              	 .loc 1 126 0
 115 0062 1D4B     	 ldr r3,.L20+12
 116 0064 1A60     	 str r2,[r3]
 127:uart.c        ****     }
 117              	 .loc 1 127 0
 118 0066 0223     	 movs r3,#2
 119 0068 8DF80230 	 strb r3,[sp,#2]
 120 006c DDE7     	 b .L4
 121              	.L5:
 109:uart.c        ****         port = 2;
 122              	 .loc 1 109 0
 123 006e 0A29     	 cmp r1,#10
 124 0070 05D1     	 bne .L6
 109:uart.c        ****         port = 2;
 125              	 .loc 1 109 0 is_stmt 0 discriminator 1
 126 0072 0B2C     	 cmp r4,#11
 127 0074 24D1     	 bne .L3
 110:uart.c        ****         u = LPC_UART2;
 128              	 .loc 1 110 0 is_stmt 1
 129 0076 0220     	 movs r0,#2
 130 0078 1860     	 str r0,[r3]
 131              	.L18:
 111:uart.c        ****         PinCfg.Funcnum = 1;
 132              	 .loc 1 111 0
 133 007a 1A48     	 ldr r0,.L20+24
 134 007c D1E7     	 b .L17
 135              	.L6:
 114:uart.c        ****         port = 1;
 136              	 .loc 1 114 0
 137 007e 0F29     	 cmp r1,#15
 138 0080 04D1     	 bne .L7
 114:uart.c        ****         port = 1;
 139              	 .loc 1 114 0 is_stmt 0 discriminator 1
 140 0082 102C     	 cmp r4,#16
 141 0084 1CD1     	 bne .L3
 115:uart.c        ****         u = (LPC_UART_TypeDef *) LPC_UART1;
 142              	 .loc 1 115 0 is_stmt 1
 143 0086 1A60     	 str r2,[r3]
 116:uart.c        ****         PinCfg.Funcnum = 1;
 144              	 .loc 1 116 0
 145 0088 1748     	 ldr r0,.L20+28
 146 008a CAE7     	 b .L17
 147              	.L7:
 119:uart.c        ****         port = 3;
 148              	 .loc 1 119 0
 149 008c 1929     	 cmp r1,#25
 150 008e 05D1     	 bne .L8
 119:uart.c        ****         port = 3;
 151              	 .loc 1 119 0 is_stmt 0 discriminator 1
 152 0090 1A2C     	 cmp r4,#26
 153              	.L16:
 154 0092 15D1     	 bne .L3
 120:uart.c        ****         u = LPC_UART3;
 155              	 .loc 1 120 0 is_stmt 1
 156 0094 0322     	 movs r2,#3
 121:uart.c        ****         PinCfg.Funcnum = 3;
 157              	 .loc 1 121 0
 158 0096 1248     	 ldr r0,.L20+20
 120:uart.c        ****         u = LPC_UART3;
 159              	 .loc 1 120 0
 160 0098 1A60     	 str r2,[r3]
 161 009a C2E7     	 b .L17
 162              	.L8:
 124:uart.c        ****         port = 1;
 163              	 .loc 1 124 0
 164 009c 4029     	 cmp r1,#64
 165 009e 04D1     	 bne .L9
 124:uart.c        ****         port = 1;
 166              	 .loc 1 124 0 is_stmt 0 discriminator 1
 167 00a0 412C     	 cmp r4,#65
 168 00a2 0DD1     	 bne .L3
 125:uart.c        ****         u = (LPC_UART_TypeDef *) LPC_UART1;
 169              	 .loc 1 125 0 is_stmt 1
 170 00a4 1A60     	 str r2,[r3]
 126:uart.c        ****         PinCfg.Funcnum = 2;
 171              	 .loc 1 126 0
 172 00a6 104A     	 ldr r2,.L20+28
 173 00a8 DBE7     	 b .L19
 174              	.L9:
 129:uart.c        ****         port = 2;
 175              	 .loc 1 129 0
 176 00aa 4829     	 cmp r1,#72
 177 00ac 04D1     	 bne .L10
 129:uart.c        ****         port = 2;
 178              	 .loc 1 129 0 is_stmt 0 discriminator 1
 179 00ae 492C     	 cmp r4,#73
 180 00b0 06D1     	 bne .L3
 130:uart.c        ****         u = LPC_UART2;
 181              	 .loc 1 130 0 is_stmt 1
 182 00b2 0222     	 movs r2,#2
 183 00b4 1A60     	 str r2,[r3]
 184 00b6 E0E7     	 b .L18
 185              	.L10:
 134:uart.c        ****         port = 3;
 186              	 .loc 1 134 0
 187 00b8 9C29     	 cmp r1,#156
 188 00ba 01D1     	 bne .L3
 134:uart.c        ****         port = 3;
 189              	 .loc 1 134 0 is_stmt 0 discriminator 1
 190 00bc 9D2C     	 cmp r4,#157
 191 00be E8E7     	 b .L16
 192              	.L3:
 141:uart.c        ****         return;
 193              	 .loc 1 141 0 is_stmt 1
 194 00c0 4FF0FF32 	 mov r2,#-1
 195 00c4 1A60     	 str r2,[r3]
 196              	.LVL6:
 197              	.L1:
 152:uart.c        **** }
 198              	 .loc 1 152 0
 199 00c6 03B0     	 add sp,sp,#12
 200              	 .cfi_def_cfa_offset 12
 201              	 
 202 00c8 30BD     	 pop {r4,r5,pc}
 203              	.L21:
 204 00ca 00BF     	 .align 2
 205              	.L20:
 206 00cc 00000000 	 .word blocking
 207 00d0 00000000 	 .word port
 208 00d4 00C00040 	 .word 1073790976
 209 00d8 00000000 	 .word u
 210 00dc 00000000 	 .word PINSEL_ConfigPin
 211 00e0 00C00940 	 .word 1074380800
 212 00e4 00800940 	 .word 1074364416
 213 00e8 00000140 	 .word 1073807360
 214              	 .cfi_endproc
 215              	.LFE56:
 217              	 .section .text.UART_baud,"ax",%progbits
 218              	 .align 1
 219              	 .global UART_baud
 220              	 .syntax unified
 221              	 .thumb
 222              	 .thumb_func
 223              	 .fpu softvfp
 225              	UART_baud:
 226              	.LFB60:
 153:uart.c        **** 
 154:uart.c        **** typedef struct {
 155:uart.c        **** 	uint32_t	baud;
 156:uart.c        **** 	uint8_t	pd;
 157:uart.c        **** 	uint16_t	dl;
 158:uart.c        **** 	uint8_t	mulval;
 159:uart.c        **** 	uint8_t	divaddval;
 160:uart.c        **** } uart_regs;
 161:uart.c        **** 
 162:uart.c        **** // prevent system_LPC17xx from polluting our namespace
 163:uart.c        **** #undef __LPC17XX__
 164:uart.c        **** // pull in system_LPC17xx so we can see __CORE_CLK
 165:uart.c        **** #include <system_LPC17xx.c>
 166:uart.c        **** #define __LPC17XX__
 167:uart.c        **** 
 168:uart.c        **** // check if we can use precalculated values
 169:uart.c        **** #if ((defined APPBAUD) && (__CORE_CLK == 120000000) && (APPBAUD == 2000000))
 170:uart.c        **** static inline int baud_space_search(uint32_t target_baud, uart_regs *r)
 171:uart.c        **** {
 172:uart.c        **** 	r->baud      = 2000000;
 173:uart.c        **** 	r->pd        = 0;
 174:uart.c        **** 	r->dl        = 3;
 175:uart.c        **** 	r->mulval    = 4;
 176:uart.c        **** 	r->divaddval = 1;
 177:uart.c        **** 	return 0;
 178:uart.c        **** }
 179:uart.c        **** #else
 180:uart.c        **** 
 181:uart.c        **** /* definition to expand macro then apply to pragma message */
 182:uart.c        **** // #define _STR(x) #x
 183:uart.c        **** // #define STR(x) _STR(x)
 184:uart.c        **** 
 185:uart.c        **** // #pragma message STR(APPBAUD)
 186:uart.c        **** // #pragma message STR(__CORE_CLK)
 187:uart.c        **** 
 188:uart.c        **** static uint32_t const uabs(const uint32_t a, const uint32_t b)
 189:uart.c        **** {
 190:uart.c        **** 	if (a>=b)
 191:uart.c        **** 		return a-b;
 192:uart.c        **** 	return b-a;
 193:uart.c        **** }
 194:uart.c        **** 
 195:uart.c        **** static uint32_t const calc_baud(uint32_t pclk, uint32_t dl, uint32_t divaddval, uint32_t mulval)
 196:uart.c        **** {
 197:uart.c        **** 	// 65535 * 14 * 16 is less than 2**24 so we have a spare 8 bits of precision
 198:uart.c        **** 	// we can use them to increase our accuracy quite a bit
 199:uart.c        **** 	// pclk is less than 2**27, so we have 5 spare bits for the numerator
 200:uart.c        **** 	// this means we can do (numerator * 2**5) / (denominator * 2**8) * 2**3 to get the highest accura
 201:uart.c        **** 	// denominator is 16 * (dl * (1 + (divadd / mul)) which can be expanded to
 202:uart.c        **** 	// dl*16 + dl*16*divadd/mul which gives far more opportunity for using all our precision
 203:uart.c        **** 	uint32_t dx = ((dl * 16 * 32 * 8) + ((dl * 16 * divaddval * 32 * 8) / mulval));
 204:uart.c        **** 	return ((pclk * 32) / dx) * 8;
 205:uart.c        **** }
 206:uart.c        **** 
 207:uart.c        **** static int baud_space_search(uint32_t target_baud, uart_regs *r)
 208:uart.c        **** {
 209:uart.c        **** 	uint32_t pd, dl, mulval, divaddval;
 210:uart.c        **** 	int i = 0;
 211:uart.c        **** 	r->baud = 0;
 212:uart.c        **** 	for (pd = ((target_baud < 1000000)?3:1); pd < 4; pd--)
 213:uart.c        **** 	{
 214:uart.c        **** 		uint32_t pclk = SystemCoreClock / (1<<pd);
 215:uart.c        **** 		for (mulval = 1; mulval < 16; mulval++)
 216:uart.c        **** 		{
 217:uart.c        **** 			for (divaddval = 0; divaddval < mulval; divaddval++)
 218:uart.c        **** 			{
 219:uart.c        **** 				i++;
 220:uart.c        **** 				// baud = pclk / (16 * dl * (1 + (DivAdd / Mul))
 221:uart.c        **** 				// solving for dl, we get dl = mul * pclk / (16 * baud * (divadd + mul))
 222:uart.c        **** 				// we double the numerator, add 1 to the result then halve to effectivel round up when dl % 1 >
 223:uart.c        **** 				dl = (((2 * mulval * pclk) / (16 * target_baud * (divaddval + mulval))) + 1) / 2;
 224:uart.c        **** 
 225:uart.c        **** 				// dl is a 16 bit field, if result needs more then we search again
 226:uart.c        **** 				if (dl > 65535)
 227:uart.c        **** 					continue;
 228:uart.c        **** 
 229:uart.c        **** 				// datasheet says if DLL==DLM==0, then 1 is used instead since divide by zero is ungood
 230:uart.c        **** 					if (dl == 0)
 231:uart.c        **** 						dl = 1;
 232:uart.c        **** 
 233:uart.c        **** 					// datasheet says if DIVADDVAL > 0 then DL must be >= 2
 234:uart.c        **** 						if ((divaddval > 0) && (dl < 2))
 235:uart.c        **** 							dl = 2;
 236:uart.c        **** 
 237:uart.c        **** 						uint32_t b = calc_baud(pclk, dl, divaddval, mulval);
 238:uart.c        **** 						if (uabs(b, target_baud) < uabs(r->baud, target_baud))
 239:uart.c        **** 						{
 240:uart.c        **** 							r->baud      = b;
 241:uart.c        **** 							r->pd        = pd;
 242:uart.c        **** 							r->dl        = dl;
 243:uart.c        **** 							r->mulval    = mulval;
 244:uart.c        **** 							r->divaddval = divaddval;
 245:uart.c        **** 							// 					printf("\t\t{%7d,%4d,%6d,%3d,%3d},\t// Actual baud: %7d, error %c%4.2f%%, %d iterati
 246:uart.c        **** 							if (b == target_baud)
 247:uart.c        **** 								return i;
 248:uart.c        **** 							// within 0.08%
 249:uart.c        **** 								if ((uabs(r->baud, target_baud) * 1536 / target_baud) < 1)
 250:uart.c        **** 									return i;
 251:uart.c        **** 						}
 252:uart.c        **** 			}
 253:uart.c        **** 		}
 254:uart.c        **** 		// don't check higher pclk if we're within 0.5%
 255:uart.c        **** 		if ((uabs(r->baud, target_baud) * 200 / target_baud) < 1)
 256:uart.c        **** 			return i;
 257:uart.c        **** 	}
 258:uart.c        **** 	return i;
 259:uart.c        **** }
 260:uart.c        **** #endif
 261:uart.c        **** 
 262:uart.c        **** int UART_baud(int baud)
 263:uart.c        **** {
 227              	 .loc 1 263 0
 228              	 .cfi_startproc
 229              	 
 230              	 
 231              	.LVL7:
 264:uart.c        ****     TxIntStat = RESET;
 232              	 .loc 1 264 0
 233 0000 0023     	 movs r3,#0
 234 0002 944A     	 ldr r2,.L62
 263:uart.c        ****     TxIntStat = RESET;
 235              	 .loc 1 263 0
 236 0004 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
 237              	 .cfi_def_cfa_offset 36
 238              	 .cfi_offset 4,-36
 239              	 .cfi_offset 5,-32
 240              	 .cfi_offset 6,-28
 241              	 .cfi_offset 7,-24
 242              	 .cfi_offset 8,-20
 243              	 .cfi_offset 9,-16
 244              	 .cfi_offset 10,-12
 245              	 .cfi_offset 11,-8
 246              	 .cfi_offset 14,-4
 247              	 .loc 1 264 0
 248 0008 1370     	 strb r3,[r2]
 265:uart.c        **** 
 266:uart.c        ****     RB_ZERO(txbuf);
 249              	 .loc 1 266 0
 250 000a 934A     	 ldr r2,.L62+4
 251              	.LBB62:
 252              	.LBB63:
 212:uart.c        **** 	{
 253              	 .loc 1 212 0
 254 000c 934E     	 ldr r6,.L62+8
 255              	.LBE63:
 256              	.LBE62:
 257              	 .loc 1 266 0
 258 000e 1179     	 ldrb r1,[r2,#4]
 259 0010 1371     	 strb r3,[r2,#4]
 260 0012 5179     	 ldrb r1,[r2,#5]
 261 0014 5371     	 strb r3,[r2,#5]
 262 0016 9179     	 ldrb r1,[r2,#6]
 263 0018 9371     	 strb r3,[r2,#6]
 264 001a D179     	 ldrb r1,[r2,#7]
 265 001c D371     	 strb r3,[r2,#7]
 266 001e 1178     	 ldrb r1,[r2]
 267 0020 1370     	 strb r3,[r2]
 268 0022 5178     	 ldrb r1,[r2,#1]
 269 0024 5370     	 strb r3,[r2,#1]
 270 0026 9178     	 ldrb r1,[r2,#2]
 271 0028 9370     	 strb r3,[r2,#2]
 272 002a D178     	 ldrb r1,[r2,#3]
 273 002c D370     	 strb r3,[r2,#3]
 267:uart.c        ****     RB_ZERO(rxbuf);
 274              	 .loc 1 267 0
 275 002e 8C4A     	 ldr r2,.L62+12
 268:uart.c        **** 
 269:uart.c        **** 	uart_regs r = { 0, 0, 0, 0, 0 };
 276              	 .loc 1 269 0
 277 0030 9E46     	 mov lr,r3
 267:uart.c        ****     RB_ZERO(rxbuf);
 278              	 .loc 1 267 0
 279 0032 1179     	 ldrb r1,[r2,#4]
 280 0034 1371     	 strb r3,[r2,#4]
 281 0036 5179     	 ldrb r1,[r2,#5]
 282 0038 5371     	 strb r3,[r2,#5]
 283 003a 9179     	 ldrb r1,[r2,#6]
 284 003c 9371     	 strb r3,[r2,#6]
 285 003e D179     	 ldrb r1,[r2,#7]
 286 0040 D371     	 strb r3,[r2,#7]
 287 0042 1178     	 ldrb r1,[r2]
 288 0044 1370     	 strb r3,[r2]
 289 0046 5178     	 ldrb r1,[r2,#1]
 290 0048 5370     	 strb r3,[r2,#1]
 291 004a 9178     	 ldrb r1,[r2,#2]
 292 004c 9370     	 strb r3,[r2,#2]
 293 004e D178     	 ldrb r1,[r2,#3]
 294 0050 D370     	 strb r3,[r2,#3]
 295              	.LVL8:
 296              	.LBB94:
 297              	.LBB88:
 212:uart.c        **** 	{
 298              	 .loc 1 212 0
 299 0052 B042     	 cmp r0,r6
 300 0054 94BF     	 ite ls
 301 0056 0322     	 movls r2,#3
 302 0058 0122     	 movhi r2,#1
 303              	.LBE88:
 304              	.LBE94:
 305              	 .loc 1 269 0
 306 005a 9846     	 mov r8,r3
 307 005c 1D46     	 mov r5,r3
 263:uart.c        ****     TxIntStat = RESET;
 308              	 .loc 1 263 0
 309 005e 8BB0     	 sub sp,sp,#44
 310              	 .cfi_def_cfa_offset 80
 311              	.LBB95:
 312              	.LBB89:
 212:uart.c        **** 	{
 313              	 .loc 1 212 0
 314 0060 0192     	 str r2,[sp,#4]
 315              	.LBB64:
 214:uart.c        **** 		for (mulval = 1; mulval < 16; mulval++)
 316              	 .loc 1 214 0
 317 0062 804A     	 ldr r2,.L62+16
 318 0064 4FEA001A 	 lsl r10,r0,#4
 319 0068 1268     	 ldr r2,[r2]
 320              	.LBE64:
 321              	.LBE89:
 322              	.LBE95:
 323              	 .loc 1 269 0
 324 006a 0593     	 str r3,[sp,#20]
 325              	.LBB96:
 326              	.LBB90:
 327              	.LBB83:
 214:uart.c        **** 		for (mulval = 1; mulval < 16; mulval++)
 328              	 .loc 1 214 0
 329 006c 0692     	 str r2,[sp,#24]
 330              	.LVL9:
 331              	.L37:
 332 006e 0199     	 ldr r1,[sp,#4]
 333 0070 069A     	 ldr r2,[sp,#24]
 215:uart.c        **** 		{
 334              	 .loc 1 215 0
 335 0072 4FF0010C 	 mov ip,#1
 214:uart.c        **** 		for (mulval = 1; mulval < 16; mulval++)
 336              	 .loc 1 214 0
 337 0076 CA40     	 lsrs r2,r2,r1
 338              	.LVL10:
 339 0078 5100     	 lsls r1,r2,#1
 340              	.LBB65:
 341              	.LBB66:
 342              	.LBB67:
 204:uart.c        **** }
 343              	 .loc 1 204 0
 344 007a 8B46     	 mov fp,r1
 345 007c 5201     	 lsls r2,r2,#5
 346              	.LVL11:
 347 007e 0792     	 str r2,[sp,#28]
 348              	.LBE67:
 349              	.LBE66:
 241:uart.c        **** 							r->dl        = dl;
 350              	 .loc 1 241 0
 351 0080 9DF80420 	 ldrb r2,[sp,#4]
 352 0084 0491     	 str r1,[sp,#16]
 353              	.LBB70:
 354              	.LBB68:
 204:uart.c        **** }
 355              	 .loc 1 204 0
 356 0086 CDF80CA0 	 str r10,[sp,#12]
 357              	.LBE68:
 358              	.LBE70:
 241:uart.c        **** 							r->dl        = dl;
 359              	 .loc 1 241 0
 360 008a 0892     	 str r2,[sp,#32]
 361              	.LVL12:
 362              	.L24:
 363              	.LBE65:
 364              	.LBE83:
 365              	.LBE90:
 366              	.LBE96:
 367              	 .loc 1 269 0
 368 008c 0024     	 movs r4,#0
 369              	.LBB97:
 370              	.LBB91:
 371              	.LBB84:
 372              	.LBB78:
 243:uart.c        **** 							r->divaddval = divaddval;
 373              	 .loc 1 243 0
 374 008e 5FFA8CF2 	 uxtb r2,ip
 375              	.LBE78:
 376              	.LBE84:
 377              	.LBE91:
 378              	.LBE97:
 379              	 .loc 1 269 0
 380 0092 DDF80C90 	 ldr r9,[sp,#12]
 381              	.LBB98:
 382              	.LBB92:
 383              	.LBB85:
 384              	.LBB79:
 243:uart.c        **** 							r->divaddval = divaddval;
 385              	 .loc 1 243 0
 386 0096 0992     	 str r2,[sp,#36]
 387              	.LVL13:
 388              	.L33:
 223:uart.c        **** 
 389              	 .loc 1 223 0
 390 0098 BBFBF9F1 	 udiv r1,fp,r9
 391 009c 0131     	 adds r1,r1,#1
 392 009e 4908     	 lsrs r1,r1,#1
 393              	.LVL14:
 226:uart.c        **** 					continue;
 394              	 .loc 1 226 0
 395 00a0 B1F5803F 	 cmp r1,#65536
 396 00a4 2DD2     	 bcs .L25
 230:uart.c        **** 						dl = 1;
 397              	 .loc 1 230 0
 398 00a6 0029     	 cmp r1,#0
 399 00a8 00F0CE80 	 beq .L26
 234:uart.c        **** 							dl = 2;
 400              	 .loc 1 234 0
 401 00ac 14B1     	 cbz r4,.L27
 235:uart.c        **** 
 402              	 .loc 1 235 0
 403 00ae 0129     	 cmp r1,#1
 404 00b0 08BF     	 it eq
 405 00b2 0221     	 moveq r1,#2
 406              	.LVL15:
 407              	.L27:
 408              	.LBB71:
 409              	.LBB69:
 203:uart.c        **** 	return ((pclk * 32) / dx) * 8;
 410              	 .loc 1 203 0
 411 00b4 2203     	 lsls r2,r4,#12
 412 00b6 4A43     	 muls r2,r1,r2
 413 00b8 B2FBFCF2 	 udiv r2,r2,ip
 204:uart.c        **** }
 414              	 .loc 1 204 0
 415 00bc 079F     	 ldr r7,[sp,#28]
 203:uart.c        **** 	return ((pclk * 32) / dx) * 8;
 416              	 .loc 1 203 0
 417 00be 02EB0132 	 add r2,r2,r1,lsl#12
 418              	.LVL16:
 204:uart.c        **** }
 419              	 .loc 1 204 0
 420 00c2 B7FBF2F2 	 udiv r2,r7,r2
 421              	.LVL17:
 422 00c6 D200     	 lsls r2,r2,#3
 423              	.LVL18:
 424              	.LBE69:
 425              	.LBE71:
 426              	.LBB72:
 427              	.LBB73:
 190:uart.c        **** 		return a-b;
 428              	 .loc 1 190 0
 429 00c8 9042     	 cmp r0,r2
 191:uart.c        **** 	return b-a;
 430              	 .loc 1 191 0
 431 00ca 94BF     	 ite ls
 432 00cc 161A     	 subls r6,r2,r0
 192:uart.c        **** }
 433              	 .loc 1 192 0
 434 00ce 861A     	 subhi r6,r0,r2
 435 00d0 0296     	 str r6,[sp,#8]
 436              	.LVL19:
 437              	.LBE73:
 438              	.LBE72:
 439              	.LBB74:
 440              	.LBB75:
 190:uart.c        **** 		return a-b;
 441              	 .loc 1 190 0
 442 00d2 A842     	 cmp r0,r5
 443              	.LBE75:
 444              	.LBE74:
 238:uart.c        **** 						{
 445              	 .loc 1 238 0
 446 00d4 029E     	 ldr r6,[sp,#8]
 447              	.LBB77:
 448              	.LBB76:
 191:uart.c        **** 	return b-a;
 449              	 .loc 1 191 0
 450 00d6 94BF     	 ite ls
 451 00d8 2F1A     	 subls r7,r5,r0
 192:uart.c        **** }
 452              	 .loc 1 192 0
 453 00da 471B     	 subhi r7,r0,r5
 454              	.LVL20:
 455              	.LBE76:
 456              	.LBE77:
 238:uart.c        **** 						{
 457              	 .loc 1 238 0
 458 00dc B742     	 cmp r7,r6
 459 00de 10D9     	 bls .L25
 460              	.LVL21:
 243:uart.c        **** 							r->divaddval = divaddval;
 461              	 .loc 1 243 0
 462 00e0 099B     	 ldr r3,[sp,#36]
 246:uart.c        **** 								return i;
 463              	 .loc 1 246 0
 464 00e2 9042     	 cmp r0,r2
 243:uart.c        **** 							r->divaddval = divaddval;
 465              	 .loc 1 243 0
 466 00e4 0593     	 str r3,[sp,#20]
 241:uart.c        **** 							r->dl        = dl;
 467              	 .loc 1 241 0
 468 00e6 DDF82080 	 ldr r8,[sp,#32]
 469              	.LVL22:
 242:uart.c        **** 							r->mulval    = mulval;
 470              	 .loc 1 242 0
 471 00ea 1FFA81FE 	 uxth lr,r1
 472              	.LVL23:
 244:uart.c        **** 							// 					printf("\t\t{%7d,%4d,%6d,%3d,%3d},\t// Actual baud: %7d, error %c%4.2f%%, %d iterati
 473              	 .loc 1 244 0
 474 00ee E3B2     	 uxtb r3,r4
 475              	.LVL24:
 246:uart.c        **** 								return i;
 476              	 .loc 1 246 0
 477 00f0 23D0     	 beq .L32
 249:uart.c        **** 									return i;
 478              	 .loc 1 249 0
 479 00f2 4FF4C061 	 mov r1,#1536
 480              	.LVL25:
 481 00f6 3746     	 mov r7,r6
 482 00f8 4F43     	 muls r7,r1,r7
 483 00fa B7FBF0F7 	 udiv r7,r7,r0
 484 00fe E7B1     	 cbz r7,.L32
 485 0100 1546     	 mov r5,r2
 486              	.LVL26:
 487              	.L25:
 488              	.LBE79:
 217:uart.c        **** 			{
 489              	 .loc 1 217 0
 490 0102 0134     	 adds r4,r4,#1
 491              	.LVL27:
 492 0104 6445     	 cmp r4,ip
 493 0106 D144     	 add r9,r9,r10
 494 0108 C6D1     	 bne .L33
 495 010a 039A     	 ldr r2,[sp,#12]
 215:uart.c        **** 		{
 496              	 .loc 1 215 0
 497 010c 04F1010C 	 add ip,r4,#1
 498              	.LVL28:
 499 0110 5244     	 add r2,r2,r10
 500 0112 0392     	 str r2,[sp,#12]
 501 0114 049A     	 ldr r2,[sp,#16]
 502 0116 BCF1100F 	 cmp ip,#16
 503 011a 9344     	 add fp,fp,r2
 504 011c B6D1     	 bne .L24
 505              	.LVL29:
 255:uart.c        **** 			return i;
 506              	 .loc 1 255 0
 507 011e C821     	 movs r1,#200
 508              	.LBB80:
 509              	.LBB81:
 190:uart.c        **** 		return a-b;
 510              	 .loc 1 190 0
 511 0120 A842     	 cmp r0,r5
 191:uart.c        **** 	return b-a;
 512              	 .loc 1 191 0
 513 0122 94BF     	 ite ls
 514 0124 2A1A     	 subls r2,r5,r0
 192:uart.c        **** }
 515              	 .loc 1 192 0
 516 0126 421B     	 subhi r2,r0,r5
 517              	.LVL30:
 518              	.LBE81:
 519              	.LBE80:
 255:uart.c        **** 			return i;
 520              	 .loc 1 255 0
 521 0128 4A43     	 muls r2,r1,r2
 522 012a B2FBF0F2 	 udiv r2,r2,r0
 523 012e 22B1     	 cbz r2,.L32
 524              	.LBE85:
 212:uart.c        **** 	{
 525              	 .loc 1 212 0
 526 0130 019A     	 ldr r2,[sp,#4]
 527 0132 013A     	 subs r2,r2,#1
 528 0134 032A     	 cmp r2,#3
 529 0136 0192     	 str r2,[sp,#4]
 530              	.LVL31:
 531 0138 99D9     	 bls .L37
 532              	.LVL32:
 533              	.L32:
 534 013a B8F1020F 	 cmp r8,#2
 535 013e 96BF     	 itet ls
 536 0140 494A     	 ldrls r2,.L62+20
 537              	.LBB86:
 215:uart.c        **** 		{
 538              	 .loc 1 215 0
 539 0142 0321     	 movhi r1,#3
 540 0144 12F80810 	 ldrbls r1,[r2,r8]
 541              	.LVL33:
 542              	.LBE86:
 543              	.LBE92:
 544              	.LBE98:
 270:uart.c        **** 
 271:uart.c        **** 	baud_space_search(baud, &r);
 272:uart.c        **** 
 273:uart.c        **** 	uint8_t pclkdiv;
 274:uart.c        **** 	IRQn_Type c = 255;
 275:uart.c        **** 
 276:uart.c        **** 	switch (r.pd)
 277:uart.c        **** 	{
 278:uart.c        **** 		case 0:
 279:uart.c        **** 			pclkdiv = CLKPWR_PCLKSEL_CCLK_DIV_1;
 280:uart.c        **** 			break;
 281:uart.c        **** 		case 1:
 282:uart.c        **** 			pclkdiv = CLKPWR_PCLKSEL_CCLK_DIV_2;
 283:uart.c        **** 			break;
 284:uart.c        **** 		case 2:
 285:uart.c        **** 			pclkdiv = CLKPWR_PCLKSEL_CCLK_DIV_4;
 286:uart.c        **** 			break;
 287:uart.c        **** 		default:
 288:uart.c        **** 		case 3:
 289:uart.c        **** 			pclkdiv = CLKPWR_PCLKSEL_CCLK_DIV_8;
 290:uart.c        **** 			break;
 291:uart.c        **** 	}
 292:uart.c        **** 
 293:uart.c        **** // PCLKSEL0
 294:uart.c        **** #define PCLK_UART0 6
 295:uart.c        **** #define PCLK_UART1 8
 296:uart.c        **** // PCLKSEL1
 297:uart.c        **** #define PCLK_UART2 16
 298:uart.c        **** #define PCLK_UART3 18
 299:uart.c        **** 
 300:uart.c        **** 	switch(port)
 545              	 .loc 1 300 0
 546 0148 484A     	 ldr r2,.L62+24
 547 014a 1268     	 ldr r2,[r2]
 548 014c 032A     	 cmp r2,#3
 549 014e 78D8     	 bhi .L47
 550 0150 DFE802F0 	 tbb [pc,r2]
 551              	.L41:
 552 0154 02       	 .byte (.L40-.L41)/2
 553 0155 44       	 .byte (.L42-.L41)/2
 554 0156 55       	 .byte (.L43-.L41)/2
 555 0157 66       	 .byte (.L44-.L41)/2
 556              	 .p2align 1
 557              	.L40:
 301:uart.c        **** 	{
 302:uart.c        **** 		case 0:
 303:uart.c        **** 			LPC_SC->PCONP |= CLKPWR_PCONP_PCUART0;
 558              	 .loc 1 303 0
 559 0158 454C     	 ldr r4,.L62+28
 560 015a D4F8C420 	 ldr r2,[r4,#196]
 561 015e 42F00802 	 orr r2,r2,#8
 562 0162 C4F8C420 	 str r2,[r4,#196]
 304:uart.c        **** 			LPC_SC->PCLKSEL0 = (LPC_SC->PCLKSEL0 & ~(3 << PCLK_UART0)) | pclkdiv << PCLK_UART0;
 563              	 .loc 1 304 0
 564 0166 D4F8A821 	 ldr r2,[r4,#424]
 565 016a 22F0C002 	 bic r2,r2,#192
 566 016e 42EA8112 	 orr r2,r2,r1,lsl#6
 305:uart.c        **** 			c = UART0_IRQn;
 567              	 .loc 1 305 0
 568 0172 0521     	 movs r1,#5
 569              	.LVL34:
 304:uart.c        **** 			LPC_SC->PCLKSEL0 = (LPC_SC->PCLKSEL0 & ~(3 << PCLK_UART0)) | pclkdiv << PCLK_UART0;
 570              	 .loc 1 304 0
 571 0174 C4F8A821 	 str r2,[r4,#424]
 572              	.LVL35:
 573              	.L39:
 306:uart.c        **** 			break;
 307:uart.c        **** 		case 1:
 308:uart.c        **** 			LPC_SC->PCONP |= CLKPWR_PCONP_PCUART1;
 309:uart.c        **** 			LPC_SC->PCLKSEL0 = (LPC_SC->PCLKSEL0 & ~(3 << PCLK_UART1)) | pclkdiv << PCLK_UART1;
 310:uart.c        **** 			c = UART1_IRQn;
 311:uart.c        **** 			break;
 312:uart.c        **** 		case 2:
 313:uart.c        **** 			LPC_SC->PCONP |= CLKPWR_PCONP_PCUART2;
 314:uart.c        **** 			LPC_SC->PCLKSEL1 = (LPC_SC->PCLKSEL1 & ~(3 << PCLK_UART2)) | pclkdiv << PCLK_UART2;
 315:uart.c        **** 			c = UART2_IRQn;
 316:uart.c        **** 			break;
 317:uart.c        **** 		case 3:
 318:uart.c        **** 			LPC_SC->PCONP |= CLKPWR_PCONP_PCUART3;
 319:uart.c        **** 			LPC_SC->PCLKSEL1 = (LPC_SC->PCLKSEL1 & ~(3 << PCLK_UART3)) | pclkdiv << PCLK_UART3;
 320:uart.c        **** 			c = UART3_IRQn;
 321:uart.c        **** 			break;
 322:uart.c        **** 	}
 323:uart.c        **** 
 324:uart.c        **** 	u->LCR |= UART_LCR_DLAB_EN;
 574              	 .loc 1 324 0
 575 0178 3E4A     	 ldr r2,.L62+32
 325:uart.c        **** 	u->DLM = (r.dl >> 8) & 0xFF;
 326:uart.c        **** 	u->DLL = (r.dl & 0xFF);
 327:uart.c        **** 	u->LCR &= ~(UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
 328:uart.c        **** 	u->FDR = (r.divaddval & 0xF) | ((r.mulval & 0xF) << 4);
 576              	 .loc 1 328 0
 577 017a 03F00F03 	 and r3,r3,#15
 578              	.LVL36:
 324:uart.c        **** 	u->DLM = (r.dl >> 8) & 0xFF;
 579              	 .loc 1 324 0
 580 017e 1268     	 ldr r2,[r2]
 581 0180 147B     	 ldrb r4,[r2,#12]
 582 0182 44F08004 	 orr r4,r4,#128
 583 0186 1473     	 strb r4,[r2,#12]
 325:uart.c        **** 	u->DLM = (r.dl >> 8) & 0xFF;
 584              	 .loc 1 325 0
 585 0188 4FEA1E24 	 lsr r4,lr,#8
 326:uart.c        **** 	u->LCR &= ~(UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
 586              	 .loc 1 326 0
 587 018c 5FFA8EFE 	 uxtb lr,lr
 588              	.LVL37:
 325:uart.c        **** 	u->DLM = (r.dl >> 8) & 0xFF;
 589              	 .loc 1 325 0
 590 0190 1471     	 strb r4,[r2,#4]
 326:uart.c        **** 	u->LCR &= ~(UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
 591              	 .loc 1 326 0
 592 0192 82F800E0 	 strb lr,[r2]
 327:uart.c        **** 	u->FDR = (r.divaddval & 0xF) | ((r.mulval & 0xF) << 4);
 593              	 .loc 1 327 0
 594 0196 147B     	 ldrb r4,[r2,#12]
 595 0198 04F07F04 	 and r4,r4,#127
 596 019c 1473     	 strb r4,[r2,#12]
 597              	 .loc 1 328 0
 598 019e 059C     	 ldr r4,[sp,#20]
 599 01a0 43EA0413 	 orr r3,r3,r4,lsl#4
 600 01a4 DBB2     	 uxtb r3,r3
 601 01a6 82F82830 	 strb r3,[r2,#40]
 329:uart.c        **** 
 330:uart.c        **** 	u->FCR = (UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
 602              	 .loc 1 330 0
 603 01aa 0723     	 movs r3,#7
 604 01ac 1372     	 strb r3,[r2,#8]
 331:uart.c        **** 	u->LCR = UART_LCR_WLEN8;
 605              	 .loc 1 331 0
 606 01ae 0323     	 movs r3,#3
 607 01b0 1373     	 strb r3,[r2,#12]
 332:uart.c        **** 	u->ICR = 0;
 608              	 .loc 1 332 0
 609 01b2 0023     	 movs r3,#0
 610 01b4 82F82430 	 strb r3,[r2,#36]
 333:uart.c        **** 	u->TER |= UART_TER_TXEN;
 611              	 .loc 1 333 0
 612 01b8 92F83030 	 ldrb r3,[r2,#48]
 613 01bc 43F08003 	 orr r3,r3,#128
 614 01c0 82F83030 	 strb r3,[r2,#48]
 615              	.LVL38:
 616              	.LBB99:
 617              	.LBB100:
 618              	 .file 2 "CMSISv2p00_LPC17xx/inc/core_cm3.h"
   1:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /**************************************************************************//**
   2:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @file     core_cm3.h
   3:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @version  V2.01
   5:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @date     06. December 2010
   6:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *
   7:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @note
   8:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *
  10:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @par
  11:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *
  15:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @par
  16:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *
  22:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  ******************************************************************************/
  23:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if defined ( __ICCARM__ )
  24:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
  26:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  27:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #ifdef __cplusplus
  28:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  extern "C" {
  29:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
  30:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  31:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  34:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  35:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*******************************************************************************
  36:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *                 CMSIS definitions
  37:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  ******************************************************************************/
  38:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** @ingroup  CMSIS
  39:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  40:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  41:CMSISv2p00_LPC17xx/inc/core_cm3.h ****    - CMSIS version number
  42:CMSISv2p00_LPC17xx/inc/core_cm3.h ****    - Cortex-M core
  43:CMSISv2p00_LPC17xx/inc/core_cm3.h ****    - Cortex-M core Revision Number
  44:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
  45:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
  46:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  47:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*  CMSIS CM3 definitions */
  48:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  49:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  50:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  51:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  52:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  53:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  54:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  55:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if defined ( __CC_ARM   )
  56:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  57:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  58:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   
  59:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
  60:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  61:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  62:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  63:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #elif defined   (  __GNUC__  )
  64:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  65:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  66:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   
  67:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #elif defined   (  __TASKING__  )
  68:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  69:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  70:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  71:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
  72:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  73:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  74:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  75:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  76:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  77:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  78:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  79:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  80:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #ifndef __CMSIS_GENERIC
  81:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  82:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  83:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  84:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  85:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  86:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #ifdef __cplusplus
  87:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  88:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #else
  89:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  90:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
  91:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
  92:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
  93:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  94:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_core_definitions */
  95:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  96:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  97:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
  98:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*******************************************************************************
  99:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *                 Register Abstraction
 100:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  ******************************************************************************/
 101:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 102:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** @ingroup  CMSIS
 103:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @addtogroup CMSIS_core_register CMSIS Core Register
 104:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Core Register contain:
 105:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core Register
 106:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core NVIC Register
 107:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core SCB Register
 108:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core SysTick Register
 109:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core Debug Register
 110:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core MPU Register
 111:CMSISv2p00_LPC17xx/inc/core_cm3.h **** */
 112:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 113:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 114:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 115:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 116:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 117:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 118:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 119:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 120:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 121:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef union
 122:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 123:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   struct
 124:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   {
 125:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 126:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 127:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #else
 128:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 129:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 130:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 131:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
 132:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 133:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 134:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 135:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 136:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 137:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 138:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 139:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } APSR_Type;
 140:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 141:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 142:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 143:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 144:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef union
 145:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 146:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   struct
 147:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   {
 148:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 149:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 150:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 151:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 152:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } IPSR_Type;
 153:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 154:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 155:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 156:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 157:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef union
 158:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 159:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   struct
 160:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   {
 161:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 162:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 163:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 164:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #else
 165:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 166:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 167:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 168:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
 169:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 170:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 171:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 172:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 173:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 174:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 175:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 176:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 177:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 178:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } xPSR_Type;
 179:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 180:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 181:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 182:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 183:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef union
 184:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 185:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   struct
 186:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   {
 187:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 188:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 189:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 190:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 191:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 192:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 193:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } CONTROL_Type;
 194:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 195:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_CORE */
 196:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 197:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 198:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 199:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 200:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 201:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 202:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 203:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 204:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 205:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 206:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 207:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 208:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 209:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED0[24];
 210:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 211:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RSERVED1[24];
 212:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 213:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED2[24];
 214:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 215:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED3[24];
 216:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 217:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED4[56];
 218:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 219:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED5[644];
 220:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 221:CMSISv2p00_LPC17xx/inc/core_cm3.h **** }  NVIC_Type;
 222:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 223:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 224:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 225:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 226:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 227:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 228:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 229:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 230:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 231:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 232:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 233:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 234:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 235:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 236:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 237:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 238:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 239:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 240:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 241:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 242:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 243:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 244:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 245:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 246:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 247:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 248:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 249:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 250:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 251:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 252:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 253:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 254:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 255:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } SCB_Type;
 256:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 257:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB CPUID Register Definitions */
 258:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 259:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 260:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 261:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 262:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 263:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 264:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 265:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 266:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 267:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 268:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 269:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 270:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 271:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 272:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 273:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 274:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 275:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 276:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 277:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 278:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 279:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 280:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 281:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 282:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 283:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 284:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 285:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 286:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 287:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 288:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 289:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 290:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 291:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 292:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 293:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 294:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 295:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 296:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 297:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 298:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 299:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 300:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 301:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 302:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 303:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 304:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 305:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 306:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 307:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 308:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 309:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 310:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 311:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 312:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 313:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 314:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 315:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 316:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 317:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 318:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 319:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 320:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 321:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 322:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 323:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 324:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 325:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 326:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 327:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 328:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 329:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 330:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB System Control Register Definitions */
 331:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 332:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 333:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 334:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 335:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 336:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 337:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 338:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 339:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 340:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 341:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 342:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 343:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 344:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 345:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 346:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 347:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 348:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 349:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 350:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 351:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 352:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 353:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 354:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 355:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 356:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 357:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 358:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 359:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 360:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 361:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 362:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 363:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 364:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 365:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 366:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 367:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 368:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 369:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 370:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 371:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 372:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 373:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 374:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 375:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 376:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 377:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 378:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 379:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 380:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 381:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 382:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 383:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 384:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 385:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 386:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 387:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 388:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 389:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 390:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 391:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 392:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 393:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 394:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 395:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 396:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 397:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 398:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 399:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 400:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 401:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 402:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 403:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 404:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 405:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 406:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 407:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 408:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 409:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 410:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 411:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 412:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 413:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 414:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 415:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 416:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 417:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 418:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 419:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 420:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 421:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 422:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 423:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 424:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 425:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 426:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 427:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 428:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 429:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 430:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 431:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 432:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 433:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 434:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 435:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 436:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 437:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 438:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_SCB */
 439:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 440:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 441:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 442:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 443:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 444:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 445:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 446:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 447:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 448:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 449:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 450:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 451:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 452:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 453:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 454:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 455:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } SysTick_Type;
 456:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 457:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 458:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 459:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 460:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 461:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 462:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 463:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 464:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 465:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 466:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 467:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 468:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 469:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 470:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SysTick Reload Register Definitions */
 471:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 472:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 473:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 474:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SysTick Current Register Definitions */
 475:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 476:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 477:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 478:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* SysTick Calibration Register Definitions */
 479:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 480:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 481:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 482:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 483:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 484:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 485:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 486:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 487:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 488:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 489:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 490:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 491:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 492:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 493:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 494:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 495:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 496:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 497:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 498:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 499:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 500:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 501:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __O  union
 502:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   {
 503:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 504:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 505:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 506:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 507:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED0[864];
 508:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 509:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED1[15];
 510:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 511:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED2[15];
 512:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 513:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED3[29];
 514:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 515:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 516:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 517:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED4[43];
 518:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 519:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 520:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED5[6];
 521:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 522:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 523:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 524:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 525:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 526:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 527:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 528:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 529:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 530:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 531:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 532:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 533:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } ITM_Type;
 534:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 535:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 536:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 537:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 538:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 539:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Trace Control Register Definitions */
 540:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 541:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 542:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 543:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 544:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 545:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 546:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 547:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 548:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 549:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 550:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 551:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 552:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 553:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 554:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 555:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 556:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 557:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 558:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 559:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 560:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 561:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 562:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 563:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 564:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Integration Write Register Definitions */
 565:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 566:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 567:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 568:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Integration Read Register Definitions */
 569:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 570:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 571:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 572:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 573:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 574:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 575:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 576:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ITM Lock Status Register Definitions */
 577:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 578:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 579:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 580:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 581:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 582:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 583:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 584:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 585:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 586:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 587:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 588:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 589:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 590:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 591:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 592:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 593:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 594:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 595:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 596:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 597:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 598:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 599:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED0;
 600:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 601:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 602:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 603:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #else
 604:CMSISv2p00_LPC17xx/inc/core_cm3.h ****        uint32_t RESERVED1;
 605:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
 606:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } InterruptType_Type;
 607:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 608:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 609:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 610:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 611:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 612:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Auxiliary Control Register Definitions */
 613:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 614:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 615:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 616:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 617:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 618:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 619:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 620:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 621:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 622:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 623:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 624:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 625:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
 626:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 627:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 628:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 629:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 630:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 631:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 632:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 633:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 634:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 635:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 636:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 637:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 638:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 639:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 640:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 641:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 642:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 643:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 644:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 645:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 646:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 647:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } MPU_Type;
 648:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 649:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* MPU Type Register */
 650:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 651:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 652:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 653:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 654:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 655:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 656:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 657:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 658:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 659:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* MPU Control Register */
 660:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 661:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 662:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 663:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 664:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 665:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 666:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 667:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 668:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 669:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* MPU Region Number Register */
 670:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 671:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 672:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 673:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* MPU Region Base Address Register */
 674:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 675:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 676:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 677:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 678:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 679:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 680:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 681:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 682:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 683:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* MPU Region Attribute and Size Register */
 684:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 685:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 686:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 687:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 688:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 689:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 690:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 691:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 692:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 693:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 694:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 695:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 696:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 697:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 698:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 699:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 700:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 701:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 702:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 703:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 704:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 705:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 706:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 707:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 708:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 709:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 710:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 711:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_MPU */
 712:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
 713:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 714:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 715:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 716:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 717:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 718:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 719:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 720:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 721:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 722:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 723:CMSISv2p00_LPC17xx/inc/core_cm3.h **** typedef struct
 724:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 725:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 726:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 727:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 728:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 729:CMSISv2p00_LPC17xx/inc/core_cm3.h **** } CoreDebug_Type;
 730:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 731:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Debug Halting Control and Status Register */
 732:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 733:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 734:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 735:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 736:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 737:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 738:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 739:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 740:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 741:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 742:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 743:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 744:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 745:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 746:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 747:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 748:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 749:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 750:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 751:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 752:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 753:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 754:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 755:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 756:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 757:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 758:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 759:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 760:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 761:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 762:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 763:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 764:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 765:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 766:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 767:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 768:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Debug Core Register Selector Register */
 769:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 770:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 771:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 772:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 773:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 774:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 775:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 776:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 777:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 778:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 779:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 780:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 781:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 782:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 783:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 784:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 785:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 786:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 787:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 788:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 789:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 790:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 791:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 792:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 793:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 794:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 795:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 796:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 797:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 798:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 799:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 800:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 801:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 802:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 803:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 804:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 805:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 806:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 807:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 808:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 809:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 810:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 811:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 812:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 813:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 814:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 815:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 816:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 817:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 818:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 819:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 820:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 821:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 822:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 823:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 824:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 825:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 826:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 827:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 828:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 829:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 830:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 831:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 832:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 833:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 834:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 835:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 836:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 837:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
 838:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 839:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 840:CMSISv2p00_LPC17xx/inc/core_cm3.h **** #endif
 841:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 842:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*@} */
 843:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 844:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 845:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 846:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /*******************************************************************************
 847:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  *                Hardware Abstraction Layer
 848:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  ******************************************************************************/
 849:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS
 850:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 851:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Core Function Interface contains:
 852:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core NVIC Functions
 853:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core SysTick Functions
 854:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core Debug Functions
 855:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   - Core Register Access Functions
 856:CMSISv2p00_LPC17xx/inc/core_cm3.h **** */
 857:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 858:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 859:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 860:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 861:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 862:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 863:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   @{
 864:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 865:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 866:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  * @{
 867:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 868:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Set Priority Grouping
 869:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 870:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 871:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 872:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Only values from 0..7 are used.
 873:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   In case of a conflict between priority grouping and available
 874:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 875:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 876:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 877:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 878:CMSISv2p00_LPC17xx/inc/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 879:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 880:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t reg_value;
 881:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 882:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 883:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 884:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 885:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   reg_value  =  (reg_value                       |
 886:CMSISv2p00_LPC17xx/inc/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 887:CMSISv2p00_LPC17xx/inc/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 888:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   SCB->AIRCR =  reg_value;
 889:CMSISv2p00_LPC17xx/inc/core_cm3.h **** }
 890:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 891:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 892:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Get Priority Grouping
 893:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 894:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 895:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 896:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 897:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \return                Priority grouping field
 898:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 899:CMSISv2p00_LPC17xx/inc/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 900:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 901:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 902:CMSISv2p00_LPC17xx/inc/core_cm3.h **** }
 903:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 904:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 905:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Enable External Interrupt
 906:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 907:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 908:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     The interrupt number cannot be a negative value.
 909:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 910:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 911:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 912:CMSISv2p00_LPC17xx/inc/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 913:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 914:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 619              	 .loc 2 914 0
 620 01c4 0123     	 movs r3,#1
 621 01c6 4A09     	 lsrs r2,r1,#5
 622 01c8 01F01F01 	 and r1,r1,#31
 623              	.LVL39:
 624 01cc 03FA01F1 	 lsl r1,r3,r1
 625 01d0 294B     	 ldr r3,.L62+36
 626 01d2 43F82210 	 str r1,[r3,r2,lsl#2]
 627              	.LVL40:
 628              	.LBE100:
 629              	.LBE99:
 334:uart.c        **** 
 335:uart.c        **** 	if (c < 128)
 336:uart.c        **** 		NVIC_EnableIRQ(c);
 337:uart.c        **** 
 338:uart.c        ****     return baud;
 339:uart.c        **** }
 630              	 .loc 1 339 0
 631 01d6 0BB0     	 add sp,sp,#44
 632              	 .cfi_remember_state
 633              	 .cfi_def_cfa_offset 36
 634              	 
 635 01d8 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 636              	.LVL41:
 637              	.L42:
 638              	 .cfi_restore_state
 308:uart.c        **** 			LPC_SC->PCLKSEL0 = (LPC_SC->PCLKSEL0 & ~(3 << PCLK_UART1)) | pclkdiv << PCLK_UART1;
 639              	 .loc 1 308 0
 640 01dc 244C     	 ldr r4,.L62+28
 641 01de D4F8C420 	 ldr r2,[r4,#196]
 642 01e2 42F01002 	 orr r2,r2,#16
 643 01e6 C4F8C420 	 str r2,[r4,#196]
 309:uart.c        **** 			c = UART1_IRQn;
 644              	 .loc 1 309 0
 645 01ea D4F8A821 	 ldr r2,[r4,#424]
 646 01ee 22F44072 	 bic r2,r2,#768
 647 01f2 42EA0122 	 orr r2,r2,r1,lsl#8
 648 01f6 C4F8A821 	 str r2,[r4,#424]
 649              	.LVL42:
 310:uart.c        **** 			break;
 650              	 .loc 1 310 0
 651 01fa 0621     	 movs r1,#6
 652              	.LVL43:
 311:uart.c        **** 		case 2:
 653              	 .loc 1 311 0
 654 01fc BCE7     	 b .L39
 655              	.LVL44:
 656              	.L43:
 313:uart.c        **** 			LPC_SC->PCLKSEL1 = (LPC_SC->PCLKSEL1 & ~(3 << PCLK_UART2)) | pclkdiv << PCLK_UART2;
 657              	 .loc 1 313 0
 658 01fe 1C4C     	 ldr r4,.L62+28
 659 0200 D4F8C420 	 ldr r2,[r4,#196]
 660 0204 42F08072 	 orr r2,r2,#16777216
 661 0208 C4F8C420 	 str r2,[r4,#196]
 314:uart.c        **** 			c = UART2_IRQn;
 662              	 .loc 1 314 0
 663 020c D4F8AC21 	 ldr r2,[r4,#428]
 664 0210 22F44032 	 bic r2,r2,#196608
 665 0214 42EA0142 	 orr r2,r2,r1,lsl#16
 666 0218 C4F8AC21 	 str r2,[r4,#428]
 667              	.LVL45:
 315:uart.c        **** 			break;
 668              	 .loc 1 315 0
 669 021c 0721     	 movs r1,#7
 670              	.LVL46:
 316:uart.c        **** 		case 3:
 671              	 .loc 1 316 0
 672 021e ABE7     	 b .L39
 673              	.LVL47:
 674              	.L44:
 318:uart.c        **** 			LPC_SC->PCLKSEL1 = (LPC_SC->PCLKSEL1 & ~(3 << PCLK_UART3)) | pclkdiv << PCLK_UART3;
 675              	 .loc 1 318 0
 676 0220 134C     	 ldr r4,.L62+28
 677 0222 D4F8C420 	 ldr r2,[r4,#196]
 678 0226 42F00072 	 orr r2,r2,#33554432
 679 022a C4F8C420 	 str r2,[r4,#196]
 319:uart.c        **** 			c = UART3_IRQn;
 680              	 .loc 1 319 0
 681 022e D4F8AC21 	 ldr r2,[r4,#428]
 682 0232 22F44022 	 bic r2,r2,#786432
 683 0236 42EA8142 	 orr r2,r2,r1,lsl#18
 684 023a C4F8AC21 	 str r2,[r4,#428]
 685              	.LVL48:
 320:uart.c        **** 			break;
 686              	 .loc 1 320 0
 687 023e 0821     	 movs r1,#8
 688              	.LVL49:
 321:uart.c        **** 	}
 689              	 .loc 1 321 0
 690 0240 9AE7     	 b .L39
 691              	.LVL50:
 692              	.L47:
 274:uart.c        **** 
 693              	 .loc 1 274 0
 694 0242 4FF0FF31 	 mov r1,#-1
 695              	.LVL51:
 696 0246 97E7     	 b .L39
 697              	.LVL52:
 698              	.L26:
 699              	.LBB101:
 700              	.LBB93:
 701              	.LBB87:
 702              	.LBB82:
 235:uart.c        **** 
 703              	 .loc 1 235 0
 704 0248 002C     	 cmp r4,#0
 705 024a 0CBF     	 ite eq
 706 024c 0121     	 moveq r1,#1
 707 024e 0221     	 movne r1,#2
 708 0250 30E7     	 b .L27
 709              	.L63:
 710 0252 00BF     	 .align 2
 711              	.L62:
 712 0254 00000000 	 .word TxIntStat
 713 0258 00000000 	 .word txbuf
 714 025c 3F420F00 	 .word 999999
 715 0260 00000000 	 .word rxbuf
 716 0264 00000000 	 .word SystemCoreClock
 717 0268 00000000 	 .word .LANCHOR0
 718 026c 00000000 	 .word port
 719 0270 00C00F40 	 .word 1074774016
 720 0274 00000000 	 .word u
 721 0278 00E100E0 	 .word -536813312
 722              	.LBE82:
 723              	.LBE87:
 724              	.LBE93:
 725              	.LBE101:
 726              	 .cfi_endproc
 727              	.LFE60:
 729              	 .section .text.UART_init,"ax",%progbits
 730              	 .align 1
 731              	 .global UART_init
 732              	 .syntax unified
 733              	 .thumb
 734              	 .thumb_func
 735              	 .fpu softvfp
 737              	UART_init:
 738              	.LFB55:
  85:uart.c        ****     UART_pin_init(rxpin, txpin);
 739              	 .loc 1 85 0
 740              	 .cfi_startproc
 741              	 
 742              	 
 743              	.LVL53:
 744 0000 10B5     	 push {r4,lr}
 745              	 .cfi_def_cfa_offset 8
 746              	 .cfi_offset 4,-8
 747              	 .cfi_offset 14,-4
  85:uart.c        ****     UART_pin_init(rxpin, txpin);
 748              	 .loc 1 85 0
 749 0002 1446     	 mov r4,r2
  86:uart.c        ****     UART_baud(baud);
 750              	 .loc 1 86 0
 751 0004 034B     	 ldr r3,.L65
 752 0006 9847     	 blx r3
 753              	.LVL54:
  87:uart.c        **** }
 754              	 .loc 1 87 0
 755 0008 2046     	 mov r0,r4
  88:uart.c        **** 
 756              	 .loc 1 88 0
 757 000a BDE81040 	 pop {r4,lr}
 758              	 .cfi_restore 14
 759              	 .cfi_restore 4
 760              	 .cfi_def_cfa_offset 0
 761              	.LVL55:
  87:uart.c        **** }
 762              	 .loc 1 87 0
 763 000e 024B     	 ldr r3,.L65+4
 764 0010 1847     	 bx r3
 765              	.LVL56:
 766              	.L66:
 767 0012 00BF     	 .align 2
 768              	.L65:
 769 0014 00000000 	 .word UART_pin_init
 770 0018 00000000 	 .word UART_baud
 771              	 .cfi_endproc
 772              	.LFE55:
 774              	 .section .text.UART_deinit,"ax",%progbits
 775              	 .align 1
 776              	 .global UART_deinit
 777              	 .syntax unified
 778              	 .thumb
 779              	 .thumb_func
 780              	 .fpu softvfp
 782              	UART_deinit:
 783              	.LFB61:
 340:uart.c        **** 
 341:uart.c        **** void UART_deinit(void) {
 784              	 .loc 1 341 0
 785              	 .cfi_startproc
 786              	 
 787              	 
 788              	 
 342:uart.c        **** 	switch(port)
 789              	 .loc 1 342 0
 790 0000 094B     	 ldr r3,.L75
 791 0002 1B68     	 ldr r3,[r3]
 792 0004 032B     	 cmp r3,#3
 793 0006 07D8     	 bhi .L67
 794 0008 DFE803F0 	 tbb [pc,r3]
 795              	.L70:
 796 000c 02       	 .byte (.L69-.L70)/2
 797 000d 07       	 .byte (.L71-.L70)/2
 798 000e 09       	 .byte (.L72-.L70)/2
 799 000f 0B       	 .byte (.L73-.L70)/2
 800              	 .p2align 1
 801              	.L69:
 802              	.LVL57:
 803              	.LBB102:
 804              	.LBB103:
 915:CMSISv2p00_LPC17xx/inc/core_cm3.h **** }
 916:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 917:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 918:CMSISv2p00_LPC17xx/inc/core_cm3.h **** /** \brief  Disable External Interrupt
 919:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 920:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     This function disables a device specific interupt in the NVIC interrupt controller.
 921:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     The interrupt number cannot be a negative value.
 922:CMSISv2p00_LPC17xx/inc/core_cm3.h **** 
 923:CMSISv2p00_LPC17xx/inc/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 924:CMSISv2p00_LPC17xx/inc/core_cm3.h ****  */
 925:CMSISv2p00_LPC17xx/inc/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 926:CMSISv2p00_LPC17xx/inc/core_cm3.h **** {
 927:CMSISv2p00_LPC17xx/inc/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 805              	 .loc 2 927 0
 806 0010 2022     	 movs r2,#32
 807              	.LVL58:
 808              	.L74:
 809              	.LBE103:
 810              	.LBE102:
 811              	.LBB104:
 812              	.LBB105:
 813 0012 064B     	 ldr r3,.L75+4
 814 0014 C3F88020 	 str r2,[r3,#128]
 815              	.L67:
 816 0018 7047     	 bx lr
 817              	.L71:
 818              	.LVL59:
 819              	.LBE105:
 820              	.LBE104:
 821              	.LBB107:
 822              	.LBB108:
 823 001a 4022     	 movs r2,#64
 824 001c F9E7     	 b .L74
 825              	.LVL60:
 826              	.L72:
 827              	.LBE108:
 828              	.LBE107:
 829              	.LBB109:
 830              	.LBB110:
 831 001e 8022     	 movs r2,#128
 832 0020 F7E7     	 b .L74
 833              	.LVL61:
 834              	.L73:
 835              	.LBE110:
 836              	.LBE109:
 837              	.LBB111:
 838              	.LBB106:
 839 0022 4FF48072 	 mov r2,#256
 840 0026 F4E7     	 b .L74
 841              	.L76:
 842              	 .align 2
 843              	.L75:
 844 0028 00000000 	 .word port
 845 002c 00E100E0 	 .word -536813312
 846              	.LBE106:
 847              	.LBE111:
 848              	 .cfi_endproc
 849              	.LFE61:
 851              	 .section .text.UART_recv,"ax",%progbits
 852              	 .align 1
 853              	 .global UART_recv
 854              	 .syntax unified
 855              	 .thumb
 856              	 .thumb_func
 857              	 .fpu softvfp
 859              	UART_recv:
 860              	.LFB63:
 343:uart.c        **** 	{
 344:uart.c        **** 		case 0:
 345:uart.c        **** 			NVIC_DisableIRQ(UART0_IRQn);
 346:uart.c        **** 			break;
 347:uart.c        **** 		case 1:
 348:uart.c        **** 			NVIC_DisableIRQ(UART1_IRQn);
 349:uart.c        **** 			break;
 350:uart.c        **** 		case 2:
 351:uart.c        **** 			NVIC_DisableIRQ(UART2_IRQn);
 352:uart.c        **** 			break;
 353:uart.c        **** 		case 3:
 354:uart.c        **** 			NVIC_DisableIRQ(UART3_IRQn);
 355:uart.c        **** 			break;
 356:uart.c        **** 	}
 357:uart.c        **** }
 358:uart.c        **** 
 359:uart.c        **** uint32_t UART_send(const uint8_t *data, uint32_t buflen) {
 360:uart.c        ****     uint32_t bytes = 0;
 361:uart.c        **** 
 362:uart.c        ****     // only fiddle interrupt status outside interrupt context
 363:uart.c        ****     uint8_t intr = __get_IPSR() & 0x1F;
 364:uart.c        **** 
 365:uart.c        ****     if (intr == 0) __disable_irq();
 366:uart.c        **** 
 367:uart.c        ****     while ((buflen > 0) && (!RB_FULL(txbuf) || blocking))
 368:uart.c        ****     {
 369:uart.c        ****         if (intr == 0) __enable_irq();
 370:uart.c        **** 
 371:uart.c        ****         if (RB_FULL(txbuf)) {
 372:uart.c        ****             if (blocking && (intr == 0))
 373:uart.c        ****             {
 374:uart.c        ****                 while (RB_FULL(txbuf))
 375:uart.c        ****                     __WFI();
 376:uart.c        ****             }
 377:uart.c        ****             else {
 378:uart.c        ****                 RB_DROP(txbuf);
 379:uart.c        ****             }
 380:uart.c        ****         }
 381:uart.c        **** 
 382:uart.c        ****         if (intr == 0) __disable_irq();
 383:uart.c        **** 
 384:uart.c        ****         RB_PUSH(txbuf, *data++);
 385:uart.c        **** 
 386:uart.c        ****         if (intr == 0) __enable_irq();
 387:uart.c        **** 
 388:uart.c        ****         bytes++;
 389:uart.c        ****         buflen--;
 390:uart.c        **** 
 391:uart.c        ****         if (intr == 0) __disable_irq();
 392:uart.c        ****     }
 393:uart.c        ****     if (intr == 0) __enable_irq();
 394:uart.c        **** 
 395:uart.c        ****     if (TxIntStat == RESET) {
 396:uart.c        ****         UART_tx_isr();
 397:uart.c        ****     }
 398:uart.c        **** 
 399:uart.c        ****     return bytes;
 400:uart.c        **** }
 401:uart.c        **** 
 402:uart.c        **** uint32_t UART_recv(uint8_t *buf, uint32_t buflen) {
 861              	 .loc 1 402 0
 862              	 .cfi_startproc
 863              	 
 864              	 
 865              	.LVL62:
 866 0000 70B5     	 push {r4,r5,r6,lr}
 867              	 .cfi_def_cfa_offset 16
 868              	 .cfi_offset 4,-16
 869              	 .cfi_offset 5,-12
 870              	 .cfi_offset 6,-8
 871              	 .cfi_offset 14,-4
 872              	 .loc 1 402 0
 873 0002 0646     	 mov r6,r0
 874              	.LBB112:
 875              	.LBB113:
 876              	 .file 3 "CMSISv2p00_LPC17xx/inc/core_cmFunc.h"
   1:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /**************************************************************************//**
   2:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * @version  V2.01
   5:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * @date     06. December 2010
   6:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  *
   7:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * @note
   8:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  *
  10:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * @par
  11:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  *
  15:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * @par
  16:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  *
  22:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  ******************************************************************************/
  23:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  24:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H__
  25:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #define __CORE_CMFUNC_H__
  26:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  27:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  28:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  29:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  30:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   @{
  31:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
  32:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  33:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
  34:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* ARM armcc specific functions */
  35:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  36:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  37:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  38:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  39:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get Control Register
  40:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  41:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
  42:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  43:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               Control Register value
  44:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
  45:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
  46:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          uint32_t __get_CONTROL(void);
  47:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
  48:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE uint32_t __get_CONTROL(void)
  49:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
  50:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  51:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(__regControl);
  52:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
  53:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
  54:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  55:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  56:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Set Control Register
  57:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  58:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
  59:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  60:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  61:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
  62:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
  63:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          void __set_CONTROL(uint32_t control);
  64:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
  65:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE void __set_CONTROL(uint32_t control)
  66:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
  67:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  68:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __regControl = control;
  69:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
  70:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
  71:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  72:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  73:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get ISPR Register
  74:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  75:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the content of the ISPR Register.
  76:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  77:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               ISPR Register value
  78:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
  79:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
  80:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          uint32_t __get_IPSR(void);
  81:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
  82:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE uint32_t __get_IPSR(void)
  83:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
  84:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  85:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(__regIPSR);
  86:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
  87:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
  88:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  89:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  90:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get APSR Register
  91:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  92:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
  93:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
  94:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               APSR Register value
  95:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
  96:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
  97:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          uint32_t __get_APSR(void);
  98:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
  99:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE uint32_t __get_APSR(void)
 100:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 101:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 102:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(__regAPSR);
 103:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 104:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 105:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 106:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 107:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
 108:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 109:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 110:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 111:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               xPSR Register value
 112:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 113:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 114:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          uint32_t __get_xPSR(void);
 115:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 116:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE uint32_t __get_xPSR(void)
 117:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 118:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(__regXPSR);
 120:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 121:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 122:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 123:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 124:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 125:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 126:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 127:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 128:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               PSP Register value
 129:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 130:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 131:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          uint32_t __get_PSP(void);
 132:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 133:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE uint32_t __get_PSP(void)
 134:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 135:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 136:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(__regProcessStackPointer);
 137:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 138:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 139:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 140:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 141:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 142:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 143:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 144:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 145:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 146:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 147:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 148:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          void __set_PSP(uint32_t topOfProcStack);
 149:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 150:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE void __set_PSP(uint32_t topOfProcStack)
 151:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 152:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 153:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 154:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 155:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 156:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 157:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 158:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 159:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 160:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 161:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 162:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               MSP Register value
 163:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 164:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 165:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          uint32_t __get_MSP(void);
 166:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 167:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE uint32_t __get_MSP(void)
 168:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 169:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 170:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(__regMainStackPointer);
 171:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 172:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 173:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 174:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 175:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 176:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 177:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 178:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 179:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 180:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 181:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 182:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          void __set_MSP(uint32_t topOfMainStack);
 183:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 184:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE void __set_MSP(uint32_t topOfMainStack)
 185:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 186:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 187:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 188:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 189:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 190:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 191:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 192:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get Priority Mask
 193:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 194:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 195:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 196:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               Priority Mask value
 197:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 198:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 199:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          uint32_t __get_PRIMASK(void);
 200:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 201:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE uint32_t __get_PRIMASK(void)
 202:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 203:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 204:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(__regPriMask);
 205:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 206:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 207:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 208:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 209:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Set Priority Mask
 210:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 211:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 212:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 213:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 214:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 215:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 216:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          void __set_PRIMASK(uint32_t priMask);
 217:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 218:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 219:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 220:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 221:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __regPriMask = (priMask);
 222:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 223:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 224:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  
 225:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 226:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 227:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 228:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Enable FIQ
 229:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 230:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 231:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 232:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 233:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 234:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 235:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 236:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Disable FIQ
 237:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 238:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 239:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 240:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 241:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 242:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 243:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 244:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get Base Priority
 245:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 246:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 247:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 248:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               Base Priority register value
 249:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 250:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 251:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          uint32_t __get_BASEPRI(void);
 252:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 253:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 254:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 255:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 256:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(__regBasePri);
 257:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 258:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 259:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 260:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 261:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Set Base Priority
 262:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 263:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 264:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 265:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 266:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 267:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 268:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          void __set_BASEPRI(uint32_t basePri);
 269:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 270:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 271:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 272:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 273:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 274:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 275:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 276:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  
 277:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 278:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get Fault Mask
 279:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 280:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 281:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 282:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               Fault Mask register value
 283:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 284:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 285:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          uint32_t __get_FAULTMASK(void);
 286:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 287:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 288:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 289:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 290:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(__regFaultMask);
 291:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 292:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 293:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 294:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 295:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Set Fault Mask
 296:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 297:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 298:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 299:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 300:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 301:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 302:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** extern          void __set_FAULTMASK(uint32_t faultMask);
 303:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 304:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 305:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 306:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 307:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __regFaultMask = (faultMask & 1);
 308:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 309:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 310:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 311:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 312:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 313:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 314:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 315:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 316:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get FPSCR
 317:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 318:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 319:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 320:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 321:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 322:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE uint32_t __get_FPSCR(void)
 323:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 324:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1)
 325:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 326:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(__regfpscr);
 327:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else
 328:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****    return(0);
 329:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif
 330:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 331:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 332:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 333:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Set FPSCR
 334:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 335:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 336:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 337:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 338:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 339:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE void __set_FPSCR(uint32_t fpscr)
 340:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 341:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1)
 342:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 343:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __regfpscr = (fpscr);
 344:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif
 345:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 346:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 347:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 348:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 349:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 350:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  #elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
 351:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* IAR iccarm specific functions */
 352:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 353:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if defined (__ICCARM__)
 354:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
 355:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif
 356:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 357:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #pragma diag_suppress=Pe940
 358:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 359:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 360:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 361:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 362:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 363:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 364:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #define __enable_irq                              __enable_interrupt
 365:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 366:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 367:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 368:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 369:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 370:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 371:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 372:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #define __disable_irq                             __disable_interrupt
 373:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 374:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 375:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* intrinsic unsigned long __get_CONTROL( void ); (see intrinsic.h) */
 376:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* intrinsic void __set_CONTROL( unsigned long ); (see intrinsic.h) */
 377:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 378:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 379:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get ISPR Register
 380:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 381:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the content of the ISPR Register.
 382:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 383:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               ISPR Register value
 384:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 385:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static uint32_t __get_IPSR(void)
 386:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 387:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM("mrs r0, ipsr");
 388:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 389:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 390:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 391:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get APSR Register
 392:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 393:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
 394:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 395:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               APSR Register value
 396:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 397:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static uint32_t __get_APSR(void)
 398:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 399:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM("mrs r0, apsr");
 400:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 401:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 402:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 403:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
 404:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 405:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 406:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 407:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               xPSR Register value
 408:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 409:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static uint32_t __get_xPSR(void)
 410:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 411:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM("mrs r0, psr");           // assembler does not know "xpsr"
 412:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 413:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 414:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 415:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 416:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 417:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 418:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 419:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               PSP Register value
 420:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 421:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static uint32_t __get_PSP(void)
 422:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 423:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM("mrs r0, psp");
 424:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 425:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  
 426:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 427:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 428:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 429:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 430:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 431:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 432:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 433:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static void __set_PSP(uint32_t topOfProcStack)
 434:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 435:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM("msr psp, r0");
 436:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 437:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 438:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 439:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 440:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 441:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 442:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 443:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               MSP Register value
 444:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 445:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static uint32_t __get_MSP(void)
 446:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 447:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM("mrs r0, msp");
 448:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 449:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  
 450:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 451:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 452:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 453:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 454:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 455:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 456:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 457:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static void __set_MSP(uint32_t topOfMainStack)
 458:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 459:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM("msr msp, r0");
 460:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 461:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  
 462:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 463:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* intrinsic unsigned long __get_PRIMASK( void ); (see intrinsic.h) */
 464:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* intrinsic void __set_PRIMASK( unsigned long ); (see intrinsic.h) */
 465:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  
 466:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 467:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 468:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 469:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Enable FIQ
 470:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 471:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 472:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 473:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 474:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE void __enable_fault_irq(void)
 475:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 476:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM ("cpsie f");
 477:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 478:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 479:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 480:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Disable FIQ
 481:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 482:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 483:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 484:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 485:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static __INLINE void __disable_fault_irq(void)
 486:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 487:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM ("cpsid f");
 488:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 489:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 490:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 491:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* intrinsic unsigned long __get_BASEPRI( void );   (see intrinsic.h) */
 492:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* intrinsic void __set_BASEPRI( unsigned long );   (see intrinsic.h) */
 493:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* intrinsic unsigned long __get_FAULTMASK( void ); (see intrinsic.h) */
 494:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* intrinsic void __set_FAULTMASK(unsigned long);   (see intrinsic.h) */
 495:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 496:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 497:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 498:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 499:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 500:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 501:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get FPSCR
 502:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 503:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 504:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 505:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 506:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 507:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static uint32_t __get_FPSCR(void)
 508:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 509:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1)
 510:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM("vmrs r0, fpscr"); 
 511:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #else
 512:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(0);
 513:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif
 514:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 515:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 516:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 517:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Set FPSCR
 518:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 519:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 520:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 521:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 522:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 523:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** static void __set_FPSCR(uint32_t fpscr)
 524:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 525:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1)
 526:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM("vmsr fpscr, r0");
 527:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif
 528:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 529:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 530:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 531:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 532:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #pragma diag_default=Pe940
 533:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 534:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 535:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 536:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /* GNU gcc specific functions */
 537:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 538:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 539:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 540:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 541:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 542:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 543:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
 544:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 545:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 546:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 547:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 548:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 549:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 550:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 551:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 552:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 553:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 554:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
 555:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 556:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 557:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 558:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 559:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 560:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get Control Register
 561:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 562:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
 563:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 564:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               Control Register value
 565:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 566:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_CONTROL(void)
 567:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 568:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   uint32_t result;
 569:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 570:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 571:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   return(result);
 572:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 573:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 574:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 575:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Set Control Register
 576:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 577:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
 578:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 579:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 580:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 581:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_CONTROL(uint32_t control)
 582:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 583:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 584:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 585:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 586:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 587:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** /** \brief  Get ISPR Register
 588:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 589:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     This function returns the content of the ISPR Register.
 590:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 591:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****     \return               ISPR Register value
 592:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****  */
 593:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_IPSR(void)
 594:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** {
 595:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   uint32_t result;
 596:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** 
 597:CMSISv2p00_LPC17xx/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 877              	 .loc 3 597 0
 878              	 .syntax unified
 879              	
 880 0004 EFF30583 	 MRS r3,ipsr
 881              	
 882              	.LVL63:
 883              	 .thumb
 884              	 .syntax unified
 885              	.LBE113:
 886              	.LBE112:
 403:uart.c        ****     uint32_t bytes = 0;
 404:uart.c        **** 
 405:uart.c        ****     // only fiddle interrupt status outside interrupt context
 406:uart.c        ****     uint8_t intr = __get_IPSR() & 0x1F;
 407:uart.c        **** 
 408:uart.c        ****     if (intr == 0) __disable_irq();
 887              	 .loc 1 408 0
 888 0008 13F01F03 	 ands r3,r3,#31
 889              	.LVL64:
 890 000c 00D1     	 bne .L85
 891              	.LBB114:
 892              	.LBB115:
 556:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 893              	 .loc 3 556 0
 894              	 .syntax unified
 895              	
 896 000e 72B6     	 cpsid i
 897              	
 898              	 .thumb
 899              	 .syntax unified
 900              	.L85:
 901              	.LBE115:
 902              	.LBE114:
 903 0010 0020     	 movs r0,#0
 904              	.LVL65:
 409:uart.c        **** 
 410:uart.c        ****     while ((buflen > 0) && (!(RB_EMPTY(rxbuf))))
 905              	 .loc 1 410 0
 906 0012 0E4A     	 ldr r2,.L87
 907              	.LVL66:
 908              	.L79:
 909 0014 8842     	 cmp r0,r1
 910 0016 05D0     	 beq .L82
 911              	 .loc 1 410 0 is_stmt 0 discriminator 1
 912 0018 1468     	 ldr r4,[r2]
 913 001a 5568     	 ldr r5,[r2,#4]
 914 001c 6C40     	 eors r4,r4,r5
 915 001e C4F30804 	 ubfx r4,r4,#0,#9
 916 0022 14B9     	 cbnz r4,.L83
 917              	.L82:
 411:uart.c        ****     {
 412:uart.c        ****         RB_POP(rxbuf, *buf++);
 413:uart.c        **** 
 414:uart.c        ****         if (intr == 0) __enable_irq();
 415:uart.c        **** 
 416:uart.c        ****         bytes++;
 417:uart.c        ****         buflen--;
 418:uart.c        **** 
 419:uart.c        ****         if (intr == 0) __disable_irq();
 420:uart.c        ****     }
 421:uart.c        ****     if (intr == 0) __enable_irq();
 918              	 .loc 1 421 0 is_stmt 1
 919 0024 03B9     	 cbnz r3,.L77
 920              	.LBB116:
 921              	.LBB117:
 545:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 922              	 .loc 3 545 0
 923              	 .syntax unified
 924              	
 925 0026 62B6     	 cpsie i
 926              	
 927              	 .thumb
 928              	 .syntax unified
 929              	.L77:
 930              	.LBE117:
 931              	.LBE116:
 422:uart.c        **** 
 423:uart.c        ****     return bytes;
 424:uart.c        **** }
 932              	 .loc 1 424 0
 933 0028 70BD     	 pop {r4,r5,r6,pc}
 934              	.L83:
 935              	.LVL67:
 412:uart.c        **** 
 936              	 .loc 1 412 0
 937 002a 5468     	 ldr r4,[r2,#4]
 938 002c 651C     	 adds r5,r4,#1
 939 002e 5560     	 str r5,[r2,#4]
 940 0030 1444     	 add r4,r4,r2
 941 0032 247A     	 ldrb r4,[r4,#8]
 942 0034 3454     	 strb r4,[r6,r0]
 943 0036 5468     	 ldr r4,[r2,#4]
 944 0038 C4F30804 	 ubfx r4,r4,#0,#9
 945 003c 5460     	 str r4,[r2,#4]
 414:uart.c        **** 
 946              	 .loc 1 414 0
 947 003e 03B9     	 cbnz r3,.L80
 948              	.LBB118:
 949              	.LBB119:
 545:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 950              	 .loc 3 545 0
 951              	 .syntax unified
 952              	
 953 0040 62B6     	 cpsie i
 954              	
 955              	 .thumb
 956              	 .syntax unified
 957              	.L80:
 958              	.LBE119:
 959              	.LBE118:
 416:uart.c        ****         buflen--;
 960              	 .loc 1 416 0
 961 0042 0130     	 adds r0,r0,#1
 962              	.LVL68:
 419:uart.c        ****     }
 963              	 .loc 1 419 0
 964 0044 002B     	 cmp r3,#0
 965 0046 E5D1     	 bne .L79
 966              	.LBB120:
 967              	.LBB121:
 556:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 968              	 .loc 3 556 0
 969              	 .syntax unified
 970              	
 971 0048 72B6     	 cpsid i
 972              	
 973              	 .thumb
 974              	 .syntax unified
 975 004a E3E7     	 b .L79
 976              	.L88:
 977              	 .align 2
 978              	.L87:
 979 004c 00000000 	 .word rxbuf
 980              	.LBE121:
 981              	.LBE120:
 982              	 .cfi_endproc
 983              	.LFE63:
 985              	 .section .text.UART_cansend,"ax",%progbits
 986              	 .align 1
 987              	 .global UART_cansend
 988              	 .syntax unified
 989              	 .thumb
 990              	 .thumb_func
 991              	 .fpu softvfp
 993              	UART_cansend:
 994              	.LFB64:
 425:uart.c        **** 
 426:uart.c        **** int UART_cansend(void) {
 995              	 .loc 1 426 0
 996              	 .cfi_startproc
 997              	 
 998              	 
 999              	 
 427:uart.c        ****     return RB_CANWRITE(txbuf);
 1000              	 .loc 1 427 0
 1001 0000 044B     	 ldr r3,.L90
 1002 0002 5868     	 ldr r0,[r3,#4]
 1003 0004 1B68     	 ldr r3,[r3]
 1004 0006 00F2FF10 	 addw r0,r0,#511
 1005 000a C01A     	 subs r0,r0,r3
 428:uart.c        **** }
 1006              	 .loc 1 428 0
 1007 000c C0F30800 	 ubfx r0,r0,#0,#9
 1008 0010 7047     	 bx lr
 1009              	.L91:
 1010 0012 00BF     	 .align 2
 1011              	.L90:
 1012 0014 00000000 	 .word txbuf
 1013              	 .cfi_endproc
 1014              	.LFE64:
 1016              	 .section .text.UART_canrecv,"ax",%progbits
 1017              	 .align 1
 1018              	 .global UART_canrecv
 1019              	 .syntax unified
 1020              	 .thumb
 1021              	 .thumb_func
 1022              	 .fpu softvfp
 1024              	UART_canrecv:
 1025              	.LFB65:
 429:uart.c        **** 
 430:uart.c        **** int UART_canrecv(void) {
 1026              	 .loc 1 430 0
 1027              	 .cfi_startproc
 1028              	 
 1029              	 
 1030              	 
 431:uart.c        ****     return RB_CANREAD(rxbuf);
 1031              	 .loc 1 431 0
 1032 0000 034B     	 ldr r3,.L93
 1033 0002 1868     	 ldr r0,[r3]
 1034 0004 5B68     	 ldr r3,[r3,#4]
 1035 0006 C01A     	 subs r0,r0,r3
 432:uart.c        **** }
 1036              	 .loc 1 432 0
 1037 0008 C0F30800 	 ubfx r0,r0,#0,#9
 1038 000c 7047     	 bx lr
 1039              	.L94:
 1040 000e 00BF     	 .align 2
 1041              	.L93:
 1042 0010 00000000 	 .word rxbuf
 1043              	 .cfi_endproc
 1044              	.LFE65:
 1046              	 .section .text.UART_busy,"ax",%progbits
 1047              	 .align 1
 1048              	 .global UART_busy
 1049              	 .syntax unified
 1050              	 .thumb
 1051              	 .thumb_func
 1052              	 .fpu softvfp
 1054              	UART_busy:
 1055              	.LFB66:
 433:uart.c        **** 
 434:uart.c        **** int UART_busy(void) {
 1056              	 .loc 1 434 0
 1057              	 .cfi_startproc
 1058              	 
 1059              	 
 1060              	 
 435:uart.c        **** 	if (u->LSR & UART_LSR_TEMT)
 1061              	 .loc 1 435 0
 1062 0000 064B     	 ldr r3,.L98
 1063 0002 1B68     	 ldr r3,[r3]
 1064 0004 1B7D     	 ldrb r3,[r3,#20]
 1065 0006 5B06     	 lsls r3,r3,#25
 436:uart.c        **** 		return 0;
 437:uart.c        **** 	return RB_CANREAD(txbuf);
 1066              	 .loc 1 437 0
 1067 0008 5FBF     	 itttt pl
 1068 000a 054B     	 ldrpl r3,.L98+4
 1069 000c 1868     	 ldrpl r0,[r3]
 1070 000e 5B68     	 ldrpl r3,[r3,#4]
 1071 0010 C01A     	 subpl r0,r0,r3
 1072 0012 54BF     	 ite pl
 1073 0014 C0F30800 	 ubfxpl r0,r0,#0,#9
 436:uart.c        **** 		return 0;
 1074              	 .loc 1 436 0
 1075 0018 0020     	 movmi r0,#0
 438:uart.c        **** }
 1076              	 .loc 1 438 0
 1077 001a 7047     	 bx lr
 1078              	.L99:
 1079              	 .align 2
 1080              	.L98:
 1081 001c 00000000 	 .word u
 1082 0020 00000000 	 .word txbuf
 1083              	 .cfi_endproc
 1084              	.LFE66:
 1086              	 .section .text.UART_tx_isr,"ax",%progbits
 1087              	 .align 1
 1088              	 .global UART_tx_isr
 1089              	 .syntax unified
 1090              	 .thumb
 1091              	 .thumb_func
 1092              	 .fpu softvfp
 1094              	UART_tx_isr:
 1095              	.LFB68:
 439:uart.c        **** 
 440:uart.c        **** void UART_isr(void)
 441:uart.c        **** {
 442:uart.c        ****     uint32_t intsrc, ls;
 443:uart.c        **** 
 444:uart.c        ****     /* Determine the interrupt source */
 445:uart.c        ****     intsrc = UART_GetIntId(u) & UART_IIR_INTID_MASK;
 446:uart.c        **** 
 447:uart.c        ****     // Receive Line Status
 448:uart.c        ****     if (intsrc == UART_IIR_INTID_RLS)
 449:uart.c        ****     {
 450:uart.c        ****         // Check line status
 451:uart.c        ****         ls = UART_GetLineStatus(u);
 452:uart.c        ****         // Mask out the Receive Ready and Transmit Holding empty status
 453:uart.c        ****         ls &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE | UART_LSR_BI | UART_LSR_RXFE);
 454:uart.c        ****         // If any error exist
 455:uart.c        ****         if (ls)
 456:uart.c        ****         {
 457:uart.c        ****             UART_err_isr(ls & 0xFF);
 458:uart.c        ****         }
 459:uart.c        ****     }
 460:uart.c        **** 
 461:uart.c        ****     // Receive Data Available or Character time-out
 462:uart.c        ****     if ((intsrc == UART_IIR_INTID_RDA) || (intsrc == UART_IIR_INTID_CTI))
 463:uart.c        ****     {
 464:uart.c        ****         UART_rx_isr();
 465:uart.c        ****     }
 466:uart.c        **** 
 467:uart.c        ****     // Transmit Holding Empty
 468:uart.c        ****     if (intsrc == UART_IIR_INTID_THRE)
 469:uart.c        ****     {
 470:uart.c        ****         UART_tx_isr();
 471:uart.c        ****     }
 472:uart.c        **** }
 473:uart.c        **** 
 474:uart.c        **** void UART_tx_isr(void) {
 1096              	 .loc 1 474 0
 1097              	 .cfi_startproc
 1098              	 
 1099              	 
 1100 0000 70B5     	 push {r4,r5,r6,lr}
 1101              	 .cfi_def_cfa_offset 16
 1102              	 .cfi_offset 4,-16
 1103              	 .cfi_offset 5,-12
 1104              	 .cfi_offset 6,-8
 1105              	 .cfi_offset 14,-4
 475:uart.c        ****     // Disable THRE interrupt
 476:uart.c        ****     UART_IntConfig(u, UART_INTCFG_THRE, DISABLE);
 1106              	 .loc 1 476 0
 1107 0002 194C     	 ldr r4,.L109
 1108 0004 0022     	 movs r2,#0
 1109 0006 0121     	 movs r1,#1
 1110 0008 2068     	 ldr r0,[r4]
 1111 000a 184D     	 ldr r5,.L109+4
 1112 000c A847     	 blx r5
 1113              	.LVL69:
 477:uart.c        **** 
 478:uart.c        ****     /* Wait for FIFO buffer empty, transfer UART_TX_FIFO_SIZE bytes
 479:uart.c        ****      * of data or break whenever ring buffers are empty */
 480:uart.c        ****     /* Wait until THR empty */
 481:uart.c        ****     while (UART_CheckBusy(u) == SET);
 1114              	 .loc 1 481 0
 1115 000e 184E     	 ldr r6,.L109+8
 1116              	.L101:
 1117              	 .loc 1 481 0 is_stmt 0 discriminator 1
 1118 0010 2068     	 ldr r0,[r4]
 1119 0012 B047     	 blx r6
 1120              	.LVL70:
 1121 0014 0128     	 cmp r0,#1
 1122 0016 FBD0     	 beq .L101
 482:uart.c        **** 
 483:uart.c        ****     while (!RB_EMPTY(txbuf))
 484:uart.c        ****     {
 485:uart.c        **** 		RB_POP(txbuf, u->THR);
 1123              	 .loc 1 485 0 is_stmt 1
 1124 0018 2068     	 ldr r0,[r4]
 483:uart.c        ****     {
 1125              	 .loc 1 483 0
 1126 001a 164B     	 ldr r3,.L109+12
 1127              	.L102:
 1128 001c 1A68     	 ldr r2,[r3]
 1129 001e 5968     	 ldr r1,[r3,#4]
 1130 0020 4A40     	 eors r2,r2,r1
 1131 0022 C2F30802 	 ubfx r2,r2,#0,#9
 1132 0026 5AB9     	 cbnz r2,.L103
 486:uart.c        ****     }
 487:uart.c        **** 
 488:uart.c        ****     /* If there is no more data to send, disable the transmit
 489:uart.c        ****      *       interrupt - else enable it or keep it enabled */
 490:uart.c        ****     if (RB_EMPTY(txbuf)) {
 1133              	 .loc 1 490 0
 1134 0028 1C68     	 ldr r4,[r3]
 1135 002a 5B68     	 ldr r3,[r3,#4]
 1136 002c 124E     	 ldr r6,.L109+16
 1137 002e 5C40     	 eors r4,r4,r3
 1138 0030 C4F30804 	 ubfx r4,r4,#0,#9
 1139 0034 84B9     	 cbnz r4,.L104
 491:uart.c        ****         UART_IntConfig(u, UART_INTCFG_THRE, DISABLE);
 1140              	 .loc 1 491 0
 1141 0036 2246     	 mov r2,r4
 1142 0038 0121     	 movs r1,#1
 1143 003a A847     	 blx r5
 1144              	.LVL71:
 492:uart.c        ****         // Reset Tx Interrupt state
 493:uart.c        ****         TxIntStat = RESET;
 1145              	 .loc 1 493 0
 1146 003c 3470     	 strb r4,[r6]
 1147 003e 70BD     	 pop {r4,r5,r6,pc}
 1148              	.L103:
 485:uart.c        ****     }
 1149              	 .loc 1 485 0
 1150 0040 5A68     	 ldr r2,[r3,#4]
 1151 0042 511C     	 adds r1,r2,#1
 1152 0044 5960     	 str r1,[r3,#4]
 1153 0046 1A44     	 add r2,r2,r3
 1154 0048 127A     	 ldrb r2,[r2,#8]
 1155 004a D2B2     	 uxtb r2,r2
 1156 004c 0270     	 strb r2,[r0]
 1157 004e 5A68     	 ldr r2,[r3,#4]
 1158 0050 C2F30802 	 ubfx r2,r2,#0,#9
 1159 0054 5A60     	 str r2,[r3,#4]
 1160 0056 E1E7     	 b .L102
 1161              	.L104:
 494:uart.c        ****     }
 495:uart.c        ****     else{
 496:uart.c        ****         // Set Tx Interrupt state
 497:uart.c        ****         TxIntStat = SET;
 1162              	 .loc 1 497 0
 1163 0058 0122     	 movs r2,#1
 498:uart.c        ****         UART_IntConfig(u, UART_INTCFG_THRE, ENABLE);
 1164              	 .loc 1 498 0
 1165 005a 2B46     	 mov r3,r5
 497:uart.c        ****         UART_IntConfig(u, UART_INTCFG_THRE, ENABLE);
 1166              	 .loc 1 497 0
 1167 005c 3270     	 strb r2,[r6]
 1168              	 .loc 1 498 0
 1169 005e 1146     	 mov r1,r2
 499:uart.c        ****     }
 500:uart.c        **** }
 1170              	 .loc 1 500 0
 1171 0060 BDE87040 	 pop {r4,r5,r6,lr}
 1172              	 .cfi_restore 14
 1173              	 .cfi_restore 6
 1174              	 .cfi_restore 5
 1175              	 .cfi_restore 4
 1176              	 .cfi_def_cfa_offset 0
 498:uart.c        ****     }
 1177              	 .loc 1 498 0
 1178 0064 1847     	 bx r3
 1179              	.LVL72:
 1180              	.L110:
 1181 0066 00BF     	 .align 2
 1182              	.L109:
 1183 0068 00000000 	 .word u
 1184 006c 00000000 	 .word UART_IntConfig
 1185 0070 00000000 	 .word UART_CheckBusy
 1186 0074 00000000 	 .word txbuf
 1187 0078 00000000 	 .word TxIntStat
 1188              	 .cfi_endproc
 1189              	.LFE68:
 1191              	 .section .text.UART_send,"ax",%progbits
 1192              	 .align 1
 1193              	 .global UART_send
 1194              	 .syntax unified
 1195              	 .thumb
 1196              	 .thumb_func
 1197              	 .fpu softvfp
 1199              	UART_send:
 1200              	.LFB62:
 359:uart.c        ****     uint32_t bytes = 0;
 1201              	 .loc 1 359 0
 1202              	 .cfi_startproc
 1203              	 
 1204              	 
 1205              	.LVL73:
 1206 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 1207              	 .cfi_def_cfa_offset 24
 1208              	 .cfi_offset 3,-24
 1209              	 .cfi_offset 4,-20
 1210              	 .cfi_offset 5,-16
 1211              	 .cfi_offset 6,-12
 1212              	 .cfi_offset 7,-8
 1213              	 .cfi_offset 14,-4
 1214              	.LBB122:
 1215              	.LBB123:
 1216              	 .loc 3 597 0
 1217              	 .syntax unified
 1218              	
 1219 0002 EFF30582 	 MRS r2,ipsr
 1220              	
 1221              	.LVL74:
 1222              	 .thumb
 1223              	 .syntax unified
 1224              	.LBE123:
 1225              	.LBE122:
 365:uart.c        **** 
 1226              	 .loc 1 365 0
 1227 0006 12F01F02 	 ands r2,r2,#31
 1228              	.LVL75:
 1229 000a 00D1     	 bne .L127
 1230              	.LBB124:
 1231              	.LBB125:
 556:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 1232              	 .loc 3 556 0
 1233              	 .syntax unified
 1234              	
 1235 000c 72B6     	 cpsid i
 1236              	
 1237              	 .thumb
 1238              	 .syntax unified
 1239              	.L127:
 1240              	.LBE125:
 1241              	.LBE124:
 1242 000e 0025     	 movs r5,#0
 367:uart.c        ****     {
 1243              	 .loc 1 367 0
 1244 0010 214B     	 ldr r3,.L136
 1245 0012 224E     	 ldr r6,.L136+4
 1246              	.LVL76:
 1247              	.L113:
 1248 0014 8D42     	 cmp r5,r1
 1249 0016 08D0     	 beq .L123
 367:uart.c        ****     {
 1250              	 .loc 1 367 0 is_stmt 0 discriminator 1
 1251 0018 5F68     	 ldr r7,[r3,#4]
 1252 001a 1C68     	 ldr r4,[r3]
 1253 001c 0134     	 adds r4,r4,#1
 1254 001e 7C40     	 eors r4,r4,r7
 1255 0020 C4F30804 	 ubfx r4,r4,#0,#9
 1256 0024 54B9     	 cbnz r4,.L124
 367:uart.c        ****     {
 1257              	 .loc 1 367 0 discriminator 2
 1258 0026 3478     	 ldrb r4,[r6]
 1259 0028 44B9     	 cbnz r4,.L124
 1260              	.L123:
 393:uart.c        **** 
 1261              	 .loc 1 393 0 is_stmt 1
 1262 002a 02B9     	 cbnz r2,.L125
 1263              	.LBB126:
 1264              	.LBB127:
 545:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 1265              	 .loc 3 545 0
 1266              	 .syntax unified
 1267              	
 1268 002c 62B6     	 cpsie i
 1269              	
 1270              	 .thumb
 1271              	 .syntax unified
 1272              	.L125:
 1273              	.LBE127:
 1274              	.LBE126:
 395:uart.c        ****         UART_tx_isr();
 1275              	 .loc 1 395 0
 1276 002e 1C4B     	 ldr r3,.L136+8
 1277 0030 1B78     	 ldrb r3,[r3]
 1278 0032 0BB9     	 cbnz r3,.L111
 396:uart.c        ****     }
 1279              	 .loc 1 396 0
 1280 0034 1B4B     	 ldr r3,.L136+12
 1281 0036 9847     	 blx r3
 1282              	.LVL77:
 1283              	.L111:
 400:uart.c        **** 
 1284              	 .loc 1 400 0
 1285 0038 2846     	 mov r0,r5
 1286 003a F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1287              	.LVL78:
 1288              	.L124:
 369:uart.c        **** 
 1289              	 .loc 1 369 0
 1290 003c 02B9     	 cbnz r2,.L114
 1291              	.LBB128:
 1292              	.LBB129:
 545:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 1293              	 .loc 3 545 0
 1294              	 .syntax unified
 1295              	
 1296 003e 62B6     	 cpsie i
 1297              	
 1298              	 .thumb
 1299              	 .syntax unified
 1300              	.L114:
 1301              	.LBE129:
 1302              	.LBE128:
 371:uart.c        ****             if (blocking && (intr == 0))
 1303              	 .loc 1 371 0
 1304 0040 5F68     	 ldr r7,[r3,#4]
 1305 0042 1C68     	 ldr r4,[r3]
 1306 0044 0134     	 adds r4,r4,#1
 1307 0046 7C40     	 eors r4,r4,r7
 1308 0048 C4F30804 	 ubfx r4,r4,#0,#9
 1309 004c 3CB9     	 cbnz r4,.L115
 372:uart.c        ****             {
 1310              	 .loc 1 372 0
 1311 004e 3478     	 ldrb r4,[r6]
 1312 0050 04B1     	 cbz r4,.L116
 372:uart.c        ****             {
 1313              	 .loc 1 372 0 is_stmt 0 discriminator 1
 1314 0052 3AB1     	 cbz r2,.L117
 1315              	.L116:
 378:uart.c        ****             }
 1316              	 .loc 1 378 0 is_stmt 1
 1317 0054 5C68     	 ldr r4,[r3,#4]
 1318 0056 0134     	 adds r4,r4,#1
 1319 0058 C4F30804 	 ubfx r4,r4,#0,#9
 1320 005c 5C60     	 str r4,[r3,#4]
 1321              	.L115:
 382:uart.c        **** 
 1322              	 .loc 1 382 0
 1323 005e 52B9     	 cbnz r2,.L119
 1324 0060 08E0     	 b .L120
 1325              	.L118:
 1326              	.LBB130:
 1327              	.LBB131:
 1328              	 .file 4 "CMSISv2p00_LPC17xx/inc/core_cmInstr.h"
   1:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /**************************************************************************//**
   2:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * @version  V2.01
   5:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * @date     06. December 2010
   6:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  *
   7:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * @note
   8:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  *
  10:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * @par
  11:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  *
  15:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * @par
  16:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  *
  22:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  ******************************************************************************/
  23:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  24:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H__
  25:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H__
  26:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  27:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  28:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \ingroup  CMSIS
  30:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 	\addtogroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  31:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   Access to dedicated instructions
  32:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   @{
  33:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** */
  34:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  35:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
  36:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  37:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  38:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  No Operation
  39:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  40:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  41:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
  42:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __NOP                             __nop
  43:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  44:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  45:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  46:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  47:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  48:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     until one of a number of events occurs.
  49:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
  50:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __WFI                             __wfi
  51:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  52:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  53:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Wait For Event
  54:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  55:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  56:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  57:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
  58:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __WFE                             __wfe
  59:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  60:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  61:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Send Event
  62:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  63:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  64:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
  65:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __SEV                             __sev
  66:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  67:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  68:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  69:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  70:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  71:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  72:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  73:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
  74:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  75:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  76:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  77:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  78:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  79:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  80:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  81:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
  82:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  83:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  84:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  85:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  86:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  87:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  88:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  89:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
  90:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  91:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  92:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  93:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  94:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  95:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
  96:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
  97:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
  98:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return               Reversed value
  99:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 100:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __REV                             __rev
 101:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 102:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 103:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 104:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 105:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 106:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 107:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 108:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return               Reversed value
 109:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 110:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
 111:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** extern uint32_t __REV16(uint32_t value);
 112:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400677)  */
 113:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 114:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 115:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   rev16 r0, r0
 116:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   bx lr
 117:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 118:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 119:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 120:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 121:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 123:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 125:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return               Reversed value
 127:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 128:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
 129:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** extern int32_t __REVSH(int32_t value);
 130:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400677)  */
 131:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 132:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 133:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   revsh r0, r0
 134:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   bx lr
 135:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 136:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 137:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 138:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 139:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 140:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 141:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 142:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 143:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 144:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 145:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 146:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return               Reversed value
 147:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 148:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 149:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 150:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 151:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 152:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 153:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 154:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 155:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 156:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 157:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 158:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 159:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 160:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 161:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 162:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 163:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 164:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 165:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 166:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 167:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 168:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 169:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 170:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 171:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 172:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 173:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 174:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 175:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 176:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 177:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 178:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 179:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 180:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 181:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 182:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 183:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 184:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 185:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 186:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 187:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          0  Function succeeded
 188:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          1  Function failed
 189:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 190:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 191:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 192:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 193:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 194:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 195:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 196:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 197:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 198:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 199:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          0  Function succeeded
 200:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          1  Function failed
 201:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 202:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 203:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 204:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 205:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 206:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 207:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 208:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 209:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 210:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 211:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          0  Function succeeded
 212:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          1  Function failed
 213:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 214:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 215:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 216:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 217:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 218:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 219:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 220:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 221:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 222:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400000)
 223:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** extern void __CLREX(void);
 224:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 225:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 226:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 227:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 228:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 229:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 230:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 231:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function saturates a signed value.
 232:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 233:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 234:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 235:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return             Saturated value
 236:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 237:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 238:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 239:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 240:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 241:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 242:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 243:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 244:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 245:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 246:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return             Saturated value
 247:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 248:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __USAT                            __usat
 249:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 250:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 251:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 252:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 253:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 254:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 255:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 256:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 257:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 258:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __CLZ                             __clz
 259:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 260:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 261:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 262:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 263:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 264:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
 265:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 266:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 267:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #include <intrinsics.h>                     /* IAR Intrinsics   */
 268:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 269:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #pragma diag_suppress=Pe940
 270:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 271:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  No Operation
 272:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 273:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 274:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 275:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #define __NOP                           __no_operation
 276:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 277:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 278:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 279:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 280:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 281:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     until one of a number of events occurs.
 282:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 283:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static __INLINE  void __WFI(void)
 284:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 285:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM ("wfi");
 286:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 287:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 288:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 289:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Wait For Event
 290:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 291:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 292:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 293:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 294:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static __INLINE  void __WFE(void)
 295:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 296:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM ("wfe");
 297:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 298:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 299:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 300:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Send Event
 301:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 302:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 303:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 304:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static __INLINE  void __SEV(void)
 305:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 306:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM ("sev");
 307:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 308:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 309:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 310:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* intrinsic     void __ISB(void)            (see intrinsics.h) */
 311:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* intrinsic     void __DSB(void)            (see intrinsics.h) */
 312:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* intrinsic     void __DMB(void)            (see intrinsics.h) */
 313:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* intrinsic uint32_t __REV(uint32_t value)  (see intrinsics.h) */
 314:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* intrinsic          __SSAT                 (see intrinsics.h) */
 315:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* intrinsic          __USAT                 (see intrinsics.h) */
 316:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 317:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 318:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 319:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 320:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 321:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 322:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 323:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return               Reversed value
 324:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 325:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static uint32_t __REV16(uint32_t value)
 326:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 327:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM("rev16 r0, r0");
 328:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 329:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 330:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 331:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* intrinsic uint32_t __REVSH(uint32_t value)  (see intrinsics.h */
 332:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 333:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 334:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 335:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 336:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 337:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 338:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 339:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 340:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 341:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return               Reversed value
 342:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 343:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static uint32_t __RBIT(uint32_t value)
 344:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 345:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM("rbit r0, r0");
 346:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 347:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 348:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 349:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 350:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 351:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 352:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 353:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 354:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 355:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 356:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static uint8_t __LDREXB(volatile uint8_t *addr)
 357:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 358:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM("ldrexb r0, [r0]");
 359:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 360:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 361:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 362:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 363:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 364:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 365:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 366:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 367:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 368:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 369:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static uint16_t __LDREXH(volatile uint16_t *addr)
 370:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 371:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM("ldrexh r0, [r0]");
 372:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 373:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 374:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 375:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 376:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 377:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 378:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 379:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 380:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 381:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 382:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* intrinsic unsigned long __LDREX(unsigned long *)  (see intrinsics.h) */
 383:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static uint32_t __LDREXW(volatile uint32_t *addr)
 384:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 385:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM("ldrex r0, [r0]");
 386:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 387:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 388:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 389:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 390:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 391:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 392:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 393:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 394:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 395:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          0  Function succeeded
 396:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          1  Function failed
 397:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 398:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 399:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 400:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM("strexb r0, r0, [r1]");
 401:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 402:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 403:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 404:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 405:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 406:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 407:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 408:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 409:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 410:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          0  Function succeeded
 411:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          1  Function failed
 412:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 413:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 414:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 415:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM("strexh r0, r0, [r1]");
 416:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 417:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 418:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 419:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 420:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 421:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 422:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 423:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 424:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 425:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          0  Function succeeded
 426:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     \return          1  Function failed
 427:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 428:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long)  (see intrinsics.h )*/
 429:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 430:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 431:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM("strex r0, r0, [r1]");
 432:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 433:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 434:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 435:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 436:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 437:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 438:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 439:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 440:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** static __INLINE void __CLREX(void)
 441:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 442:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM ("clrex");
 443:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 444:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 445:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* intrinsic   unsigned char __CLZ( unsigned long )      (see intrinsics.h) */
 446:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 447:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 448:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 449:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #pragma diag_default=Pe940
 450:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 451:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 452:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 453:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 454:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 455:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 456:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  No Operation
 457:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 458:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 459:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 460:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 461:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 462:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 463:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** }
 464:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 465:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 466:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 467:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** 
 468:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 469:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****     until one of a number of events occurs.
 470:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****  */
 471:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 472:CMSISv2p00_LPC17xx/inc/core_cmInstr.h **** {
 473:CMSISv2p00_LPC17xx/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 1329              	 .loc 4 473 0
 1330              	 .syntax unified
 1331              	
 1332 0062 30BF     	 wfi
 1333              	
 1334              	 .thumb
 1335              	 .syntax unified
 1336              	.L117:
 1337              	.LBE131:
 1338              	.LBE130:
 374:uart.c        ****                     __WFI();
 1339              	 .loc 1 374 0
 1340 0064 5F68     	 ldr r7,[r3,#4]
 1341 0066 1C68     	 ldr r4,[r3]
 1342 0068 0134     	 adds r4,r4,#1
 1343 006a 7C40     	 eors r4,r4,r7
 1344 006c C4F30804 	 ubfx r4,r4,#0,#9
 1345 0070 002C     	 cmp r4,#0
 1346 0072 F6D0     	 beq .L118
 1347              	.L120:
 1348              	.LBB132:
 1349              	.LBB133:
 556:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 1350              	 .loc 3 556 0
 1351              	 .syntax unified
 1352              	
 1353 0074 72B6     	 cpsid i
 1354              	
 1355              	 .thumb
 1356              	 .syntax unified
 1357              	.L119:
 1358              	.LBE133:
 1359              	.LBE132:
 384:uart.c        **** 
 1360              	 .loc 1 384 0
 1361 0076 1C68     	 ldr r4,[r3]
 1362 0078 671C     	 adds r7,r4,#1
 1363 007a 1F60     	 str r7,[r3]
 1364              	.LVL79:
 1365 007c 475D     	 ldrb r7,[r0,r5]
 1366 007e 1C44     	 add r4,r4,r3
 1367 0080 2772     	 strb r7,[r4,#8]
 1368 0082 1C68     	 ldr r4,[r3]
 1369 0084 C4F30804 	 ubfx r4,r4,#0,#9
 1370 0088 1C60     	 str r4,[r3]
 386:uart.c        **** 
 1371              	 .loc 1 386 0
 1372 008a 02B9     	 cbnz r2,.L121
 1373              	.LBB134:
 1374              	.LBB135:
 545:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 1375              	 .loc 3 545 0
 1376              	 .syntax unified
 1377              	
 1378 008c 62B6     	 cpsie i
 1379              	
 1380              	 .thumb
 1381              	 .syntax unified
 1382              	.L121:
 1383              	.LBE135:
 1384              	.LBE134:
 388:uart.c        ****         buflen--;
 1385              	 .loc 1 388 0
 1386 008e 0135     	 adds r5,r5,#1
 1387              	.LVL80:
 391:uart.c        ****     }
 1388              	 .loc 1 391 0
 1389 0090 002A     	 cmp r2,#0
 1390 0092 BFD1     	 bne .L113
 1391              	.LBB136:
 1392              	.LBB137:
 556:CMSISv2p00_LPC17xx/inc/core_cmFunc.h **** }
 1393              	 .loc 3 556 0
 1394              	 .syntax unified
 1395              	
 1396 0094 72B6     	 cpsid i
 1397              	
 1398              	 .thumb
 1399              	 .syntax unified
 1400 0096 BDE7     	 b .L113
 1401              	.L137:
 1402              	 .align 2
 1403              	.L136:
 1404 0098 00000000 	 .word txbuf
 1405 009c 00000000 	 .word blocking
 1406 00a0 00000000 	 .word TxIntStat
 1407 00a4 00000000 	 .word UART_tx_isr
 1408              	.LBE137:
 1409              	.LBE136:
 1410              	 .cfi_endproc
 1411              	.LFE62:
 1413              	 .section .text.UART_rx_isr,"ax",%progbits
 1414              	 .align 1
 1415              	 .global UART_rx_isr
 1416              	 .syntax unified
 1417              	 .thumb
 1418              	 .thumb_func
 1419              	 .fpu softvfp
 1421              	UART_rx_isr:
 1422              	.LFB69:
 501:uart.c        **** 
 502:uart.c        **** void UART_rx_isr(void) {
 1423              	 .loc 1 502 0
 1424              	 .cfi_startproc
 1425              	 
 1426              	 
 1427 0000 10B5     	 push {r4,lr}
 1428              	 .cfi_def_cfa_offset 8
 1429              	 .cfi_offset 4,-8
 1430              	 .cfi_offset 14,-4
 503:uart.c        ****     uint8_t c;
 504:uart.c        ****     uint32_t r;
 505:uart.c        **** 
 506:uart.c        ****     while(1){
 507:uart.c        ****         // If data received
 508:uart.c        ****         r = u->LSR;
 1431              	 .loc 1 508 0
 1432 0002 0D4B     	 ldr r3,.L144
 1433 0004 1868     	 ldr r0,[r3]
 509:uart.c        ****         if (r & UART_LSR_RDR){
 510:uart.c        **** 			c = u->RBR;
 511:uart.c        **** 			/* Check if buffer is more space
 512:uart.c        ****              * If no more space, remaining character will be trimmed out
 513:uart.c        ****              */
 514:uart.c        ****             if (!RB_FULL(rxbuf)){
 1434              	 .loc 1 514 0
 1435 0006 0D4B     	 ldr r3,.L144+4
 1436              	.L140:
 508:uart.c        ****         if (r & UART_LSR_RDR){
 1437              	 .loc 1 508 0
 1438 0008 027D     	 ldrb r2,[r0,#20]
 1439              	.LVL81:
 509:uart.c        ****         if (r & UART_LSR_RDR){
 1440              	 .loc 1 509 0
 1441 000a D207     	 lsls r2,r2,#31
 1442              	.LVL82:
 1443 000c 13D5     	 bpl .L138
 510:uart.c        **** 			/* Check if buffer is more space
 1444              	 .loc 1 510 0
 1445 000e 0178     	 ldrb r1,[r0]
 1446              	 .loc 1 514 0
 1447 0010 5C68     	 ldr r4,[r3,#4]
 1448 0012 1A68     	 ldr r2,[r3]
 510:uart.c        **** 			/* Check if buffer is more space
 1449              	 .loc 1 510 0
 1450 0014 C9B2     	 uxtb r1,r1
 1451              	.LVL83:
 1452              	 .loc 1 514 0
 1453 0016 0132     	 adds r2,r2,#1
 1454 0018 6240     	 eors r2,r2,r4
 1455 001a C2F30802 	 ubfx r2,r2,#0,#9
 1456 001e 002A     	 cmp r2,#0
 1457 0020 F2D0     	 beq .L140
 515:uart.c        ****                 RB_PUSH(rxbuf, c);
 1458              	 .loc 1 515 0
 1459 0022 1A68     	 ldr r2,[r3]
 1460 0024 541C     	 adds r4,r2,#1
 1461 0026 1A44     	 add r2,r2,r3
 1462 0028 1C60     	 str r4,[r3]
 1463 002a 1172     	 strb r1,[r2,#8]
 1464 002c 1A68     	 ldr r2,[r3]
 1465 002e C2F30802 	 ubfx r2,r2,#0,#9
 1466 0032 1A60     	 str r2,[r3]
 1467 0034 E8E7     	 b .L140
 1468              	.LVL84:
 1469              	.L138:
 1470 0036 10BD     	 pop {r4,pc}
 1471              	.L145:
 1472              	 .align 2
 1473              	.L144:
 1474 0038 00000000 	 .word u
 1475 003c 00000000 	 .word rxbuf
 1476              	 .cfi_endproc
 1477              	.LFE69:
 1479              	 .section .text.UART_isr,"ax",%progbits
 1480              	 .align 1
 1481              	 .global UART_isr
 1482              	 .syntax unified
 1483              	 .thumb
 1484              	 .thumb_func
 1485              	 .fpu softvfp
 1487              	UART_isr:
 1488              	.LFB67:
 441:uart.c        ****     uint32_t intsrc, ls;
 1489              	 .loc 1 441 0
 1490              	 .cfi_startproc
 1491              	 
 1492              	 
 1493 0000 70B5     	 push {r4,r5,r6,lr}
 1494              	 .cfi_def_cfa_offset 16
 1495              	 .cfi_offset 4,-16
 1496              	 .cfi_offset 5,-12
 1497              	 .cfi_offset 6,-8
 1498              	 .cfi_offset 14,-4
 445:uart.c        **** 
 1499              	 .loc 1 445 0
 1500 0002 0E4D     	 ldr r5,.L155
 1501 0004 0E4B     	 ldr r3,.L155+4
 1502 0006 2868     	 ldr r0,[r5]
 1503 0008 9847     	 blx r3
 1504              	.LVL85:
 1505 000a 00F00E04 	 and r4,r0,#14
 1506              	.LVL86:
 448:uart.c        ****     {
 1507              	 .loc 1 448 0
 1508 000e 062C     	 cmp r4,#6
 1509 0010 06D1     	 bne .L147
 451:uart.c        ****         // Mask out the Receive Ready and Transmit Holding empty status
 1510              	 .loc 1 451 0
 1511 0012 2868     	 ldr r0,[r5]
 1512 0014 0B4B     	 ldr r3,.L155+8
 1513 0016 9847     	 blx r3
 1514              	.LVL87:
 455:uart.c        ****         {
 1515              	 .loc 1 455 0
 1516 0018 10F09E0F 	 tst r0,#158
 1517 001c 0CD0     	 beq .L146
 1518              	.L154:
 1519 001e FEE7     	 b .L154
 1520              	.LVL88:
 1521              	.L147:
 462:uart.c        ****     {
 1522              	 .loc 1 462 0
 1523 0020 00F00600 	 and r0,r0,#6
 1524 0024 0428     	 cmp r0,#4
 1525 0026 01D1     	 bne .L150
 464:uart.c        ****     }
 1526              	 .loc 1 464 0
 1527 0028 074B     	 ldr r3,.L155+12
 1528 002a 9847     	 blx r3
 1529              	.LVL89:
 1530              	.L150:
 468:uart.c        ****     {
 1531              	 .loc 1 468 0
 1532 002c 022C     	 cmp r4,#2
 1533 002e 03D1     	 bne .L146
 472:uart.c        **** 
 1534              	 .loc 1 472 0
 1535 0030 BDE87040 	 pop {r4,r5,r6,lr}
 1536              	 .cfi_remember_state
 1537              	 .cfi_restore 14
 1538              	 .cfi_restore 6
 1539              	 .cfi_restore 5
 1540              	 .cfi_restore 4
 1541              	 .cfi_def_cfa_offset 0
 1542              	.LVL90:
 470:uart.c        ****     }
 1543              	 .loc 1 470 0
 1544 0034 054B     	 ldr r3,.L155+16
 1545 0036 1847     	 bx r3
 1546              	.LVL91:
 1547              	.L146:
 1548              	 .cfi_restore_state
 1549 0038 70BD     	 pop {r4,r5,r6,pc}
 1550              	.LVL92:
 1551              	.L156:
 1552 003a 00BF     	 .align 2
 1553              	.L155:
 1554 003c 00000000 	 .word u
 1555 0040 00000000 	 .word UART_GetIntId
 1556 0044 00000000 	 .word UART_GetLineStatus
 1557 0048 00000000 	 .word UART_rx_isr
 1558 004c 00000000 	 .word UART_tx_isr
 1559              	 .cfi_endproc
 1560              	.LFE67:
 1562              	 .section .text.UART_err_isr,"ax",%progbits
 1563              	 .align 1
 1564              	 .global UART_err_isr
 1565              	 .syntax unified
 1566              	 .thumb
 1567              	 .thumb_func
 1568              	 .fpu softvfp
 1570              	UART_err_isr:
 1571              	.LFB70:
 516:uart.c        ****             }
 517:uart.c        ****         }
 518:uart.c        ****         // no more data
 519:uart.c        ****         else {
 520:uart.c        ****             break;
 521:uart.c        ****         }
 522:uart.c        ****     }
 523:uart.c        **** }
 524:uart.c        **** 
 525:uart.c        **** void UART_err_isr(uint8_t bLSErrType) {
 1572              	 .loc 1 525 0
 1573              	 .cfi_startproc
 1574              	 
 1575              	 
 1576              	 
 1577              	 
 1578              	.LVL93:
 1579              	.L158:
 1580 0000 FEE7     	 b .L158
 1581              	 .cfi_endproc
 1582              	.LFE70:
 1584              	 .section .text.UART0_IRQHandler,"ax",%progbits
 1585              	 .align 1
 1586              	 .global UART0_IRQHandler
 1587              	 .syntax unified
 1588              	 .thumb
 1589              	 .thumb_func
 1590              	 .fpu softvfp
 1592              	UART0_IRQHandler:
 1593              	.LFB71:
 526:uart.c        **** //    uint8_t test;
 527:uart.c        ****     // Loop forever
 528:uart.c        ****     while (1){
 529:uart.c        ****         // For testing purpose
 530:uart.c        **** //        test = bLSErrType;
 531:uart.c        ****     }
 532:uart.c        **** }
 533:uart.c        **** 
 534:uart.c        **** // extern "C" {
 535:uart.c        **** void UART0_IRQHandler(void)
 536:uart.c        **** {
 1594              	 .loc 1 536 0
 1595              	 .cfi_startproc
 1596              	 
 1597              	 
 1598              	 
 537:uart.c        **** 	ENTER_ISR();
 538:uart.c        **** // 	if (UART_irqrouter[0])
 539:uart.c        **** // 		UART_irqrouter[0]->isr();
 540:uart.c        **** 	UART_isr();
 1599              	 .loc 1 540 0
 1600 0000 004B     	 ldr r3,.L160
 1601 0002 1847     	 bx r3
 1602              	.LVL94:
 1603              	.L161:
 1604              	 .align 2
 1605              	.L160:
 1606 0004 00000000 	 .word UART_isr
 1607              	 .cfi_endproc
 1608              	.LFE71:
 1610              	 .comm port,4,4
 1611              	 .comm blocking,1,1
 1612              	 .comm TxIntStat,1,1
 1613              	 .comm rxbuf,520,1
 1614              	 .comm txbuf,520,1
 1615              	 .comm u,4,4
 1616              	 .section .rodata.CSWTCH.28,"a",%progbits
 1617              	 .set .LANCHOR0,.+0
 1620              	CSWTCH.28:
 1621 0000 01       	 .byte 1
 1622 0001 02       	 .byte 2
 1623 0002 00       	 .byte 0
 1624              	 .text
 1625              	.Letext0:
 1626              	 .file 5 "/usr/include/newlib/machine/_default_types.h"
 1627              	 .file 6 "/usr/include/newlib/sys/_stdint.h"
 1628              	 .file 7 "pins.h"
 1629              	 .file 8 "CMSISv2p00_LPC17xx/inc/LPC17xx.h"
 1630              	 .file 9 "CMSISv2p00_LPC17xx/inc/system_LPC17xx.h"
 1631              	 .file 10 "LPC17xxLib/inc/lpc_types.h"
 1632              	 .file 11 "LPC17xxLib/inc/lpc17xx_uart.h"
 1633              	 .file 12 "uart.h"
 1634              	 .file 13 "LPC17xxLib/inc/lpc17xx_pinsel.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uart.c
    {standard input}:16     .text.UART_pin_init:0000000000000000 $t
    {standard input}:23     .text.UART_pin_init:0000000000000000 UART_pin_init
    {standard input}:206    .text.UART_pin_init:00000000000000cc $d
                            *COM*:0000000000000001 blocking
                            *COM*:0000000000000004 port
                            *COM*:0000000000000004 u
    {standard input}:218    .text.UART_baud:0000000000000000 $t
    {standard input}:225    .text.UART_baud:0000000000000000 UART_baud
    {standard input}:552    .text.UART_baud:0000000000000154 $d
    {standard input}:556    .text.UART_baud:0000000000000158 $t
    {standard input}:712    .text.UART_baud:0000000000000254 $d
                            *COM*:0000000000000001 TxIntStat
                            *COM*:0000000000000208 txbuf
                            *COM*:0000000000000208 rxbuf
    {standard input}:730    .text.UART_init:0000000000000000 $t
    {standard input}:737    .text.UART_init:0000000000000000 UART_init
    {standard input}:769    .text.UART_init:0000000000000014 $d
    {standard input}:775    .text.UART_deinit:0000000000000000 $t
    {standard input}:782    .text.UART_deinit:0000000000000000 UART_deinit
    {standard input}:796    .text.UART_deinit:000000000000000c $d
    {standard input}:800    .text.UART_deinit:0000000000000010 $t
    {standard input}:844    .text.UART_deinit:0000000000000028 $d
    {standard input}:852    .text.UART_recv:0000000000000000 $t
    {standard input}:859    .text.UART_recv:0000000000000000 UART_recv
    {standard input}:979    .text.UART_recv:000000000000004c $d
    {standard input}:986    .text.UART_cansend:0000000000000000 $t
    {standard input}:993    .text.UART_cansend:0000000000000000 UART_cansend
    {standard input}:1012   .text.UART_cansend:0000000000000014 $d
    {standard input}:1017   .text.UART_canrecv:0000000000000000 $t
    {standard input}:1024   .text.UART_canrecv:0000000000000000 UART_canrecv
    {standard input}:1042   .text.UART_canrecv:0000000000000010 $d
    {standard input}:1047   .text.UART_busy:0000000000000000 $t
    {standard input}:1054   .text.UART_busy:0000000000000000 UART_busy
    {standard input}:1081   .text.UART_busy:000000000000001c $d
    {standard input}:1087   .text.UART_tx_isr:0000000000000000 $t
    {standard input}:1094   .text.UART_tx_isr:0000000000000000 UART_tx_isr
    {standard input}:1183   .text.UART_tx_isr:0000000000000068 $d
    {standard input}:1192   .text.UART_send:0000000000000000 $t
    {standard input}:1199   .text.UART_send:0000000000000000 UART_send
    {standard input}:1404   .text.UART_send:0000000000000098 $d
    {standard input}:1414   .text.UART_rx_isr:0000000000000000 $t
    {standard input}:1421   .text.UART_rx_isr:0000000000000000 UART_rx_isr
    {standard input}:1474   .text.UART_rx_isr:0000000000000038 $d
    {standard input}:1480   .text.UART_isr:0000000000000000 $t
    {standard input}:1487   .text.UART_isr:0000000000000000 UART_isr
    {standard input}:1554   .text.UART_isr:000000000000003c $d
    {standard input}:1563   .text.UART_err_isr:0000000000000000 $t
    {standard input}:1570   .text.UART_err_isr:0000000000000000 UART_err_isr
    {standard input}:1585   .text.UART0_IRQHandler:0000000000000000 $t
    {standard input}:1592   .text.UART0_IRQHandler:0000000000000000 UART0_IRQHandler
    {standard input}:1606   .text.UART0_IRQHandler:0000000000000004 $d
    {standard input}:1620   .rodata.CSWTCH.28:0000000000000000 CSWTCH.28
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
PINSEL_ConfigPin
SystemCoreClock
UART_IntConfig
UART_CheckBusy
UART_GetIntId
UART_GetLineStatus
